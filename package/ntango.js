// Generated by dart2js (fast startup emitter, strong), the Dart to JavaScript compiler version: 2.4.1.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
{
}
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == 'function')
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixin(cls, mixin) {
    copyProperties(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        H.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, true, name);" + "return new c(this, funcs[0], receiver, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, false, name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
  }
  function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
    var cache = null;
    return isStatic ? function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, false, name).prototype;
      return cache;
    } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
  }
  var typesOffset = 0;
  function installTearOff(container, getterName, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var funs = [];
    for (var i = 0; i < funsOrNames.length; i++) {
      var fun = funsOrNames[i];
      if (typeof fun == 'string')
        fun = container[fun];
      fun.$callName = callNames[i];
      funs.push(fun);
    }
    var fun = funs[0];
    fun.$requiredArgCount = requiredParameterCount;
    fun.$defaultValues = optionalParameterDefaultValues;
    var reflectionInfo = funType;
    if (typeof reflectionInfo == "number")
      reflectionInfo += typesOffset;
    var name = funsOrNames[0];
    fun.$stubName = name;
    var getterFunction = tearOff(funs, applyIndex || 0, reflectionInfo, isStatic, name, isIntercepted);
    container[getterName] = getterFunction;
    if (isStatic)
      fun.$tearOff = getterFunction;
  }
  function installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixin, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  function getGlobalFromName(name) {
    for (var i = 0; i < holders.length; i++) {
      if (holders[i] == C)
        continue;
      if (holders[i][name])
        return holders[i][name];
    }
  }
  var C = {},
  H = {JS_CONST: function JS_CONST() {
    },
    MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
      H.assertSubtype(iterable, "$isIterable", [$S], "$asIterable");
      H.functionTypeCheck($function, {func: 1, ret: $T, args: [$S]});
      if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
        return new H.EfficientLengthMappedIterable(iterable, $function, [$S, $T]);
      return new H.MappedIterable(iterable, $function, [$S, $T]);
    },
    TakeIterable_TakeIterable: function(iterable, takeCount, $E) {
      H.assertSubtype(iterable, "$isIterable", [$E], "$asIterable");
      P.RangeError_checkNotNegative(takeCount, "takeCount");
      if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
        return new H.EfficientLengthTakeIterable(iterable, takeCount, [$E]);
      return new H.TakeIterable(iterable, takeCount, [$E]);
    },
    SkipIterable_SkipIterable: function(iterable, count, $E) {
      H.assertSubtype(iterable, "$isIterable", [$E], "$asIterable");
      if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable) {
        P.RangeError_checkNotNegative(count, "count");
        return new H.EfficientLengthSkipIterable(iterable, count, [$E]);
      }
      P.RangeError_checkNotNegative(count, "count");
      return new H.SkipIterable(iterable, count, [$E]);
    },
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    IterableElementError_tooMany: function() {
      return new P.StateError("Too many elements");
    },
    Sort_sort: function(a, compare, $E) {
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      H.Sort__doSort(a, 0, J.get$length$asx(a) - 1, compare, $E);
    },
    Sort__doSort: function(a, left, right, compare, $E) {
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      if (right - left <= 32)
        H.Sort__insertionSort(a, left, right, compare, $E);
      else
        H.Sort__dualPivotQuicksort(a, left, right, compare, $E);
    },
    Sort__insertionSort: function(a, left, right, compare, $E) {
      var i, t1, el, j, t2, j0;
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (j > left) {
            t2 = compare.call$2(t1.$index(a, j - 1), el);
            if (typeof t2 !== "number")
              return t2.$gt();
            t2 = t2 > 0;
          } else
            t2 = false;
          if (!t2)
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort: function(a, left, right, compare, $E) {
      var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t2, t0, less, great, k, ak, comp, great0, less0, pivots_are_equal, comp_pivot1, comp_pivot2;
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
      index1 = left + sixth;
      index5 = right - sixth;
      index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
      index2 = index3 - sixth;
      index4 = index3 + sixth;
      t1 = J.getInterceptor$asx(a);
      el1 = t1.$index(a, index1);
      el2 = t1.$index(a, index2);
      el3 = t1.$index(a, index3);
      el4 = t1.$index(a, index4);
      el5 = t1.$index(a, index5);
      t2 = compare.call$2(el1, el2);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t2 = compare.call$2(el1, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el1, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el3, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      t2 = compare.call$2(el2, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      if (J.$eq$(compare.call$2(el2, el4), 0)) {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (typeof comp !== "number")
            return comp.$lt();
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (typeof comp !== "number")
                return comp.$gt();
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
        pivots_are_equal = true;
      } else {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp_pivot1 = compare.call$2(ak, el2);
          if (typeof comp_pivot1 !== "number")
            return comp_pivot1.$lt();
          if (comp_pivot1 < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else {
            comp_pivot2 = compare.call$2(ak, el4);
            if (typeof comp_pivot2 !== "number")
              return comp_pivot2.$gt();
            if (comp_pivot2 > 0)
              for (; true;) {
                comp = compare.call$2(t1.$index(a, great), el4);
                if (typeof comp !== "number")
                  return comp.$gt();
                if (comp > 0) {
                  --great;
                  if (great < k)
                    break;
                  continue;
                } else {
                  comp = compare.call$2(t1.$index(a, great), el2);
                  if (typeof comp !== "number")
                    return comp.$lt();
                  great0 = great - 1;
                  if (comp < 0) {
                    t1.$indexSet(a, k, t1.$index(a, less));
                    less0 = less + 1;
                    t1.$indexSet(a, less, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                    less = less0;
                  } else {
                    t1.$indexSet(a, k, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                  }
                  great = great0;
                  break;
                }
              }
          }
        }
        pivots_are_equal = false;
      }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      H.Sort__doSort(a, left, less - 2, compare, $E);
      H.Sort__doSort(a, great + 2, right, compare, $E);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                comp = compare.call$2(t1.$index(a, great), el2);
                if (typeof comp !== "number")
                  return comp.$lt();
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        H.Sort__doSort(a, less, great, compare, $E);
      } else
        H.Sort__doSort(a, less, great, compare, $E);
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    TakeIterable: function TakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    EfficientLengthTakeIterable: function EfficientLengthTakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    TakeIterator: function TakeIterator(t0, t1, t2) {
      this._iterator = t0;
      this._remaining = t1;
      this.$ti = t2;
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1, t2) {
      this._iterator = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    Symbol: function Symbol(t0) {
      this.__internal$_name = t0;
    },
    ConstantMap__throwUnmodifiable: function() {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    unminifyOrTag: function(rawClassName) {
      var preserved = H.stringTypeCheck(init.mangledGlobalNames[rawClassName]);
      if (typeof preserved === "string")
        return preserved;
      return rawClassName;
    },
    getType: function(index) {
      return init.types[H.intTypeCheck(index)];
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return !!J.getInterceptor$(object).$isJavaScriptIndexingBehavior;
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_parseInt: function(source, radix) {
      var decimalMatch,
        match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return;
      if (3 >= match.length)
        return H.ioore(match, 3);
      decimalMatch = H.stringTypeCheck(match[3]);
      if (decimalMatch != null)
        return parseInt(source, 10);
      if (match[2] != null)
        return parseInt(source, 16);
      return;
    },
    Primitives_parseDouble: function(source) {
      var result, trimmed;
      if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
        return;
      result = parseFloat(source);
      if (isNaN(result)) {
        trimmed = C.JSString_methods.trim$0(source);
        if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
          return result;
        return;
      }
      return result;
    },
    Primitives_objectTypeName: function(object) {
      return H.Primitives__objectClassName(object) + H._joinArguments(H.getRuntimeTypeInfo(object), 0, null);
    },
    Primitives__objectClassName: function(object) {
      var interceptorConstructorName, $name, t1, dispatchName, objectConstructor, match, decompiledName,
        interceptor = J.getInterceptor$(object),
        interceptorConstructor = interceptor.constructor;
      if (typeof interceptorConstructor == "function") {
        interceptorConstructorName = interceptorConstructor.name;
        $name = typeof interceptorConstructorName === "string" ? interceptorConstructorName : null;
      } else
        $name = null;
      t1 = $name == null;
      if (t1 || interceptor === C.Interceptor_methods || !!interceptor.$isUnknownJavaScriptObject) {
        dispatchName = C.C_JS_CONST(object);
        if (t1)
          $name = dispatchName;
        if (dispatchName === "Object") {
          objectConstructor = object.constructor;
          if (typeof objectConstructor == "function") {
            match = String(objectConstructor).match(/^\s*function\s*([\w$]*)\s*\(/);
            decompiledName = match == null ? null : match[1];
            if (typeof decompiledName === "string" && /^\w+$/.test(decompiledName))
              $name = decompiledName;
          }
        }
        return $name;
      }
      $name = $name;
      return H.unminifyOrTag($name.length > 1 && C.JSString_methods._codeUnitAt$1($name, 0) === 36 ? C.JSString_methods.substring$1($name, 1) : $name);
    },
    Primitives_stringFromCharCode: function(charCode) {
      var bits;
      if (charCode <= 65535)
        return String.fromCharCode(charCode);
      if (charCode <= 1114111) {
        bits = charCode - 65536;
        return String.fromCharCode((55296 | C.JSInt_methods._shrOtherPositive$1(bits, 10)) >>> 0, 56320 | bits & 1023);
      }
      throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_lazyAsJsDate: function(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._value);
      return receiver.date;
    },
    Primitives_getYear: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
      return t1;
    },
    Primitives_getMonth: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
      return t1;
    },
    Primitives_getDay: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
      return t1;
    },
    Primitives_getHours: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
      return t1;
    },
    Primitives_getMinutes: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
      return t1;
    },
    Primitives_getSeconds: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
      return t1;
    },
    Primitives_getMilliseconds: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
      return t1;
    },
    Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
      var $arguments, namedArgumentList, t1 = {};
      H.assertSubtype(namedArguments, "$isMap", [P.String, null], "$asMap");
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      t1.argumentCount = positionalArguments.length;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1.names = "";
      if (namedArguments != null && namedArguments._length !== 0)
        namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, namedArgumentList, $arguments));
      "" + t1.argumentCount;
      return J.noSuchMethod$1$($function, new H.JSInvocationMirror(C.Symbol_call, 0, $arguments, namedArgumentList, 0));
    },
    Primitives_applyFunction: function($function, positionalArguments, namedArguments) {
      var t1, $arguments, argumentCount, jsStub;
      H.assertSubtype(namedArguments, "$isMap", [P.String, null], "$asMap");
      if (positionalArguments instanceof Array)
        t1 = namedArguments == null || namedArguments._length === 0;
      else
        t1 = false;
      if (t1) {
        $arguments = positionalArguments;
        argumentCount = $arguments.length;
        if (argumentCount === 0) {
          if (!!$function.call$0)
            return $function.call$0();
        } else if (argumentCount === 1) {
          if (!!$function.call$1)
            return $function.call$1($arguments[0]);
        } else if (argumentCount === 2) {
          if (!!$function.call$2)
            return $function.call$2($arguments[0], $arguments[1]);
        } else if (argumentCount === 3) {
          if (!!$function.call$3)
            return $function.call$3($arguments[0], $arguments[1], $arguments[2]);
        } else if (argumentCount === 4) {
          if (!!$function.call$4)
            return $function.call$4($arguments[0], $arguments[1], $arguments[2], $arguments[3]);
        } else if (argumentCount === 5)
          if (!!$function.call$5)
            return $function.call$5($arguments[0], $arguments[1], $arguments[2], $arguments[3], $arguments[4]);
        jsStub = $function["call" + "$" + argumentCount];
        if (jsStub != null)
          return jsStub.apply($function, $arguments);
      }
      return H.Primitives__genericApplyFunction2($function, positionalArguments, namedArguments);
    },
    Primitives__genericApplyFunction2: function($function, positionalArguments, namedArguments) {
      var $arguments, argumentCount, requiredParameterCount, defaultValuesClosure, t1, defaultValues, interceptor, jsFunction, keys, _i, used, t2;
      H.assertSubtype(namedArguments, "$isMap", [P.String, null], "$asMap");
      $arguments = positionalArguments instanceof Array ? positionalArguments : P.List_List$from(positionalArguments, true, null);
      argumentCount = $arguments.length;
      requiredParameterCount = $function.$requiredArgCount;
      if (argumentCount < requiredParameterCount)
        return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      defaultValuesClosure = $function.$defaultValues;
      t1 = defaultValuesClosure == null;
      defaultValues = !t1 ? defaultValuesClosure() : null;
      interceptor = J.getInterceptor$($function);
      jsFunction = interceptor["call*"];
      if (typeof jsFunction === "string")
        jsFunction = interceptor[jsFunction];
      if (t1) {
        if (namedArguments != null && namedArguments._length !== 0)
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount === requiredParameterCount)
          return jsFunction.apply($function, $arguments);
        return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      }
      if (defaultValues instanceof Array) {
        if (namedArguments != null && namedArguments._length !== 0)
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount > requiredParameterCount + defaultValues.length)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        C.JSArray_methods.addAll$1($arguments, defaultValues.slice(argumentCount - requiredParameterCount));
        return jsFunction.apply($function, $arguments);
      } else {
        if (argumentCount > requiredParameterCount)
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        keys = Object.keys(defaultValues);
        if (namedArguments == null)
          for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i)
            C.JSArray_methods.add$1($arguments, defaultValues[H.stringTypeCheck(keys[_i])]);
        else {
          for (t1 = keys.length, used = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i) {
            t2 = H.stringTypeCheck(keys[_i]);
            if (namedArguments.containsKey$1(t2)) {
              ++used;
              C.JSArray_methods.add$1($arguments, namedArguments.$index(0, t2));
            } else
              C.JSArray_methods.add$1($arguments, defaultValues[t2]);
          }
          if (used !== namedArguments._length)
            return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        }
        return jsFunction.apply($function, $arguments);
      }
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, t1, _s5_ = "index";
      if (typeof index !== "number" || Math.floor(index) !== index)
        return new P.ArgumentError(true, index, _s5_, null);
      $length = H.intTypeCheck(J.get$length$asx(indexable));
      if (!(index < 0)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        return P.IndexError$(index, indexable, _s5_, null, $length);
      return P.RangeError$value(index, _s5_);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    checkNum: function(value) {
      if (typeof value !== "number")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern: function(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = H.quoteStringForRegExp(message.replace(String({}), '$receiver$'));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = H.setRuntimeTypeInfo([], [P.String]);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new H.TypeErrorDecoder(message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn: function(expression) {
      return function($expr$) {
        var $argumentsExpr$ = '$arguments$';
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    NullError$: function(_message, match) {
      return new H.NullError(_message, match == null ? null : match.method);
    },
    JsNoSuchMethodError$: function(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException: function(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, t2, _null = null,
        t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return;
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", _null));
            case 445:
            case 5007:
              return t1.call$1(H.NullError$(H.S(message) + " (Error " + ieErrorCode + ")", _null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2)
              return t1.call$1(H.NullError$(H.stringTypeCheck(message), match));
          }
        }
        return t1.call$1(new H.UnknownJsTypeError(typeof message === "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message === "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return t1.call$1(new P.ArgumentError(false, _null, _null, typeof message === "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message === "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception == null)
        return new H._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    invokeClosure: function(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      H.interceptedTypeCheck(closure, "$isFunction");
      switch (H.intTypeCheck(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw H.wrapException(new P._Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      H.intTypeCheck(arity);
      if (closure == null)
        return;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, propertyName) {
      var $constructor, t1, trampoline, signatureFunction, getReceiver, applyTrampoline, i, stub, stubCallName, _null = null,
        $function = functions[0],
        callName = $function.$callName,
        $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(_null, _null, _null, _null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
      }
      if (typeof reflectionInfo == "number")
        signatureFunction = function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getType, reflectionInfo);
      else if (typeof reflectionInfo == "function")
        if (isStatic)
          signatureFunction = reflectionInfo;
        else {
          getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
          signatureFunction = function(f, r) {
            return function() {
              return f.apply({$receiver: r(this)}, arguments);
            };
          }(reflectionInfo, getReceiver);
        }
      else
        throw H.wrapException("Error in reflectionInfo.");
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < functions.length; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, selfName, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + t1;
        t1 = "return function(){var " + selfName + " = this.";
        t2 = $.BoundClosure_selfFieldNameCache;
        return new Function(t1 + H.S(t2 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t2) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += t1;
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      return new Function(t1 + H.S(t2 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t2) + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf = H.BoundClosure_selfOf,
        getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var t2, stubName, arity, lookedUpFunction, t3, t4, $arguments,
        t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null)
        t1 = $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self");
      t2 = $.BoundClosure_receiverFieldNameCache;
      if (t2 == null)
        t2 = $.BoundClosure_receiverFieldNameCache = H.BoundClosure_computeFieldNamed("receiver");
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t3 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t4 = !t3 || arity >= 28;
      if (t4)
        return H.Closure_cspForwardInterceptedCall(arity, !t3, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + t2 + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, $name) {
      return H.Closure_fromTearOff(receiver, functions, H.intTypeCheck(applyTrampolineIndex), reflectionInfo, !!isStatic, !!isIntercepted, $name);
    },
    BoundClosure_selfOf: function(closure) {
      return closure._self;
    },
    BoundClosure_receiverOf: function(closure) {
      return closure._receiver;
    },
    BoundClosure_computeFieldNamed: function(fieldName) {
      var t1, i, $name,
        template = new H.BoundClosure("self", "target", "receiver", "name"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template));
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
    },
    boolConversionCheck: function(value) {
      if (value == null)
        H.assertThrow("boolean expression must not be null");
      return value;
    },
    stringTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "String"));
    },
    doubleTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "double"));
    },
    numTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "num"));
    },
    boolTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "boolean")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "bool"));
    },
    intTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number" && Math.floor(value) === value)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "int"));
    },
    propertyTypeError: function(value, property) {
      throw H.wrapException(H.TypeErrorImplementation$(value, H.unminifyOrTag(H.stringTypeCheck(property).substring(3))));
    },
    propertyTypeCastError: function(value, property) {
      throw H.wrapException(H.CastErrorImplementation$(value, H.unminifyOrTag(H.stringTypeCheck(property).substring(3))));
    },
    interceptedTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if ((typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    interceptedTypeCast: function(value, property) {
      var t1;
      if (value != null)
        t1 = (typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property];
      else
        t1 = true;
      if (t1)
        return value;
      H.propertyTypeCastError(value, property);
    },
    listTypeCheck: function(value) {
      if (value == null)
        return value;
      if (!!J.getInterceptor$(value).$isList)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "List<dynamic>"));
    },
    listSuperNativeTypeCheck: function(value, property) {
      var t1;
      if (value == null)
        return value;
      t1 = J.getInterceptor$(value);
      if (!!t1.$isList)
        return value;
      if (t1[property])
        return value;
      H.propertyTypeError(value, property);
    },
    extractFunctionTypeObjectFromInternal: function(o) {
      var signature;
      if ("$signature" in o) {
        signature = o.$signature;
        if (typeof signature == "number")
          return init.types[H.intTypeCheck(signature)];
        else
          return o.$signature();
      }
      return;
    },
    functionTypeTest: function(value, functionTypeRti) {
      var functionTypeObject;
      if (typeof value == "function")
        return true;
      functionTypeObject = H.extractFunctionTypeObjectFromInternal(J.getInterceptor$(value));
      if (functionTypeObject == null)
        return false;
      return H._isFunctionSubtype(functionTypeObject, null, functionTypeRti, null);
    },
    functionTypeCheck: function(value, functionTypeRti) {
      var $self, t1;
      if (value == null)
        return value;
      if ($._inTypeAssertion)
        return value;
      $._inTypeAssertion = true;
      try {
        if (H.functionTypeTest(value, functionTypeRti))
          return value;
        $self = H.runtimeTypeToString(functionTypeRti);
        t1 = H.TypeErrorImplementation$(value, $self);
        throw H.wrapException(t1);
      } finally {
        $._inTypeAssertion = false;
      }
    },
    futureOrCheck: function(o, futureOrRti) {
      if (o != null && !H.checkSubtypeOfRuntimeType(o, futureOrRti))
        H.throwExpression(H.TypeErrorImplementation$(o, H.runtimeTypeToString(futureOrRti)));
      return o;
    },
    TypeErrorImplementation$: function(value, type) {
      return new H.TypeErrorImplementation("TypeError: " + P.Error_safeToString(value) + ": type '" + H._typeDescription(value) + "' is not a subtype of type '" + type + "'");
    },
    CastErrorImplementation$: function(value, type) {
      return new H.CastErrorImplementation("CastError: " + P.Error_safeToString(value) + ": type '" + H._typeDescription(value) + "' is not a subtype of type '" + type + "'");
    },
    _typeDescription: function(value) {
      var functionTypeObject,
        t1 = J.getInterceptor$(value);
      if (!!t1.$isClosure) {
        functionTypeObject = H.extractFunctionTypeObjectFromInternal(t1);
        if (functionTypeObject != null)
          return H.runtimeTypeToString(functionTypeObject);
        return "Closure";
      }
      return H.Primitives_objectTypeName(value);
    },
    assertThrow: function(message) {
      throw H.wrapException(new H._AssertionError(message));
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError(H.stringTypeCheck(staticName)));
    },
    RuntimeError$: function(message) {
      return new H.RuntimeError(message);
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    setRuntimeTypeInfo: function(target, rti) {
      target.$ti = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$ti;
    },
    getRuntimeTypeArguments: function(interceptor, object, substitutionName) {
      return H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(object));
    },
    getRuntimeTypeArgumentIntercepted: function(interceptor, target, substitutionName, index) {
      var $arguments;
      H.stringTypeCheck(substitutionName);
      H.intTypeCheck(index);
      $arguments = H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      return $arguments == null ? null : $arguments[index];
    },
    getRuntimeTypeArgument: function(target, substitutionName, index) {
      var $arguments;
      H.stringTypeCheck(substitutionName);
      H.intTypeCheck(index);
      $arguments = H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      return $arguments == null ? null : $arguments[index];
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti;
      H.intTypeCheck(index);
      rti = H.getRuntimeTypeInfo(target);
      return rti == null ? null : rti[index];
    },
    runtimeTypeToString: function(rti) {
      return H._runtimeTypeToString(rti, null);
    },
    _runtimeTypeToString: function(rti, genericContext) {
      var t1, t2;
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      if (rti == null)
        return "dynamic";
      if (rti === -1)
        return "void";
      if (typeof rti === "object" && rti !== null && rti.constructor === Array)
        return H.unminifyOrTag(rti[0].name) + H._joinArguments(rti, 1, genericContext);
      if (typeof rti == "function")
        return H.unminifyOrTag(rti.name);
      if (rti === -2)
        return "dynamic";
      if (typeof rti === "number") {
        H.intTypeCheck(rti);
        if (genericContext == null || rti < 0 || rti >= genericContext.length)
          return "unexpected-generic-index:" + rti;
        t1 = genericContext.length;
        t2 = t1 - rti - 1;
        if (t2 < 0 || t2 >= t1)
          return H.ioore(genericContext, t2);
        return H.S(genericContext[t2]);
      }
      if ('func' in rti)
        return H._functionRtiToString(rti, genericContext);
      if ('futureOr' in rti)
        return "FutureOr<" + H._runtimeTypeToString("type" in rti ? rti.type : null, genericContext) + ">";
      return "unknown-reified-type";
    },
    _functionRtiToString: function(rti, genericContext) {
      var boundsRti, outerContextLength, offset, i, i0, typeParameters, typeSep, t2, boundRti, returnTypeText, $arguments, argumentsText, sep, _i, argument, optionalArguments, namedArguments, t3, _s2_ = ", ",
        t1 = [P.String];
      H.assertSubtype(genericContext, "$isList", t1, "$asList");
      if ("bounds" in rti) {
        boundsRti = rti.bounds;
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], t1);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsRti.length, i0 = i; i0 > 0; --i0)
          C.JSArray_methods.add$1(genericContext, "T" + (offset + i0));
        for (typeParameters = "<", typeSep = "", i0 = 0; i0 < i; ++i0, typeSep = _s2_) {
          typeParameters += typeSep;
          t1 = genericContext.length;
          t2 = t1 - i0 - 1;
          if (t2 < 0)
            return H.ioore(genericContext, t2);
          typeParameters = C.JSString_methods.$add(typeParameters, genericContext[t2]);
          boundRti = boundsRti[i0];
          if (boundRti != null && boundRti !== P.Object)
            typeParameters += " extends " + H._runtimeTypeToString(boundRti, genericContext);
        }
        typeParameters += ">";
      } else {
        typeParameters = "";
        outerContextLength = null;
      }
      returnTypeText = !!rti.v ? "void" : H._runtimeTypeToString(rti.ret, genericContext);
      if ("args" in rti) {
        $arguments = rti.args;
        for (t1 = $arguments.length, argumentsText = "", sep = "", _i = 0; _i < t1; ++_i, sep = _s2_) {
          argument = $arguments[_i];
          argumentsText = argumentsText + sep + H._runtimeTypeToString(argument, genericContext);
        }
      } else {
        argumentsText = "";
        sep = "";
      }
      if ("opt" in rti) {
        optionalArguments = rti.opt;
        argumentsText += sep + "[";
        for (t1 = optionalArguments.length, sep = "", _i = 0; _i < t1; ++_i, sep = _s2_) {
          argument = optionalArguments[_i];
          argumentsText = argumentsText + sep + H._runtimeTypeToString(argument, genericContext);
        }
        argumentsText += "]";
      }
      if ("named" in rti) {
        namedArguments = rti.named;
        argumentsText += sep + "{";
        for (t1 = H.extractKeys(namedArguments), t2 = t1.length, sep = "", _i = 0; _i < t2; ++_i, sep = _s2_) {
          t3 = H.stringTypeCheck(t1[_i]);
          argumentsText = argumentsText + sep + H._runtimeTypeToString(namedArguments[t3], genericContext) + (" " + H.S(t3));
        }
        argumentsText += "}";
      }
      if (outerContextLength != null)
        genericContext.length = outerContextLength;
      return typeParameters + "(" + argumentsText + ") => " + returnTypeText;
    },
    _joinArguments: function(types, startIndex, genericContext) {
      var buffer, index, separator, allDynamic, t1, argument;
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      if (types == null)
        return "";
      buffer = new P.StringBuffer("");
      for (index = startIndex, separator = "", allDynamic = true, t1 = ""; index < types.length; ++index, separator = ", ") {
        buffer._contents = t1 + separator;
        argument = types[index];
        if (argument != null)
          allDynamic = false;
        t1 = buffer._contents += H._runtimeTypeToString(argument, genericContext);
      }
      return "<" + buffer.toString$0(0) + ">";
    },
    substitute: function(substitution, $arguments) {
      if (substitution == null)
        return $arguments;
      substitution = substitution.apply(null, $arguments);
      if (substitution == null)
        return;
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        return substitution;
      if (typeof substitution == "function")
        return substitution.apply(null, $arguments);
      return $arguments;
    },
    checkSubtype: function(object, isField, checks, asField) {
      var $arguments, interceptor;
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return false;
      $arguments = H.getRuntimeTypeInfo(object);
      interceptor = J.getInterceptor$(object);
      if (interceptor[isField] == null)
        return false;
      return H.areSubtypes(H.substitute(interceptor[asField], $arguments), null, checks, null);
    },
    assertSubtype: function(object, isField, checks, asField) {
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return object;
      if (H.checkSubtype(object, isField, checks, asField))
        return object;
      throw H.wrapException(H.TypeErrorImplementation$(object, function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }(H.unminifyOrTag(isField.substring(3)) + H._joinArguments(checks, 0, null), init.mangledGlobalNames)));
    },
    assertIsSubtype: function(subtype, supertype, prefix, infix, suffix) {
      H.stringTypeCheck(prefix);
      H.stringTypeCheck(infix);
      H.stringTypeCheck(suffix);
      if (!H._isSubtype(subtype, null, supertype, null))
        H.throwTypeError("TypeError: " + H.S(prefix) + H.runtimeTypeToString(subtype) + H.S(infix) + H.runtimeTypeToString(supertype) + H.S(suffix));
    },
    throwTypeError: function(message) {
      throw H.wrapException(new H.TypeErrorImplementation(H.stringTypeCheck(message)));
    },
    areSubtypes: function(s, sEnv, t, tEnv) {
      var len, i;
      if (t == null)
        return true;
      if (s == null) {
        len = t.length;
        for (i = 0; i < len; ++i)
          if (!H._isSubtype(null, null, t[i], tEnv))
            return false;
        return true;
      }
      len = s.length;
      for (i = 0; i < len; ++i)
        if (!H._isSubtype(s[i], sEnv, t[i], tEnv))
          return false;
      return true;
    },
    computeSignature: function(signature, context, contextName) {
      return signature.apply(context, H.substitute(J.getInterceptor$(context)["$as" + H.S(contextName)], H.getRuntimeTypeInfo(context)));
    },
    isSupertypeOfNullRecursive: function(type) {
      var typeArgument;
      if (typeof type === "number")
        return false;
      if ('futureOr' in type) {
        typeArgument = "type" in type ? type.type : null;
        return type == null || type.name === "Object" || type.name === "Null" || type === -1 || type === -2 || H.isSupertypeOfNullRecursive(typeArgument);
      }
      return false;
    },
    checkSubtypeOfRuntimeType: function(o, t) {
      var type, rti;
      if (o == null)
        return t == null || t.name === "Object" || t.name === "Null" || t === -1 || t === -2 || H.isSupertypeOfNullRecursive(t);
      if (t == null || t === -1 || t.name === "Object" || t === -2)
        return true;
      if (typeof t == "object") {
        if ('futureOr' in t)
          if (H.checkSubtypeOfRuntimeType(o, "type" in t ? t.type : null))
            return true;
        if ('func' in t)
          return H.functionTypeTest(o, t);
      }
      type = J.getInterceptor$(o).constructor;
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      return H._isSubtype(type, null, t, null);
    },
    assertSubtypeOfRuntimeType: function(object, type) {
      if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
        throw H.wrapException(H.TypeErrorImplementation$(object, H.runtimeTypeToString(type)));
      return object;
    },
    _isSubtype: function(s, sEnv, t, tEnv) {
      var t1, typeOfS, tTypeArgument, futureSubstitution, futureArguments, t2, typeOfT, typeOfTString, substitution, _null = null;
      if (s === t)
        return true;
      if (t == null || t === -1 || t.name === "Object" || t === -2)
        return true;
      if (s === -2)
        return true;
      if (s == null || s === -1 || s.name === "Object" || s === -2) {
        if (typeof t === "number")
          return false;
        if ('futureOr' in t)
          return H._isSubtype(s, sEnv, "type" in t ? t.type : _null, tEnv);
        return false;
      }
      if (typeof s === "number")
        return false;
      if (typeof t === "number")
        return false;
      if (s.name === "Null")
        return true;
      if ('func' in t)
        return H._isFunctionSubtype(s, sEnv, t, tEnv);
      if ('func' in s)
        return t.name === "Function";
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      typeOfS = t1 ? s[0] : s;
      if ('futureOr' in t) {
        tTypeArgument = "type" in t ? t.type : _null;
        if ('futureOr' in s)
          return H._isSubtype("type" in s ? s.type : _null, sEnv, tTypeArgument, tEnv);
        else if (H._isSubtype(s, sEnv, tTypeArgument, tEnv))
          return true;
        else {
          if (!('$is' + "Future" in typeOfS.prototype))
            return false;
          futureSubstitution = typeOfS.prototype["$as" + "Future"];
          futureArguments = H.substitute(futureSubstitution, t1 ? s.slice(1) : _null);
          return H._isSubtype(typeof futureArguments === "object" && futureArguments !== null && futureArguments.constructor === Array ? futureArguments[0] : _null, sEnv, tTypeArgument, tEnv);
        }
      }
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      typeOfT = t2 ? t[0] : t;
      if (typeOfT !== typeOfS) {
        typeOfTString = typeOfT.name;
        if (!('$is' + typeOfTString in typeOfS.prototype))
          return false;
        substitution = typeOfS.prototype["$as" + typeOfTString];
      } else
        substitution = _null;
      if (!t2)
        return true;
      t1 = t1 ? s.slice(1) : _null;
      t2 = t.slice(1);
      return H.areSubtypes(H.substitute(substitution, t1), sEnv, t2, tEnv);
    },
    _isFunctionSubtype: function(s, sEnv, t, tEnv) {
      var sBounds, tBounds, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, tPos, sPos, sNamedParameters, tNamedParameters;
      if (!('func' in s))
        return false;
      if ("bounds" in s) {
        if (!("bounds" in t))
          return false;
        sBounds = s.bounds;
        tBounds = t.bounds;
        if (sBounds.length !== tBounds.length)
          return false;
      } else if ("bounds" in t)
        return false;
      if (!H._isSubtype(s.ret, sEnv, t.ret, tEnv))
        return false;
      sParameterTypes = s.args;
      tParameterTypes = t.args;
      sOptionalParameterTypes = s.opt;
      tOptionalParameterTypes = t.opt;
      sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
      tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
      sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
      tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
      if (sParametersLen > tParametersLen)
        return false;
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      for (pos = 0; pos < sParametersLen; ++pos)
        if (!H._isSubtype(tParameterTypes[pos], tEnv, sParameterTypes[pos], sEnv))
          return false;
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(tParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
          return false;
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(tOptionalParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
          return false;
      sNamedParameters = s.named;
      tNamedParameters = t.named;
      if (tNamedParameters == null)
        return true;
      if (sNamedParameters == null)
        return false;
      return H.namedParametersSubtypeCheck(sNamedParameters, sEnv, tNamedParameters, tEnv);
    },
    namedParametersSubtypeCheck: function(s, sEnv, t, tEnv) {
      var t1, i, $name,
        names = Object.getOwnPropertyNames(t);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        if (!H._isSubtype(t[$name], tEnv, s[$name], sEnv))
          return false;
      }
      return true;
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, H.stringTypeCheck(property), {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var interceptor, interceptorClass, mark, t1,
        tag = H.stringTypeCheck($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        tag = H.stringTypeCheck($.alternateTagFunction.call$2(obj, tag));
        if (tag != null) {
          record = $.dispatchRecordsForInstanceTags[tag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[tag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[tag];
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = C.C_JS_CONST0();
      hooks = H.applyHooksTransformer(C.C_JS_CONST1, H.applyHooksTransformer(C.C_JS_CONST2, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST4, H.applyHooksTransformer(C.C_JS_CONST5, H.applyHooksTransformer(C.C_JS_CONST6(C.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, unicode, dotAll, global) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        u = unicode ? "u" : "",
        s = dotAll ? "s" : "",
        g = global ? "g" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + u + s + g);
      if (regexp instanceof RegExp)
        return regexp;
      throw H.wrapException(P.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source));
    },
    escapeReplacement: function(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    quoteStringForRegExp: function(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked: function(receiver, pattern, replacement) {
      var t1 = H.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      return t1;
    },
    stringReplaceAllUncheckedString: function(receiver, pattern, replacement) {
      var $length, t1, i, index;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        $length = receiver.length;
        for (t1 = replacement, i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      index = receiver.indexOf(pattern, 0);
      if (index < 0)
        return receiver;
      if (receiver.length < 500 || replacement.indexOf("$", 0) >= 0)
        return receiver.split(pattern).join(replacement);
      return receiver.replace(new RegExp(H.quoteStringForRegExp(pattern), 'g'), H.escapeReplacement(replacement));
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantMap_map_closure: function ConstantMap_map_closure(t0, t1, t2) {
      this.$this = t0;
      this.transform = t1;
      this.result = t2;
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2, t3) {
      var _ = this;
      _._length = t0;
      _.__js_helper$_jsObject = t1;
      _._keys = t2;
      _.$ti = t3;
    },
    _ConstantMapKeyIterable: function _ConstantMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    JSInvocationMirror: function JSInvocationMirror(t0, t1, t2, t3, t4) {
      var _ = this;
      _._memberName = t0;
      _._kind = t1;
      _._arguments = t2;
      _._namedArgumentNames = t3;
      _._typeArgumentCount = t4;
    },
    Primitives_functionNoSuchMethod_closure: function Primitives_functionNoSuchMethod_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.namedArgumentList = t1;
      this.$arguments = t2;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this._message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this._message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this._message = t0;
    },
    unwrapException_saveStackTrace: function unwrapException_saveStackTrace(t0) {
      this.ex = t0;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1, t2, t3) {
      var _ = this;
      _._self = t0;
      _.__js_helper$_target = t1;
      _._receiver = t2;
      _._name = t3;
    },
    TypeErrorImplementation: function TypeErrorImplementation(t0) {
      this.message = t0;
    },
    CastErrorImplementation: function CastErrorImplementation(t0) {
      this.message = t0;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _._length = 0;
      _._last = _._first = _._rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _._previous = _._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _._current = _._cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _checkValidIndex: function(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw H.wrapException(H.diagnoseIndexError(list, index));
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    isBrowserObject: function(o) {
      var t1 = J.getInterceptor$(o);
      return !!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isWindow || !!t1.$isWorkerGlobalScope;
    },
    extractKeys: function(victim) {
      return J.JSArray_JSArray$markFixed(victim ? Object.keys(victim) : [], null);
    },
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  },
  J = {
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var proto, objectProto, $constructor, interceptor,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      interceptor = $constructor == null ? null : $constructor[$.$get$JS_INTEROP_INTERCEPTOR_TAG()];
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        Object.defineProperty($constructor, $.$get$JS_INTEROP_INTERCEPTOR_TAG(), {value: C.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$markFixed: function(allocation, $E) {
      return J.JSArray_markFixedList(H.setRuntimeTypeInfo(allocation, [$E]));
    },
    JSArray_markFixedList: function(list) {
      H.listTypeCheck(list);
      list.fixed$length = Array;
      return list;
    },
    JSString__isWhitespace: function(codeUnit) {
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace: function(string, index) {
      var t1, codeUnit;
      for (t1 = string.length; index < t1;) {
        codeUnit = C.JSString_methods._codeUnitAt$1(string, index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace: function(string, index) {
      var index0, codeUnit;
      for (; index > 0; index = index0) {
        index0 = index - 1;
        codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
      }
      return index;
    },
    getInterceptor$: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSDouble.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax: function(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$n: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x: function(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    set$value$x: function(receiver, value) {
      return J.getInterceptor$x(receiver).set$value(receiver, value);
    },
    get$attributes$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$attributes(receiver);
    },
    get$children$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$children(receiver);
    },
    get$classes$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$classes(receiver);
    },
    get$hashCode$: function(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$isEmpty$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNotEmpty$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
    },
    get$iterator$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$length$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    $eq$: function(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $gt$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver > a0;
      return J.getInterceptor$n(receiver).$gt(receiver, a0);
    },
    $index$asx: function(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    $mul$ns: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver * a0;
      return J.getInterceptor$ns(receiver).$mul(receiver, a0);
    },
    _addEventListener$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver)._addEventListener$3(receiver, a0, a1, a2);
    },
    _clearChildren$0$x: function(receiver) {
      return J.getInterceptor$x(receiver)._clearChildren$0(receiver);
    },
    _removeEventListener$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver)._removeEventListener$3(receiver, a0, a1, a2);
    },
    _replaceChild$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
    },
    add$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    compareTo$1$ns: function(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    contains$1$asx: function(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    elementAt$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    map$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).map$1(receiver, a0);
    },
    map$1$1$ax: function(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    noSuchMethod$1$: function(receiver, a0) {
      return J.getInterceptor$(receiver).noSuchMethod$1(receiver, a0);
    },
    remove$0$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).remove$0(receiver);
    },
    replaceWith$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
    },
    setInnerHtml$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).setInnerHtml$1(receiver, a0);
    },
    toList$0$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).toList$0(receiver);
    },
    toLowerCase$0$s: function(receiver) {
      return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
    },
    toString$0$: function(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    toStringAsFixed$1$n: function(receiver, a0) {
      return J.getInterceptor$n(receiver).toStringAsFixed$1(receiver, a0);
    },
    trim$0$s: function(receiver) {
      return J.getInterceptor$s(receiver).trim$0(receiver);
    },
    where$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).where$1(receiver, a0);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _.__interceptors$_length = t1;
      _._index = 0;
      _.__interceptors$_current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSDouble: function JSDouble() {
    },
    JSString: function JSString() {
    }
  },
  P = {
    _AsyncRun__initializeScheduleImmediate: function() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: function(callback) {
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate: function(callback) {
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer: function(callback) {
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      P._TimerImpl$(0, callback);
    },
    _TimerImpl$: function(milliseconds, callback) {
      var t1 = new P._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _Future__chainForeignFuture: function(source, target) {
      var e, s, exception;
      target._state = 1;
      try {
        source.then$1$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target), null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
      }
    },
    _Future__chainCoreFuture: function(source, target) {
      var t1, listeners;
      for (; t1 = source._state, t1 === 2;)
        source = H.interceptedTypeCheck(source._resultOrListeners, "$is_Future");
      if (t1 >= 4) {
        listeners = target._removeListeners$0();
        target._state = source._state;
        target._resultOrListeners = source._resultOrListeners;
        P._Future__propagateToListeners(target, listeners);
      } else {
        listeners = H.interceptedTypeCheck(target._resultOrListeners, "$is_FutureListener");
        target._state = 2;
        target._resultOrListeners = source;
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners: function(source, listeners) {
      var _box_0, hasError, asyncError, t2, t3, listeners0, sourceResult, zone, t4, oldZone, current, result, _null = null, _box_1 = {},
        t1 = _box_1.source = source;
      for (; true;) {
        _box_0 = {};
        hasError = t1._state === 8;
        if (listeners == null) {
          if (hasError) {
            asyncError = H.interceptedTypeCheck(t1._resultOrListeners, "$isAsyncError");
            t1 = t1._zone;
            t2 = asyncError.error;
            t3 = asyncError.stackTrace;
            t1.toString;
            P._rootHandleUncaughtError(_null, _null, t1, t2, t3);
          }
          return;
        }
        for (; listeners0 = listeners._nextListener, listeners0 != null; listeners = listeners0) {
          listeners._nextListener = null;
          P._Future__propagateToListeners(_box_1.source, listeners);
        }
        t1 = _box_1.source;
        sourceResult = t1._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        t2 = !hasError;
        if (t2) {
          t3 = listeners.state;
          t3 = (t3 & 1) !== 0 || t3 === 8;
        } else
          t3 = true;
        if (t3) {
          t3 = listeners.result;
          zone = t3._zone;
          if (hasError) {
            t4 = t1._zone;
            t4.toString;
            t4 = t4 == zone;
            if (!t4)
              zone.toString;
            else
              t4 = true;
            t4 = !t4;
          } else
            t4 = false;
          if (t4) {
            H.interceptedTypeCheck(sourceResult, "$isAsyncError");
            t1 = t1._zone;
            t2 = sourceResult.error;
            t3 = sourceResult.stackTrace;
            t1.toString;
            P._rootHandleUncaughtError(_null, _null, t1, t2, t3);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone != zone)
            $.Zone__current = zone;
          else
            oldZone = _null;
          t1 = listeners.state;
          if (t1 === 8)
            new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_1, _box_0, listeners, hasError).call$0();
          else if (t2) {
            if ((t1 & 1) !== 0)
              new P._Future__propagateToListeners_handleValueCallback(_box_0, listeners, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new P._Future__propagateToListeners_handleError(_box_1, _box_0, listeners).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (!!J.getInterceptor$(t1).$isFuture) {
            if (t1._state >= 4) {
              current = H.interceptedTypeCheck(t3._resultOrListeners, "$is_FutureListener");
              t3._resultOrListeners = null;
              listeners = t3._reverseListeners$1(current);
              t3._state = t1._state;
              t3._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              P._Future__chainCoreFuture(t1, t3);
            return;
          }
        }
        result = listeners.result;
        current = H.interceptedTypeCheck(result._resultOrListeners, "$is_FutureListener");
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t2 = _box_0.listenerValueOrError;
        if (!t1) {
          H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(result, 0));
          result._state = 4;
          result._resultOrListeners = t2;
        } else {
          H.interceptedTypeCheck(t2, "$isAsyncError");
          result._state = 8;
          result._resultOrListeners = t2;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler: function(errorHandler, zone) {
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object, P.StackTrace]}))
        return zone.registerBinaryCallback$3$1(errorHandler, null, P.Object, P.StackTrace);
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object]}))
        return H.functionTypeCheck(errorHandler, {func: 1, ret: null, args: [P.Object]});
      throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a a valid result"));
    },
    _microtaskLoop: function() {
      var t1, t2;
      for (; t1 = $._nextCallback, t1 != null;) {
        $._lastPriorityCallback = null;
        t2 = t1.next;
        $._nextCallback = t2;
        if (t2 == null)
          $._lastCallback = null;
        t1.callback.call$0();
      }
    },
    _startMicrotaskLoop: function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback: function(callback) {
      var newEntry = new P._AsyncCallbackEntry(H.functionTypeCheck(callback, {func: 1, ret: -1}));
      if ($._nextCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = $._lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var t1, entry, t2;
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new P._AsyncCallbackEntry(callback);
      t2 = $._lastPriorityCallback;
      if (t2 == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        entry.next = t2.next;
        $._lastPriorityCallback = t2.next = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var currentZone, _null = null,
        t1 = {func: 1, ret: -1};
      H.functionTypeCheck(callback, t1);
      currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(_null, _null, C.C__RootZone, callback);
        return;
      }
      currentZone.toString;
      P._rootScheduleMicrotask(_null, _null, currentZone, H.functionTypeCheck(currentZone.bindCallbackGuarded$1(callback), t1));
    },
    _runGuarded: function(notificationHandler) {
      var e, s, exception, t1;
      H.functionTypeCheck(notificationHandler, {func: 1});
      if (notificationHandler == null)
        return;
      try {
        notificationHandler.call$0();
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = $.Zone__current;
        t1.toString;
        P._rootHandleUncaughtError(null, null, t1, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    _nullErrorHandler: function(error, stackTrace) {
      var t1 = $.Zone__current;
      t1.toString;
      P._rootHandleUncaughtError(null, null, t1, error, stackTrace);
    },
    _nullDoneHandler: function() {
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      var t1 = {};
      t1.error = error;
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(t1, stackTrace));
    },
    _rootRun: function($self, $parent, zone, f, $R) {
      var old, t1;
      H.functionTypeCheck(f, {func: 1, ret: $R});
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg, $R, $T) {
      var old, t1;
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old, t1;
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      var t1;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      t1 = C.C__RootZone !== zone;
      if (t1)
        f = !(!t1 || false) ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, -1);
      P._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _BroadcastStream: function _BroadcastStream(t0, t1) {
      this._async$_controller = t0;
      this.$ti = t1;
    },
    _BroadcastSubscription: function _BroadcastSubscription(t0, t1, t2, t3) {
      var _ = this;
      _._eventState = 0;
      _._async$_previous = _._async$_next = null;
      _._async$_controller = t0;
      _._onDone = _._onError = _._async$_onData = null;
      _._zone = t1;
      _._state = t2;
      _._pending = _._cancelFuture = null;
      _.$ti = t3;
    },
    _BroadcastStreamController: function _BroadcastStreamController() {
    },
    _SyncBroadcastStreamController: function _SyncBroadcastStreamController(t0, t1, t2) {
      var _ = this;
      _.onListen = t0;
      _.onCancel = t1;
      _._state = 0;
      _._doneFuture = _._addStreamState = _._lastSubscription = _._firstSubscription = null;
      _.$ti = t2;
    },
    _SyncBroadcastStreamController__sendData_closure: function _SyncBroadcastStreamController__sendData_closure(t0, t1) {
      this.$this = t0;
      this.data = t1;
    },
    _SyncBroadcastStreamController__sendDone_closure: function _SyncBroadcastStreamController__sendDone_closure(t0) {
      this.$this = t0;
    },
    _Completer: function _Completer() {
    },
    _SyncCompleter: function _SyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.target = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__asyncComplete_closure: function _Future__asyncComplete_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__chainFuture_closure: function _Future__chainFuture_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2, t3) {
      var _ = this;
      _._box_1 = t0;
      _._box_0 = t1;
      _.listener = t2;
      _.hasError = t3;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1, t2) {
      this._box_0 = t0;
      this.listener = t1;
      this.sourceResult = t2;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1, t2) {
      this._box_1 = t0;
      this._box_0 = t1;
      this.listener = t2;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    Stream_toList_closure: function Stream_toList_closure(t0, t1) {
      this.$this = t0;
      this.result = t1;
    },
    Stream_toList_closure0: function Stream_toList_closure0(t0, t1) {
      this.future = t0;
      this.result = t1;
    },
    StreamSubscription: function StreamSubscription() {
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    _ControllerStream: function _ControllerStream() {
    },
    _ControllerSubscription: function _ControllerSubscription() {
    },
    _BufferingStreamSubscription: function _BufferingStreamSubscription() {
    },
    _BufferingStreamSubscription__sendError_sendError: function _BufferingStreamSubscription__sendError_sendError(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _BufferingStreamSubscription__sendDone_sendDone: function _BufferingStreamSubscription__sendDone_sendDone(t0) {
      this.$this = t0;
    },
    _StreamImpl: function _StreamImpl() {
    },
    _DelayedEvent: function _DelayedEvent() {
    },
    _DelayedData: function _DelayedData(t0, t1) {
      this.value = t0;
      this.next = null;
      this.$ti = t1;
    },
    _DelayedError: function _DelayedError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
      this.next = null;
    },
    _DelayedDone: function _DelayedDone() {
    },
    _PendingEvents: function _PendingEvents() {
    },
    _PendingEvents_schedule_closure: function _PendingEvents_schedule_closure(t0, t1) {
      this.$this = t0;
      this.dispatch = t1;
    },
    _StreamImplEvents: function _StreamImplEvents(t0) {
      var _ = this;
      _.lastPendingEvent = _.firstPendingEvent = null;
      _._state = 0;
      _.$ti = t0;
    },
    _DoneStreamSubscription: function _DoneStreamSubscription(t0, t1, t2) {
      var _ = this;
      _._zone = t0;
      _._state = 0;
      _._onDone = t1;
      _.$ti = t2;
    },
    _ForwardingStream: function _ForwardingStream() {
    },
    _ForwardingStreamSubscription: function _ForwardingStreamSubscription(t0, t1, t2, t3) {
      var _ = this;
      _._stream = t0;
      _._onDone = _._onError = _._async$_onData = _._subscription = null;
      _._zone = t1;
      _._state = t2;
      _._pending = _._cancelFuture = null;
      _.$ti = t3;
    },
    _MapStream: function _MapStream(t0, t1, t2) {
      this._transform = t0;
      this._async$_source = t1;
      this.$ti = t2;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _Zone: function _Zone() {
    },
    _rootHandleUncaughtError_closure: function _rootHandleUncaughtError_closure(t0, t1) {
      this._box_0 = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.R = t2;
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
      H.listTypeCheck(keyValuePairs);
      return H.assertSubtype(H.fillLiteralMap(keyValuePairs, new H.JsLinkedHashMap([$K, $V])), "$isLinkedHashMap", [$K, $V], "$asLinkedHashMap");
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return new H.JsLinkedHashMap([$K, $V]);
    },
    LinkedHashMap__makeEmpty: function() {
      return new H.JsLinkedHashMap([null, null]);
    },
    LinkedHashMap__makeLiteral: function(keyValuePairs) {
      return H.fillLiteralMap(keyValuePairs, new H.JsLinkedHashMap([null, null]));
    },
    LinkedHashSet_LinkedHashSet: function($E) {
      return new P._LinkedHashSet([$E]);
    },
    _LinkedHashSet__newHashTable: function() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$: function(_set, _modifications, $E) {
      var t1 = new P._LinkedHashSetIterator(_set, _modifications, [$E]);
      t1._collection$_cell = _set._collection$_first;
      return t1;
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = H.setRuntimeTypeInfo([], [P.String]);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, H.listSuperNativeTypeCheck(parts, "$isIterable"), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = P.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var t1, i;
      for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
          return true;
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
      H.assertSubtype(parts, "$isList", [P.String], "$asList");
      it = iterable.get$iterator(iterable);
      $length = 0;
      count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current());
        C.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            C.JSArray_methods.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return H.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              C.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        C.JSArray_methods.add$1(parts, elision);
      C.JSArray_methods.add$1(parts, penultimateString);
      C.JSArray_methods.add$1(parts, ultimateString);
    },
    LinkedHashSet_LinkedHashSet$from: function(elements, $E) {
      var t1, _i,
        result = P.LinkedHashSet_LinkedHashSet($E);
      for (t1 = elements.length, _i = 0; _i < elements.length; elements.length === t1 || (0, H.throwConcurrentModificationError)(elements), ++_i)
        result.add$1(0, H.assertSubtypeOfRuntimeType(elements[_i], $E));
      return result;
    },
    MapBase_mapToString: function(m) {
      var result, t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        C.JSArray_methods.add$1($._toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new P.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._collection$_previous = this._collection$_next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._collection$_modifications = t1;
      _._collection$_current = _._collection$_cell = null;
      _.$ti = t2;
    },
    ListBase: function ListBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView() {
    },
    SetMixin: function SetMixin() {
    },
    SetBase: function SetBase() {
    },
    _SetBase: function _SetBase() {
    },
    _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
    },
    _SetBase_Object_SetMixin: function _SetBase_Object_SetMixin() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    _parseJson: function(source, reviver) {
      var parsed, e, exception, t1;
      if (typeof source !== "string")
        throw H.wrapException(H.argumentErrorValue(source));
      parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.FormatException$(String(e), null);
        throw H.wrapException(t1);
      }
      t1 = P._convertJsonToDartLazy(parsed);
      return t1;
    },
    _convertJsonToDartLazy: function(object) {
      var i;
      if (object == null)
        return;
      if (typeof object != "object")
        return object;
      if (Object.getPrototypeOf(object) !== Array.prototype)
        return new P._JsonMap(object, Object.create(null));
      for (i = 0; i < object.length; ++i)
        object[i] = P._convertJsonToDartLazy(object[i]);
      return object;
    },
    JsonUnsupportedObjectError$: function(unsupportedObject, cause, partialResult) {
      return new P.JsonUnsupportedObjectError(unsupportedObject, cause);
    },
    _defaultToEncodable: function(object) {
      return object.toJson$0();
    },
    _JsonStringStringifier_stringify: function(object, toEncodable, indent) {
      var t1,
        output = new P.StringBuffer(""),
        stringifier = new P._JsonStringStringifier(output, [], P.convert___defaultToEncodable$closure());
      stringifier.writeObject$1(object);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _JsonMap: function _JsonMap(t0, t1) {
      this._original = t0;
      this._processed = t1;
      this._data = null;
    },
    _JsonMapKeyIterable: function _JsonMapKeyIterable(t0) {
      this._parent = t0;
    },
    Codec: function Codec() {
    },
    Converter: function Converter() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCodec: function JsonCodec() {
    },
    JsonEncoder: function JsonEncoder(t0) {
      this._toEncodable = t0;
    },
    JsonDecoder: function JsonDecoder(t0) {
      this._reviver = t0;
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2) {
      this._sink = t0;
      this._seen = t1;
      this._toEncodable = t2;
    },
    int_parse: function(source) {
      var value = H.Primitives_parseInt(source, null);
      if (value != null)
        return value;
      throw H.wrapException(P.FormatException$(source, null));
    },
    Error__objectToString: function(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
    },
    List_List$from: function(elements, growable, $E) {
      var t2,
        t1 = [$E],
        list = H.setRuntimeTypeInfo([], t1);
      for (t2 = J.get$iterator$ax(elements); t2.moveNext$0();)
        C.JSArray_methods.add$1(list, H.assertSubtypeOfRuntimeType(t2.get$current(), $E));
      if (growable)
        return list;
      return H.assertSubtype(J.JSArray_markFixedList(list), "$isList", t1, "$asList");
    },
    RegExp_RegExp: function(source) {
      return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, false, true, false, false, false));
    },
    StringBuffer__writeAll: function(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += H.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string += H.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          string = string + separator + H.S(iterator.get$current());
      }
      return string;
    },
    NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments) {
      return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments);
    },
    DateTime$_withValue: function(_value, isUtc) {
      var t1;
      if (Math.abs(_value) <= 864e13)
        t1 = false;
      else
        t1 = true;
      if (t1)
        H.throwExpression(P.ArgumentError$("DateTime is outside valid range: " + _value));
      return new P.DateTime(_value, false);
    },
    DateTime__fourDigits: function(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__threeDigits: function(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0$(object);
      if (typeof object === "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    ArgumentError$: function(message) {
      return new P.ArgumentError(false, null, null, message);
    },
    ArgumentError$value: function(value, $name, message) {
      return new P.ArgumentError(true, value, $name, message);
    },
    RangeError$value: function(value, $name) {
      return new P.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
      return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkNotNegative: function(value, $name) {
      if (typeof value !== "number")
        return value.$lt();
      if (value < 0)
        throw H.wrapException(P.RangeError$range(value, 0, null, $name, null));
    },
    IndexError$: function(invalidValue, indexable, $name, message, $length) {
      var t1 = H.intTypeCheck($length == null ? J.get$length$asx(indexable) : $length);
      return new P.IndexError(t1, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$: function(message) {
      return new P.UnsupportedError(message);
    },
    UnimplementedError$: function(message) {
      return new P.UnimplementedError(message);
    },
    StateError$: function(message) {
      return new P.StateError(message);
    },
    ConcurrentModificationError$: function(modifiedObject) {
      return new P.ConcurrentModificationError(modifiedObject);
    },
    FormatException$: function(message, source) {
      return new P.FormatException(message, source);
    },
    num_parse: function(input, onError) {
      var source, result;
      H.functionTypeCheck(onError, {func: 1, ret: P.num, args: [P.String]});
      source = J.trim$0$s(input);
      result = H.Primitives_parseInt(source, null);
      if (result == null)
        result = H.Primitives_parseDouble(source);
      if (result != null)
        return result;
      if (onError == null)
        throw H.wrapException(P.FormatException$(input, null));
      return onError.call$1(input);
    },
    print: function(object) {
      H.printString(H.S(object));
    },
    NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(t0, t1) {
      this._box_0 = t0;
      this.sb = t1;
    },
    bool: function bool() {
    },
    DateTime: function DateTime(t0, t1) {
      this._value = t0;
      this.isUtc = t1;
    },
    double: function double() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError() {
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3) {
      var _ = this;
      _._core$_receiver = t0;
      _._core$_memberName = t1;
      _._core$_arguments = t2;
      _._namedArguments = t3;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1) {
      this.message = t0;
      this.source = t1;
    },
    Function: function Function() {
    },
    int: function int() {
    },
    Iterable: function Iterable() {
    },
    Iterator: function Iterator() {
    },
    List: function List() {
    },
    Map: function Map() {
    },
    MapEntry: function MapEntry() {
    },
    Null: function Null() {
    },
    num: function num() {
    },
    Object: function Object() {
    },
    Set: function Set() {
    },
    StackTrace: function StackTrace() {
    },
    String: function String() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    Symbol0: function Symbol0() {
    },
    CssClassSetImpl: function CssClassSetImpl() {
    },
    CssClassSetImpl_add_closure: function CssClassSetImpl_add_closure(t0) {
      this.value = t0;
    },
    FilteredElementList: function FilteredElementList(t0, t1) {
      this._node = t0;
      this._childNodes = t1;
    },
    FilteredElementList__iterable_closure: function FilteredElementList__iterable_closure() {
    },
    FilteredElementList__iterable_closure0: function FilteredElementList__iterable_closure0() {
    },
    FilteredElementList_removeRange_closure: function FilteredElementList_removeRange_closure() {
    },
    KeyRange: function KeyRange() {
    },
    _callDartFunction: function(callback, captureThis, $self, $arguments) {
      var arguments0, dartArgs;
      H.boolTypeCheck(captureThis);
      H.listTypeCheck($arguments);
      if (H.boolConversionCheck(captureThis)) {
        arguments0 = [$self];
        C.JSArray_methods.addAll$1(arguments0, $arguments);
        $arguments = arguments0;
      }
      dartArgs = P.List_List$from(J.map$1$1$ax($arguments, P.js___convertToDart$closure(), null), true, null);
      H.interceptedTypeCheck(callback, "$isFunction");
      return P._convertToJS(H.Primitives_applyFunction(callback, dartArgs, null));
    },
    _defineProperty: function(o, $name, value) {
      var exception;
      try {
        if (Object.isExtensible(o) && !Object.prototype.hasOwnProperty.call(o, $name)) {
          Object.defineProperty(o, $name, {value: value});
          return true;
        }
      } catch (exception) {
        H.unwrapException(exception);
      }
      return false;
    },
    _getOwnProperty: function(o, $name) {
      if (Object.prototype.hasOwnProperty.call(o, $name))
        return o[$name];
      return;
    },
    _convertToJS: function(o) {
      var t1;
      if (o == null || typeof o === "string" || typeof o === "number" || typeof o === "boolean")
        return o;
      t1 = J.getInterceptor$(o);
      if (!!t1.$isJsObject)
        return o._jsObject;
      if (H.isBrowserObject(o))
        return o;
      if (!!t1.$isTypedData)
        return o;
      if (!!t1.$isDateTime)
        return H.Primitives_lazyAsJsDate(o);
      if (!!t1.$isFunction)
        return P._getJsProxy(o, "$dart_jsFunction", new P._convertToJS_closure());
      return P._getJsProxy(o, "_$dart_jsObject", new P._convertToJS_closure0($.$get$_dartProxyCtor()));
    },
    _getJsProxy: function(o, propertyName, createProxy) {
      var jsProxy;
      H.functionTypeCheck(createProxy, {func: 1, args: [,]});
      jsProxy = P._getOwnProperty(o, propertyName);
      if (jsProxy == null) {
        jsProxy = createProxy.call$1(o);
        P._defineProperty(o, propertyName, jsProxy);
      }
      return jsProxy;
    },
    _convertToDart: function(o) {
      var ms, t1;
      if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
        return o;
      else if (o instanceof Object && H.isBrowserObject(o))
        return o;
      else if (o instanceof Object && !!J.getInterceptor$(o).$isTypedData)
        return o;
      else if (o instanceof Date) {
        ms = H.intTypeCheck(o.getTime());
        if (Math.abs(ms) <= 864e13)
          t1 = false;
        else
          t1 = true;
        if (t1)
          H.throwExpression(P.ArgumentError$("DateTime is outside valid range: " + ms));
        return new P.DateTime(ms, false);
      } else if (o.constructor === $.$get$_dartProxyCtor())
        return o.o;
      else
        return P._wrapToDart(o);
    },
    _wrapToDart: function(o) {
      if (typeof o == "function")
        return P._getDartProxy(o, $.$get$DART_CLOSURE_PROPERTY_NAME(), new P._wrapToDart_closure());
      if (o instanceof Array)
        return P._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure0());
      return P._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure1());
    },
    _getDartProxy: function(o, propertyName, createProxy) {
      var dartProxy;
      H.functionTypeCheck(createProxy, {func: 1, args: [,]});
      dartProxy = P._getOwnProperty(o, propertyName);
      if (dartProxy == null || !(o instanceof Object)) {
        dartProxy = createProxy.call$1(o);
        P._defineProperty(o, propertyName, dartProxy);
      }
      return dartProxy;
    },
    JsObject: function JsObject(t0) {
      this._jsObject = t0;
    },
    JsFunction: function JsFunction(t0) {
      this._jsObject = t0;
    },
    JsArray: function JsArray(t0, t1) {
      this._jsObject = t0;
      this.$ti = t1;
    },
    _convertToJS_closure: function _convertToJS_closure() {
    },
    _convertToJS_closure0: function _convertToJS_closure0(t0) {
      this.ctor = t0;
    },
    _wrapToDart_closure: function _wrapToDart_closure() {
    },
    _wrapToDart_closure0: function _wrapToDart_closure0() {
    },
    _wrapToDart_closure1: function _wrapToDart_closure1() {
    },
    _JsArray_JsObject_ListMixin: function _JsArray_JsObject_ListMixin() {
    },
    _JenkinsSmiHash_combine0: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    Point: function Point(t0, t1, t2) {
      this.x = t0;
      this.y = t1;
      this.$ti = t2;
    },
    ScriptElement: function ScriptElement() {
    },
    AttributeClassSet: function AttributeClassSet(t0) {
      this._svg$_element = t0;
    },
    SvgElement: function SvgElement() {
    }
  },
  W = {
    window: function() {
      return window;
    },
    AnchorElement_AnchorElement: function(href) {
      var e = document.createElement("a");
      if (href != null)
        e.href = href;
      return e;
    },
    Element_Element$html: function(html, treeSanitizer, validator) {
      var t1 = document.body,
        fragment = (t1 && C.BodyElement_methods).createFragment$3$treeSanitizer$validator(t1, html, treeSanitizer, validator);
      fragment.toString;
      t1 = W.Node;
      t1 = new H.WhereIterable(new W._ChildNodeListLazy(fragment), H.functionTypeCheck(new W.Element_Element$html_closure(), {func: 1, ret: P.bool, args: [t1]}), [t1]);
      return H.interceptedTypeCheck(t1.get$single(t1), "$isElement");
    },
    Element__safeTagName: function(element) {
      var t1, t2, exception,
        result = "element tag unavailable";
      try {
        t1 = J.getInterceptor$x(element);
        t2 = t1.get$tagName(element);
        if (typeof t2 === "string")
          result = t1.get$tagName(element);
      } catch (exception) {
        H.unwrapException(exception);
      }
      return result;
    },
    InputElement_InputElement: function(type) {
      var exception,
        t1 = document.createElement("input"),
        e = H.interceptedTypeCheck(t1, "$isInputElement");
      try {
        e.type = type;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return e;
    },
    _JenkinsSmiHash_combine: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_hash4: function(a, b, c, d) {
      var t1 = W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, a), b), c), d),
        hash = 536870911 & t1 + ((67108863 & t1) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    _EventStreamSubscription$: function(_target, _eventType, onData, _useCapture, $T) {
      var t1 = W._wrapZone(new W._EventStreamSubscription_closure(onData), W.Event);
      t1 = new W._EventStreamSubscription(_target, _eventType, t1, false, [$T]);
      t1._tryResume$0();
      return t1;
    },
    _Html5NodeValidator$: function(uriPolicy) {
      var t1 = W.AnchorElement_AnchorElement(null),
        t2 = window.location;
      t1 = new W._Html5NodeValidator(new W._SameOriginUriPolicy(t1, t2));
      t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
      return t1;
    },
    _Html5NodeValidator__standardAttributeValidator: function(element, attributeName, value, context) {
      H.interceptedTypeCheck(element, "$isElement");
      H.stringTypeCheck(attributeName);
      H.stringTypeCheck(value);
      H.interceptedTypeCheck(context, "$is_Html5NodeValidator");
      return true;
    },
    _Html5NodeValidator__uriAttributeValidator: function(element, attributeName, value, context) {
      var t1, t2, t3;
      H.interceptedTypeCheck(element, "$isElement");
      H.stringTypeCheck(attributeName);
      H.stringTypeCheck(value);
      t1 = H.interceptedTypeCheck(context, "$is_Html5NodeValidator").uriPolicy;
      t2 = t1._hiddenAnchor;
      t2.href = value;
      t3 = t2.hostname;
      t1 = t1._loc;
      if (!(t3 == t1.hostname && t2.port == t1.port && t2.protocol == t1.protocol))
        if (t3 === "")
          if (t2.port === "") {
            t1 = t2.protocol;
            t1 = t1 === ":" || t1 === "";
          } else
            t1 = false;
        else
          t1 = false;
      else
        t1 = true;
      return t1;
    },
    _TemplatingNodeValidator$: function() {
      var t1 = P.String,
        t2 = P.LinkedHashSet_LinkedHashSet$from(C.List_wSV, t1),
        t3 = H.getTypeArgumentByIndex(C.List_wSV, 0),
        t4 = H.functionTypeCheck(new W._TemplatingNodeValidator_closure(), {func: 1, ret: t1, args: [t3]}),
        t5 = H.setRuntimeTypeInfo(["TEMPLATE"], [t1]);
      t2 = new W._TemplatingNodeValidator(t2, P.LinkedHashSet_LinkedHashSet(t1), P.LinkedHashSet_LinkedHashSet(t1), P.LinkedHashSet_LinkedHashSet(t1), null);
      t2._SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes(null, new H.MappedListIterable(C.List_wSV, t4, [t3, t1]), t5, null);
      return t2;
    },
    _convertNativeToDart_EventTarget: function(e) {
      var $window;
      if ("postMessage" in e) {
        $window = W._DOMWindowCrossFrame__createSafe(e);
        return $window;
      } else
        return H.interceptedTypeCheck(e, "$isEventTarget");
    },
    _DOMWindowCrossFrame__createSafe: function(w) {
      if (w === window)
        return H.interceptedTypeCheck(w, "$isWindowBase");
      else
        return new W._DOMWindowCrossFrame();
    },
    _wrapZone: function(callback, $T) {
      var t1;
      H.functionTypeCheck(callback, {func: 1, ret: -1, args: [$T]});
      t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    HtmlElement: function HtmlElement() {
    },
    AnchorElement: function AnchorElement() {
    },
    AreaElement: function AreaElement() {
    },
    BaseElement: function BaseElement() {
    },
    Blob: function Blob() {
    },
    BodyElement: function BodyElement() {
    },
    CanvasElement: function CanvasElement() {
    },
    CanvasRenderingContext2D: function CanvasRenderingContext2D() {
    },
    CharacterData: function CharacterData() {
    },
    CssStyleDeclaration: function CssStyleDeclaration() {
    },
    CssStyleDeclarationBase: function CssStyleDeclarationBase() {
    },
    DivElement: function DivElement() {
    },
    DomException: function DomException() {
    },
    DomRectReadOnly: function DomRectReadOnly() {
    },
    DomTokenList: function DomTokenList() {
    },
    _ChildrenElementList: function _ChildrenElementList(t0, t1) {
      this._html$_element = t0;
      this._childElements = t1;
    },
    _FrozenElementList: function _FrozenElementList(t0, t1) {
      this._nodeList = t0;
      this.$ti = t1;
    },
    Element: function Element() {
    },
    Element_Element$html_closure: function Element_Element$html_closure() {
    },
    Event: function Event() {
    },
    EventTarget: function EventTarget() {
    },
    FormElement: function FormElement() {
    },
    HtmlCollection: function HtmlCollection() {
    },
    ImageData: function ImageData() {
    },
    InputElement: function InputElement() {
    },
    KeyboardEvent: function KeyboardEvent() {
    },
    Location: function Location() {
    },
    MouseEvent: function MouseEvent() {
    },
    _ChildNodeListLazy: function _ChildNodeListLazy(t0) {
      this._this = t0;
    },
    Node: function Node() {
    },
    NodeList: function NodeList() {
    },
    SelectElement: function SelectElement() {
    },
    TableElement: function TableElement() {
    },
    TableRowElement: function TableRowElement() {
    },
    TableSectionElement: function TableSectionElement() {
    },
    TemplateElement: function TemplateElement() {
    },
    TouchEvent: function TouchEvent() {
    },
    UIEvent: function UIEvent() {
    },
    Window: function Window() {
    },
    Window_animationFrame_closure: function Window_animationFrame_closure(t0) {
      this.completer = t0;
    },
    WorkerGlobalScope: function WorkerGlobalScope() {
    },
    _Attr: function _Attr() {
    },
    _DomRect: function _DomRect() {
    },
    _NamedNodeMap: function _NamedNodeMap() {
    },
    _AttributeMap: function _AttributeMap() {
    },
    _ElementAttributeMap: function _ElementAttributeMap(t0) {
      this._html$_element = t0;
    },
    _ElementCssClassSet: function _ElementCssClassSet(t0) {
      this._html$_element = t0;
    },
    _EventStream: function _EventStream(t0, t1, t2, t3) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _ElementEventStreamImpl: function _ElementEventStreamImpl(t0, t1, t2, t3) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _ElementListEventStreamImpl: function _ElementListEventStreamImpl(t0, t1, t2, t3) {
      var _ = this;
      _._targetList = t0;
      _._useCapture = t1;
      _._eventType = t2;
      _.$ti = t3;
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._pauseCount = 0;
      _._target = t0;
      _._eventType = t1;
      _._onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
      this.onData = t0;
    },
    _StreamPool: function _StreamPool(t0, t1) {
      this._controller = null;
      this._subscriptions = t0;
      this.$ti = t1;
    },
    _StreamPool_add_closure: function _StreamPool_add_closure(t0, t1) {
      this.$this = t0;
      this.stream = t1;
    },
    _Html5NodeValidator: function _Html5NodeValidator(t0) {
      this.uriPolicy = t0;
    },
    ImmutableListMixin: function ImmutableListMixin() {
    },
    NodeValidatorBuilder: function NodeValidatorBuilder(t0) {
      this._validators = t0;
    },
    NodeValidatorBuilder_allowsElement_closure: function NodeValidatorBuilder_allowsElement_closure(t0) {
      this.element = t0;
    },
    NodeValidatorBuilder_allowsAttribute_closure: function NodeValidatorBuilder_allowsAttribute_closure(t0, t1, t2) {
      this.element = t0;
      this.attributeName = t1;
      this.value = t2;
    },
    _SimpleNodeValidator: function _SimpleNodeValidator() {
    },
    _SimpleNodeValidator_closure: function _SimpleNodeValidator_closure() {
    },
    _SimpleNodeValidator_closure0: function _SimpleNodeValidator_closure0() {
    },
    _TemplatingNodeValidator: function _TemplatingNodeValidator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._templateAttrs = t0;
      _.allowedElements = t1;
      _.allowedAttributes = t2;
      _.allowedUriAttributes = t3;
      _.uriPolicy = t4;
    },
    _TemplatingNodeValidator_closure: function _TemplatingNodeValidator_closure() {
    },
    _SvgNodeValidator: function _SvgNodeValidator() {
    },
    FixedSizeListIterator: function FixedSizeListIterator(t0, t1, t2) {
      var _ = this;
      _._array = t0;
      _._html$_length = t1;
      _._position = -1;
      _._html$_current = null;
      _.$ti = t2;
    },
    _DOMWindowCrossFrame: function _DOMWindowCrossFrame() {
    },
    NodeValidator: function NodeValidator() {
    },
    _SameOriginUriPolicy: function _SameOriginUriPolicy(t0, t1) {
      this._hiddenAnchor = t0;
      this._loc = t1;
    },
    _ValidatingTreeSanitizer: function _ValidatingTreeSanitizer(t0) {
      this.validator = t0;
    },
    _ValidatingTreeSanitizer_sanitizeTree_walk: function _ValidatingTreeSanitizer_sanitizeTree_walk(t0) {
      this.$this = t0;
    },
    _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase: function _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase() {
    },
    _HtmlCollection_Interceptor_ListMixin: function _HtmlCollection_Interceptor_ListMixin() {
    },
    _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin: function _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _NodeList_Interceptor_ListMixin: function _NodeList_Interceptor_ListMixin() {
    },
    _NodeList_Interceptor_ListMixin_ImmutableListMixin: function _NodeList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __NamedNodeMap_Interceptor_ListMixin: function __NamedNodeMap_Interceptor_ListMixin() {
    },
    __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin: function __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin() {
    }
  },
  U = {
    Block$: function(workspace, id, action) {
      var t1 = P.int,
        t2 = U.Parameter,
        t3 = $.$get$SCALE();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t3 = new U.Block(id, action, new H.JsLinkedHashMap([t1, t2]), new H.JsLinkedHashMap([t1, t2]), "400 " + H.S(14 * t3) + "px 'Poppins', sans-serif", workspace);
      t3.Block$3(workspace, id, action);
      return t3;
    },
    Block_Block$fromJSON: function(workspace, json) {
      var block, t2, t3, param, prop, c,
        _s7_ = "clauses",
        _s4_ = "type",
        _s10_ = "properties",
        t1 = json.$index(0, "action"),
        action = t1 == null ? "" : J.toString$0$(t1),
        id = H.intTypeCheck(json.$index(0, "id"));
      if (!!J.getInterceptor$(json.$index(0, _s7_)).$isList)
        block = U.BeginBlock$(workspace, id, action);
      else if (J.$eq$(json.$index(0, _s4_), "clause")) {
        t1 = P.int;
        t2 = U.Parameter;
        t3 = $.$get$SCALE();
        if (typeof t3 !== "number")
          return H.iae(t3);
        block = new U.ClauseBlock(id, action, new H.JsLinkedHashMap([t1, t2]), new H.JsLinkedHashMap([t1, t2]), "400 " + H.S(14 * t3) + "px 'Poppins', sans-serif", workspace);
        block.Block$3(workspace, id, action);
        block.hasTopConnector = false;
      } else
        block = U.Block$(workspace, id, action);
      json.$indexSet(0, "id", block.id);
      t1 = json.$index(0, _s4_);
      block.type = t1 == null ? "" : J.toString$0$(t1);
      t1 = json.$index(0, "format");
      block.format = t1 == null ? null : J.toString$0$(t1);
      t1 = json.$index(0, "blockColor");
      t2 = block.blockColor;
      block.blockColor = t1 == null ? t2 : J.toString$0$(t1);
      t1 = json.$index(0, "textColor");
      t2 = block.textColor;
      block.textColor = t1 == null ? t2 : J.toString$0$(t1);
      t1 = json.$index(0, "borderColor");
      t2 = block.borderColor;
      block.borderColor = t1 == null ? t2 : J.toString$0$(t1);
      t1 = json.$index(0, "font");
      t2 = block.font;
      block.font = t1 == null ? t2 : J.toString$0$(t1);
      block.hasTopConnector = !U.toBool(json.$index(0, "start"), false);
      block.required = U.toBool(json.$index(0, "required"), block.required);
      if (!!J.getInterceptor$(json.$index(0, "params")).$isList)
        for (t1 = J.get$iterator$ax(H.listSuperNativeTypeCheck(json.$index(0, "params"), "$isIterable")), t2 = block.params; t1.moveNext$0();) {
          param = U.Parameter_Parameter$fromJSON(block, H.interceptedTypeCheck(t1.get$current(), "$isMap"));
          t2.$indexSet(0, param.id, param);
        }
      if (!!J.getInterceptor$(json.$index(0, _s10_)).$isList)
        for (t1 = J.get$iterator$ax(H.listSuperNativeTypeCheck(json.$index(0, _s10_), "$isIterable")), t2 = block.properties; t1.moveNext$0();) {
          prop = U.Parameter_Parameter$fromJSON(block, H.interceptedTypeCheck(t1.get$current(), "$isMap"));
          t2.$indexSet(0, prop.id, prop);
        }
      t1 = block.properties._length;
      t2 = $.$get$BLOCK_HEIGHT();
      if (typeof t2 !== "number")
        return H.iae(t2);
      block._height = (1 + t1) * t2;
      t1 = !!block.$isBeginBlock;
      if (t1 && !!J.getInterceptor$(json.$index(0, _s7_)).$isList)
        for (t2 = J.get$iterator$ax(H.listSuperNativeTypeCheck(json.$index(0, _s7_), "$isIterable")); t2.moveNext$0();) {
          c = t2.get$current();
          J.$indexSet$ax(c, _s4_, "clause");
          block._addClause$1(H.interceptedTypeCast(U.Block_Block$fromJSON(workspace, H.interceptedTypeCheck(c, "$isMap")), "$isClauseBlock"));
        }
      if (t1 && json.$index(0, "end") != null) {
        t1 = block.end;
        t2 = J.$index$asx(json.$index(0, "end"), "format");
        t1.format = t2 == null ? null : J.toString$0$(t2);
      }
      return block;
    },
    BeginBlock$: function(workspace, id, action) {
      var t5, t6,
        _s24_ = "px 'Poppins', sans-serif",
        t1 = H.setRuntimeTypeInfo([], [U.ClauseBlock]),
        t2 = P.int,
        t3 = U.Parameter,
        t4 = $.$get$SCALE();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = new U.BeginBlock(t1, id, action, new H.JsLinkedHashMap([t2, t3]), new H.JsLinkedHashMap([t2, t3]), "400 " + H.S(14 * t4) + _s24_, workspace);
      t5.Block$3(workspace, id, action);
      t6 = "end-" + H.S(action);
      t2 = new U.EndBlock(null, t6, new H.JsLinkedHashMap([t2, t3]), new H.JsLinkedHashMap([t2, t3]), "400 " + H.S(14 * t4) + _s24_, workspace);
      t2.Block$3(workspace, null, t6);
      t2.hasTopConnector = false;
      t6 = $.$get$BLOCK_HEIGHT();
      if (typeof t6 !== "number")
        return t6.$div();
      t2._height = t6 / 2;
      t2.format = "";
      t5.end = t2;
      t2.begin = t5;
      C.JSArray_methods.add$1(t1, t2);
      t5.nextClause = t5.end;
      return t5;
    },
    CodeFormatter_formatCode: function(language, parseTree) {
      var t1;
      if ($.CodeFormatter__formatters == null) {
        t1 = new H.JsLinkedHashMap([P.String, U.CodeFormatter]);
        $.CodeFormatter__formatters = t1;
        t1.$indexSet(0, "NetLogo", new U.NetLogoFormatter());
        $.CodeFormatter__formatters.$indexSet(0, "plain", new U.PlainFormatter());
      }
      if ($.CodeFormatter__formatters.containsKey$1(language))
        return $.CodeFormatter__formatters.$index(0, language)._format$1(parseTree);
      else
        return C.C_JsonCodec.encode$2$toEncodable(parseTree, null);
    },
    compareChainsByAction: function(a, b) {
      var t2, _s6_ = "action",
        t1 = J.getInterceptor$(a);
      if (!t1.$isList || t1.get$length(a) === 0 || J.$index$asx(t1.$index(a, 0), _s6_) == null)
        return -1;
      t2 = J.getInterceptor$(b);
      if (!t2.$isList || t2.get$length(b) === 0 || J.$index$asx(t2.$index(b, 0), _s6_) == null)
        return 1;
      return J.compareTo$1$ns(J.$index$asx(t1.$index(a, 0), _s6_), J.$index$asx(t2.$index(b, 0), _s6_));
    },
    Parameter$: function(block, data) {
      var t1 = $.$get$BLOCK_HEIGHT();
      if (typeof t1 !== "number")
        return t1.$mul();
      t1 = new U.Parameter(block, t1 * 0.6);
      t1.Parameter$2(block, data);
      return t1;
    },
    Parameter_Parameter$fromJSON: function($parent, data) {
      var t1 = data.$index(0, "type");
      switch (t1 == null ? "num" : J.toString$0$(t1)) {
        case "int":
          t1 = $.$get$BLOCK_HEIGHT();
          if (typeof t1 !== "number")
            return t1.$mul();
          t1 = new U.IntParameter($parent, t1 * 0.6);
          t1.Parameter$2($parent, data);
          t1.NumParameter$2($parent, data);
          t1.stepSize = 1;
          return t1;
        case "num":
          return U.ExpressionParameter$($parent, data);
        case "bool":
          return U.ExpressionParameter$($parent, data);
        case "range":
          t1 = $.$get$BLOCK_HEIGHT();
          if (typeof t1 !== "number")
            return t1.$mul();
          t1 = new U.RangeParameter($parent, t1 * 0.6);
          t1.Parameter$2($parent, data);
          t1.NumParameter$2($parent, data);
          t1.minValue = U.toNum(data.$index(0, "min"), t1.minValue);
          t1.maxValue = U.toNum(data.$index(0, "max"), t1.maxValue);
          return t1;
        case "select":
          return U.SelectParameter$($parent, data);
        case "text":
          return U.Parameter$($parent, data);
        default:
          return U.Parameter$($parent, data);
      }
    },
    SelectParameter$: function(block, data) {
      var t2, _s6_ = "values",
        t1 = $.$get$BLOCK_HEIGHT();
      if (typeof t1 !== "number")
        return t1.$mul();
      t1 = new U.SelectParameter([], block, t1 * 0.6);
      t1.Parameter$2(block, data);
      if (!!J.getInterceptor$(data.$index(0, _s6_)).$isList && J.$gt$n(J.get$length$asx(data.$index(0, _s6_)), 0)) {
        t2 = H.listTypeCheck(data.$index(0, _s6_));
        t1.values = t2;
        t1._display = t1._chooseDisplayValue$1(J.$index$asx(t2, 0));
        t1._ntango$_value = J.$index$asx(J.$index$asx(t1.values, 0), "actual");
      }
      return t1;
    },
    ExpressionParameter$: function(block, data) {
      var t2,
        t1 = $.$get$BLOCK_HEIGHT();
      if (typeof t1 !== "number")
        return t1.$mul();
      t1 = new U.ExpressionParameter(block, t1 * 0.6);
      t1.Parameter$2(block, data);
      t2 = new U.ExpressionBuilder(block.workspace);
      t2.root = new U.Expression(t2, H.stringTypeCheck(data.$index(0, "type")), H.setRuntimeTypeInfo([], [U.Expression]));
      t1.builder = t2;
      t2.fromJSON$1(t1._ntango$_value);
      return t1;
    },
    CodeWorkspace$: function(canvasId, definition) {
      var t1 = H.setRuntimeTypeInfo([], [U.Block]),
        t2 = H.setRuntimeTypeInfo([], [U.TouchLayer]),
        t3 = P.int,
        t4 = U.Touchable,
        t5 = H.setRuntimeTypeInfo([], [t4]),
        t6 = [P.double];
      t6 = new U.CodeWorkspace(2, canvasId, t1, definition, [], [], new U.TouchManager(t2, new H.JsLinkedHashMap([t3, U.TouchBinding])), t5, new H.JsLinkedHashMap([t3, t4]), new U.Matrix2D(H.setRuntimeTypeInfo([1, 0, 0, 0, 1, 0, 0, 0, 1], t6)), new U.Matrix2D(H.setRuntimeTypeInfo([1, 0, 0, 0, 1, 0, 0, 0, 1], t6)), new P.DateTime(Date.now(), false));
      t6.CodeWorkspace$2(canvasId, definition);
      return t6;
    },
    _init: function(canvasId, json) {
      var version,
        _s7_ = "version";
      H.assertSubtype(json, "$isMap", [P.String, P.Object], "$asMap");
      version = H.intTypeCheck(H.boolConversionCheck(json.containsKey$1(_s7_)) ? json.$index(0, _s7_) : 0);
      if (typeof version !== "number")
        return version.$gt();
      if (version > 2)
        H.throwExpression("Somehow the given model version (" + version + ") is greater than the supported NetTango version (2).");
      if (version < 1)
        U.Version1_update(json);
      if (version < 2)
        U.VersionUtils_updateBlocks(json, U.ntango_Version2_updateBlockSelectAttributes$closure(), U.ntango_Version2_updateBlockSelectAttributes$closure());
      json.$indexSet(0, _s7_, 2);
      $._workspaces.$indexSet(0, canvasId, U.CodeWorkspace$(canvasId, json));
      $._workspaces.$index(0, canvasId).draw$0();
    },
    JSInitWorkspace: function(canvasId, jsonString) {
      var json;
      H.stringTypeCheck(canvasId);
      H.stringTypeCheck(jsonString);
      if ($._workspaces.$index(0, canvasId) instanceof U.CodeWorkspace)
        $._workspaces.$index(0, canvasId).unload$0();
      json = C.C_JsonCodec.decode$2$reviver(0, jsonString, null);
      if (!!J.getInterceptor$(json).$isMap)
        U._init(canvasId, json);
    },
    JSInitAllWorkspaces: function(jsonString) {
      var t1, t2, key, t3,
        json = C.C_JsonCodec.decode$2$reviver(0, H.stringTypeCheck(jsonString), null);
      if (!!J.getInterceptor$(json).$isMap)
        for (t1 = J.get$iterator$ax(json.get$keys()), t2 = [P.String, P.Object]; t1.moveNext$0();) {
          key = t1.get$current();
          if ($._workspaces.$index(0, key) instanceof U.CodeWorkspace) {
            t3 = $._workspaces.$index(0, key);
            C.JSArray_methods.set$length(t3.touchables, 0);
            C.JSArray_methods.set$length(t3.blocks, 0);
            C.JSArray_methods.remove$1(t3.tmanager.layers, t3);
          }
          if (!!J.getInterceptor$(json.$index(0, key)).$isMap) {
            H.stringTypeCheck(key);
            t3 = H.interceptedTypeCheck(json.$index(0, key), "$isMap");
            U.VersionManager_updateWorkspace(H.assertSubtype(t3, "$isMap", t2, "$asMap"));
            $._workspaces.$indexSet(0, key, U.CodeWorkspace$(key, t3));
            $._workspaces.$index(0, key).draw$0();
          }
        }
    },
    JSExportCode: function(canvasId, language) {
      H.stringTypeCheck(canvasId);
      H.stringTypeCheck(language);
      if ($._workspaces.containsKey$1(canvasId))
        return U.CodeFormatter_formatCode(language, $._workspaces.$index(0, canvasId).exportParseTree$0());
      return;
    },
    JSSaveWorkspace: function(canvasId) {
      var defs;
      H.stringTypeCheck(canvasId);
      if ($._workspaces.containsKey$1(canvasId)) {
        defs = $._workspaces.$index(0, canvasId).definition;
        defs.$indexSet(0, "program", $._workspaces.$index(0, canvasId).exportParseTree$0());
        return C.C_JsonCodec.encode$2$toEncodable(defs, null);
      }
    },
    JSSaveAllWorkspaces: function() {
      var t1, key, defs,
        json = P.LinkedHashMap__makeEmpty();
      for (t1 = $._workspaces, t1 = new H.LinkedHashMapKeyIterable(t1, [H.getTypeArgumentByIndex(t1, 0)]), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        key = t1._current;
        defs = $._workspaces.$index(0, key).definition;
        defs.$indexSet(0, "program", $._workspaces.$index(0, key).exportParseTree$0());
        json.$indexSet(0, key, defs);
      }
      return C.C_JsonCodec.encode$2$toEncodable(json, null);
    },
    main: function() {
      var t1 = $.$get$context();
      t1.$indexSet(0, "NetTango_InitWorkspace", U.ntango__JSInitWorkspace$closure());
      t1.$indexSet(0, "NetTango_InitAllWorkspaces", U.ntango__JSInitAllWorkspaces$closure());
      t1.$indexSet(0, "NetTango_ExportCode", U.ntango__JSExportCode$closure());
      t1.$indexSet(0, "NetTango_Save", U.ntango__JSSaveWorkspace$closure());
      t1.$indexSet(0, "NetTango_SaveAll", U.ntango__JSSaveAllWorkspaces$closure());
    },
    Contact$fromMouse: function(mouse) {
      var t2, t3,
        t1 = new U.Contact();
      t1.id = -1;
      t2 = J.getInterceptor$x(mouse);
      t3 = t2.get$offset(mouse).x;
      t3.toString;
      t1.originalX = t1.touchX = t3;
      t2 = t2.get$offset(mouse).y;
      t2.toString;
      t1.originalY = t1.touchY = t2;
      t1.finger = true;
      return t1;
    },
    toInt: function(d, defalutValue) {
      var t1, exception;
      if (d == null)
        return defalutValue;
      else if (typeof d === "number" && Math.floor(d) === d)
        return d;
      else if (typeof d === "string")
        try {
          t1 = P.int_parse(d);
          return t1;
        } catch (exception) {
          if (!!J.getInterceptor$(H.unwrapException(exception)).$isException)
            return defalutValue;
          else
            throw exception;
        }
      return defalutValue;
    },
    toNum: function(d, defalutValue) {
      var t1, exception;
      if (d == null)
        return defalutValue;
      else if (typeof d === "number")
        return d;
      else if (typeof d === "string")
        try {
          t1 = P.num_parse(d, null);
          return t1;
        } catch (exception) {
          if (!!J.getInterceptor$(H.unwrapException(exception)).$isException)
            return defalutValue;
          else
            throw exception;
        }
      return defalutValue;
    },
    toBool: function(b, defaultValue) {
      if (b == null)
        return defaultValue;
      else if (typeof b === "boolean")
        return b;
      else if (typeof b === "string")
        if (b.toLowerCase() === "true" || b.toLowerCase() === "t")
          return true;
        else if (b.toLowerCase() === "false" || b.toLowerCase() === "f")
          return false;
      return defaultValue;
    },
    Version1_update: function(json) {
      var t1 = {},
        t2 = P.int,
        actionToId = new H.JsLinkedHashMap([P.String, t2]),
        blockIdToAttributeIdOffset = new H.JsLinkedHashMap([t2, t2]);
      t1.attributeId = 0;
      U.VersionUtils_updateBlocks(json, new U.Version1_update_closure(t1, actionToId, blockIdToAttributeIdOffset), new U.Version1_update_closure0(actionToId, blockIdToAttributeIdOffset));
    },
    Version1_addIdsToParamsAndProps: function(attributeId, b) {
      var t1 = {};
      t1.attributeId = attributeId;
      U.VersionUtils_updateBlockAttributes(H.assertSubtype(b, "$isMap", [P.String, P.Object], "$asMap"), new U.Version1_addIdsToParamsAndProps_closure(t1));
      return t1.attributeId;
    },
    Version1_addIdsToAttributes: function(attributeId, attributes) {
      var t1, t2;
      for (t1 = J.get$iterator$ax(attributes), t2 = [P.String, P.Object]; t1.moveNext$0();) {
        H.assertSubtype(t1.get$current(), "$isMap", t2, "$asMap").$indexSet(0, "id", attributeId);
        if (typeof attributeId !== "number")
          return attributeId.$add();
        ++attributeId;
      }
      return attributeId;
    },
    Version1_addIdToBlock: function(actionToId, blockIdToAttributeIdOffset, b) {
      var action, id,
        t1 = P.String,
        t2 = P.int;
      H.assertSubtype(actionToId, "$isMap", [t1, t2], "$asMap");
      H.assertSubtype(blockIdToAttributeIdOffset, "$isMap", [t2, t2], "$asMap");
      if (!H.boolConversionCheck(b.containsKey$1("action")))
        return;
      action = H.stringTypeCheck(b.$index(0, "action"));
      if (actionToId.containsKey$1(action)) {
        id = actionToId.$index(0, action);
        b.$indexSet(0, "id", id);
        U.Version1_addIdsToParamsAndProps(blockIdToAttributeIdOffset.$index(0, id), H.assertSubtype(b, "$isMap", [t1, P.Object], "$asMap"));
      }
    },
    Version2_updateBlockSelectAttributes: function(b) {
      U.VersionUtils_updateBlockAttributes(b, U.ntango_Version2_objectifySelectAttributes$closure());
    },
    Version2_objectifySelectAttribute: function(attribute) {
      var _s6_ = "values";
      if (!H.boolConversionCheck(attribute.containsKey$1(_s6_)) || !J.getInterceptor$(attribute.$index(0, _s6_)).$isList)
        return;
      attribute.$indexSet(0, _s6_, J.toList$0$ax(J.map$1$ax(attribute.$index(0, _s6_), new U.Version2_objectifySelectAttribute_closure())));
    },
    Version2_objectifySelectAttributes: function(attributes) {
      var t1, t2, t3;
      for (t1 = J.where$1$ax(attributes, new U.Version2_objectifySelectAttributes_closure()), t2 = J.get$iterator$ax(t1.__internal$_iterable), t1 = new H.WhereIterator(t2, t1._f, [H.getTypeArgumentByIndex(t1, 0)]), t3 = [P.String, P.Object]; t1.moveNext$0();)
        U.Version2_objectifySelectAttribute(H.assertSubtype(t2.get$current(), "$isMap", t3, "$asMap"));
    },
    VersionManager_updateWorkspace: function(json) {
      var version,
        _s7_ = "version";
      H.assertSubtype(json, "$isMap", [P.String, P.Object], "$asMap");
      version = H.intTypeCheck(H.boolConversionCheck(json.containsKey$1(_s7_)) ? json.$index(0, _s7_) : 0);
      if (typeof version !== "number")
        return version.$gt();
      if (version > 2)
        throw H.wrapException("Somehow the given model version (" + version + ") is greater than the supported NetTango version (2).");
      if (version < 1)
        U.Version1_update(json);
      if (version < 2)
        U.VersionUtils_updateBlocks(json, U.ntango_Version2_updateBlockSelectAttributes$closure(), U.ntango_Version2_updateBlockSelectAttributes$closure());
      json.$indexSet(0, _s7_, 2);
    },
    VersionUtils_updateBlocks: function(json, blockDefinitionHandler, blockInstanceHandler) {
      var t2, b, t3, child, clause, t4, program, _s6_ = "blocks",
        _s8_ = "children",
        _s7_ = "clauses",
        _s7_0 = "program",
        _s6_0 = "chains",
        t1 = {func: 1, args: [[P.Map,,,]]};
      H.functionTypeCheck(blockDefinitionHandler, t1);
      H.functionTypeCheck(blockInstanceHandler, t1);
      if (!H.boolConversionCheck(json.containsKey$1(_s6_)) || !J.getInterceptor$(json.$index(0, _s6_)).$isList)
        return;
      for (t1 = J.get$iterator$ax(H.listSuperNativeTypeCheck(json.$index(0, _s6_), "$isIterable")), t2 = [P.String, P.Object]; t1.moveNext$0();)
        blockDefinitionHandler.call$1(H.assertSubtype(t1.get$current(), "$isMap", t2, "$asMap"));
      for (t1 = J.get$iterator$ax(H.listSuperNativeTypeCheck(json.$index(0, _s6_), "$isIterable")); t1.moveNext$0();) {
        b = H.assertSubtype(t1.get$current(), "$isMap", t2, "$asMap");
        if (H.boolConversionCheck(b.containsKey$1(_s8_)) && !!J.getInterceptor$(b.$index(0, _s8_)).$isList)
          for (t3 = J.get$iterator$ax(H.listSuperNativeTypeCheck(b.$index(0, _s8_), "$isIterable")); t3.moveNext$0();) {
            child = t3.get$current();
            if (!!J.getInterceptor$(child).$isMap)
              blockInstanceHandler.call$1(child);
          }
        if (H.boolConversionCheck(b.containsKey$1(_s7_)) && !!J.getInterceptor$(b.$index(0, _s7_)).$isList)
          for (t3 = J.get$iterator$ax(H.listSuperNativeTypeCheck(b.$index(0, _s7_), "$isIterable")); t3.moveNext$0();) {
            clause = t3.get$current();
            t4 = J.getInterceptor$(clause);
            if (!!t4.$isMap && H.boolConversionCheck(clause.containsKey$1(_s8_)) && !!J.getInterceptor$(clause.$index(0, _s8_)).$isList)
              for (t4 = J.get$iterator$ax(H.listSuperNativeTypeCheck(t4.$index(clause, _s8_), "$isIterable")); t4.moveNext$0();)
                blockInstanceHandler.call$1(H.interceptedTypeCheck(t4.get$current(), "$isMap"));
          }
      }
      if (!H.boolConversionCheck(json.containsKey$1(_s7_0)) || !J.getInterceptor$(json.$index(0, _s7_0)).$isMap)
        return;
      program = H.interceptedTypeCheck(json.$index(0, _s7_0), "$isMap");
      if (!H.boolConversionCheck(program.containsKey$1(_s6_0)) || !J.getInterceptor$(program.$index(0, _s6_0)).$isList)
        return;
      for (t1 = J.get$iterator$ax(H.listSuperNativeTypeCheck(program.$index(0, _s6_0), "$isIterable")); t1.moveNext$0();)
        for (t2 = J.get$iterator$ax(H.listTypeCheck(t1.get$current())); t2.moveNext$0();)
          blockInstanceHandler.call$1(H.interceptedTypeCheck(t2.get$current(), "$isMap"));
    },
    VersionUtils_updateBlockAttributes: function(b, attributesHandler) {
      var _s6_ = "params",
        _s10_ = "properties";
      H.functionTypeCheck(attributesHandler, {func: 1, args: [[P.List,,]]});
      if (H.boolConversionCheck(b.containsKey$1(_s6_)) && !!J.getInterceptor$(b.$index(0, _s6_)).$isList)
        attributesHandler.call$1(H.listTypeCheck(b.$index(0, _s6_)));
      if (H.boolConversionCheck(b.containsKey$1(_s10_)) && !!J.getInterceptor$(b.$index(0, _s10_)).$isList)
        attributesHandler.call$1(H.listTypeCheck(b.$index(0, _s10_)));
    },
    Block: function Block(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.id = t0;
      _.action = t1;
      _.format = _.type = null;
      _._height = _.width = _.y = _.x = 0;
      _.prev = _.next = null;
      _.indent = 0;
      _.parent = null;
      _.params = t2;
      _.properties = t3;
      _.nextParamId = 0;
      _.blockColor = "#6b9bc3";
      _.textColor = "white";
      _.borderColor = "rgba(255, 255, 255, 0.6)";
      _.font = t4;
      _.required = false;
      _.workspace = t5;
      _.hasTopConnector = true;
      _._dragging = false;
      _._lastY = _._lastX = _._touchY = _._touchX = null;
      _._inMenu = false;
      _._wasInMenu = true;
    },
    ControlBlock: function ControlBlock() {
    },
    ClauseBlock: function ClauseBlock(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.nextClause = _.begin = null;
      _.id = t0;
      _.action = t1;
      _.format = _.type = null;
      _._height = _.width = _.y = _.x = 0;
      _.prev = _.next = null;
      _.indent = 0;
      _.parent = null;
      _.params = t2;
      _.properties = t3;
      _.nextParamId = 0;
      _.blockColor = "#6b9bc3";
      _.textColor = "white";
      _.borderColor = "rgba(255, 255, 255, 0.6)";
      _.font = t4;
      _.required = false;
      _.workspace = t5;
      _.hasTopConnector = true;
      _._dragging = false;
      _._lastY = _._lastX = _._touchY = _._touchX = null;
      _._inMenu = false;
      _._wasInMenu = true;
    },
    EndBlock: function EndBlock(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.nextClause = _.begin = null;
      _.id = t0;
      _.action = t1;
      _.format = _.type = null;
      _._height = _.width = _.y = _.x = 0;
      _.prev = _.next = null;
      _.indent = 0;
      _.parent = null;
      _.params = t2;
      _.properties = t3;
      _.nextParamId = 0;
      _.blockColor = "#6b9bc3";
      _.textColor = "white";
      _.borderColor = "rgba(255, 255, 255, 0.6)";
      _.font = t4;
      _.required = false;
      _.workspace = t5;
      _.hasTopConnector = true;
      _._dragging = false;
      _._lastY = _._lastX = _._touchY = _._touchX = null;
      _._inMenu = false;
      _._wasInMenu = true;
    },
    BeginBlock: function BeginBlock(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.clauses = t0;
      _.nextClause = _.end = null;
      _.id = t1;
      _.action = t2;
      _.format = _.type = null;
      _._height = _.width = _.y = _.x = 0;
      _.prev = _.next = null;
      _.indent = 0;
      _.parent = null;
      _.params = t3;
      _.properties = t4;
      _.nextParamId = 0;
      _.blockColor = "#6b9bc3";
      _.textColor = "white";
      _.borderColor = "rgba(255, 255, 255, 0.6)";
      _.font = t5;
      _.required = false;
      _.workspace = t6;
      _.hasTopConnector = true;
      _._dragging = false;
      _._lastY = _._lastX = _._touchY = _._touchX = null;
      _._inMenu = false;
      _._wasInMenu = true;
    },
    Expression: function Expression(t0, t1, t2) {
      var _ = this;
      _.builder = t0;
      _.name = null;
      _.type = t1;
      _.format = null;
      _.children = t2;
    },
    Expression_appendOperator_closure: function Expression_appendOperator_closure(t0, t1) {
      this.$this = t0;
      this.div = t1;
    },
    Expression_electricBrace_closure: function Expression_electricBrace_closure(t0) {
      this.parent = t0;
    },
    Expression_electricBrace_closure0: function Expression_electricBrace_closure0(t0) {
      this.parent = t0;
    },
    Expression_appendNumber_closure: function Expression_appendNumber_closure(t0, t1) {
      this.$this = t0;
      this.input = t1;
    },
    Expression_isNum_closure: function Expression_isNum_closure() {
    },
    Expression_renderHtml_closure: function Expression_renderHtml_closure(t0, t1) {
      this.$this = t0;
      this.div = t1;
    },
    Expression_openPulldown_closure: function Expression_openPulldown_closure() {
    },
    Expression_openPulldown_closure0: function Expression_openPulldown_closure0(t0, t1) {
      this.$this = t0;
      this.hmenu = t1;
    },
    Expression__addMenuItems_closure: function Expression__addMenuItems_closure(t0, t1, t2) {
      this.$this = t0;
      this.hmenu = t1;
      this.item = t2;
    },
    ExpressionBuilder: function ExpressionBuilder(t0) {
      this.workspace = t0;
      this.root = this.parent = null;
    },
    CodeFormatter: function CodeFormatter() {
    },
    PlainFormatter: function PlainFormatter() {
    },
    NetLogoFormatter: function NetLogoFormatter() {
    },
    BlockMenu: function BlockMenu(t0, t1, t2) {
      this.workspace = t0;
      this.slots = t1;
      this.width = t2;
    },
    BlockMenu_getBlockById_closure: function BlockMenu_getBlockById_closure(t0) {
      this.id = t0;
    },
    Slot: function Slot(t0, t1, t2) {
      var _ = this;
      _.block = t0;
      _.y = _.x = null;
      _.workspace = t1;
      _.count = t2;
    },
    Parameter: function Parameter(t0, t1) {
      var _ = this;
      _.id = null;
      _.block = t0;
      _.defaultValue = _._ntango$_value = null;
      _.type = "int";
      _.unit = _.name = "";
      _._top = _._left = 0;
      _.width = 28;
      _.height = t1;
      _._down = false;
    },
    Parameter__showParameterDialog_closure: function Parameter__showParameterDialog_closure(t0, t1, t2) {
      this.$this = t0;
      this.input = t1;
      this.backdrop = t2;
    },
    Parameter__showParameterDialog_closure0: function Parameter__showParameterDialog_closure0(t0) {
      this.backdrop = t0;
    },
    Parameter__showParameterDialog_closure1: function Parameter__showParameterDialog_closure1(t0, t1) {
      this.label = t0;
      this.input = t1;
    },
    Parameter__showParameterDialog_closure2: function Parameter__showParameterDialog_closure2(t0, t1) {
      this.label = t0;
      this.input = t1;
    },
    NumParameter: function NumParameter() {
    },
    IntParameter: function IntParameter(t0, t1) {
      var _ = this;
      _.random = false;
      _.stepSize = 1;
      _.id = null;
      _.block = t0;
      _.defaultValue = _._ntango$_value = null;
      _.type = "int";
      _.unit = _.name = "";
      _._top = _._left = 0;
      _.width = 28;
      _.height = t1;
      _._down = false;
    },
    RangeParameter: function RangeParameter(t0, t1) {
      var _ = this;
      _.minValue = 0;
      _.maxValue = 10;
      _.random = false;
      _.stepSize = 1;
      _.id = null;
      _.block = t0;
      _.defaultValue = _._ntango$_value = null;
      _.type = "int";
      _.unit = _.name = "";
      _._top = _._left = 0;
      _.width = 28;
      _.height = t1;
      _._down = false;
    },
    RangeParameter__showParameterDialog_closure: function RangeParameter__showParameterDialog_closure() {
    },
    RangeParameter__showParameterDialog_closure0: function RangeParameter__showParameterDialog_closure0(t0) {
      this.backdrop = t0;
    },
    RangeParameter__showParameterDialog_closure1: function RangeParameter__showParameterDialog_closure1(t0, t1, t2) {
      this.$this = t0;
      this.input = t1;
      this.backdrop = t2;
    },
    RangeParameter__showParameterDialog_closure2: function RangeParameter__showParameterDialog_closure2(t0, t1) {
      this.label = t0;
      this.input = t1;
    },
    SelectParameter: function SelectParameter(t0, t1, t2) {
      var _ = this;
      _.values = t0;
      _.id = _._display = null;
      _.block = t1;
      _.defaultValue = _._ntango$_value = null;
      _.type = "int";
      _.unit = _.name = "";
      _._top = _._left = 0;
      _.width = 28;
      _.height = t2;
      _._down = false;
    },
    SelectParameter__showParameterDialog_closure: function SelectParameter__showParameterDialog_closure(t0, t1, t2) {
      this.$this = t0;
      this.v = t1;
      this.backdrop = t2;
    },
    SelectParameter__showParameterDialog_closure0: function SelectParameter__showParameterDialog_closure0(t0) {
      this.backdrop = t0;
    },
    ExpressionParameter: function ExpressionParameter(t0, t1) {
      var _ = this;
      _.id = _.builder = null;
      _.block = t0;
      _.defaultValue = _._ntango$_value = null;
      _.type = "int";
      _.unit = _.name = "";
      _._top = _._left = 0;
      _.width = 28;
      _.height = t1;
      _._down = false;
    },
    ExpressionParameter__showParameterDialog_closure: function ExpressionParameter__showParameterDialog_closure(t0, t1) {
      this.$this = t0;
      this.backdrop = t1;
    },
    ExpressionParameter__showParameterDialog_closure0: function ExpressionParameter__showParameterDialog_closure0() {
    },
    ExpressionParameter__showParameterDialog__closure1: function ExpressionParameter__showParameterDialog__closure1() {
    },
    ExpressionParameter__showParameterDialog_closure1: function ExpressionParameter__showParameterDialog_closure1() {
    },
    ExpressionParameter__showParameterDialog__closure0: function ExpressionParameter__showParameterDialog__closure0() {
    },
    ExpressionParameter__showParameterDialog_closure2: function ExpressionParameter__showParameterDialog_closure2(t0) {
      this.backdrop = t0;
    },
    ExpressionParameter__showParameterDialog_closure3: function ExpressionParameter__showParameterDialog_closure3() {
    },
    ExpressionParameter__showParameterDialog__closure: function ExpressionParameter__showParameterDialog__closure() {
    },
    CodeWorkspace: function CodeWorkspace(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _.version = t0;
      _.canvasId = t1;
      _.blocks = t2;
      _.nextBlockId = 0;
      _.definition = t3;
      _.menu = _.height = _.width = null;
      _.variables = t4;
      _.expressions = t5;
      _.ctx = null;
      _.tmanager = t6;
      _.touchables = t7;
      _.touch_bindings = t8;
      _.xform = t9;
      _.iform = t10;
      _.last_touch = t11;
    },
    CodeWorkspace_tick_closure: function CodeWorkspace_tick_closure(t0) {
      this.$this = t0;
    },
    CodeWorkspace_getBlockCount_closure: function CodeWorkspace_getBlockCount_closure(t0) {
      this.id = t0;
    },
    CodeWorkspace__restoreBlock_closure: function CodeWorkspace__restoreBlock_closure() {
    },
    Matrix2D: function Matrix2D(t0) {
      this.xform = t0;
    },
    TouchManager: function TouchManager(t0, t1) {
      this.mdown = false;
      this.layers = t0;
      this.touch_bindings = t1;
    },
    TouchManager_registerEvents_closure: function TouchManager_registerEvents_closure(t0) {
      this.$this = t0;
    },
    TouchManager_registerEvents_closure0: function TouchManager_registerEvents_closure0(t0) {
      this.$this = t0;
    },
    TouchManager_registerEvents_closure1: function TouchManager_registerEvents_closure1(t0) {
      this.$this = t0;
    },
    TouchManager_registerEvents_closure2: function TouchManager_registerEvents_closure2(t0) {
      this.$this = t0;
    },
    TouchManager_registerEvents_closure3: function TouchManager_registerEvents_closure3() {
    },
    TouchLayer: function TouchLayer() {
    },
    TouchBinding: function TouchBinding(t0, t1) {
      this.layer = t0;
      this.touchable = t1;
    },
    Touchable: function Touchable() {
    },
    Contact: function Contact() {
      var _ = this;
      _.id = null;
      _.tagId = -1;
      _.originalY = _.touchY = _.originalX = _.touchX = 0;
      _.finger = _.drag = _.down = _.up = false;
    },
    Version1_update_closure: function Version1_update_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.actionToId = t1;
      this.blockIdToAttributeIdOffset = t2;
    },
    Version1_update_closure0: function Version1_update_closure0(t0, t1) {
      this.actionToId = t0;
      this.blockIdToAttributeIdOffset = t1;
    },
    Version1_addIdsToParamsAndProps_closure: function Version1_addIdsToParamsAndProps_closure(t0) {
      this._box_0 = t0;
    },
    Version2_objectifySelectAttribute_closure: function Version2_objectifySelectAttribute_closure() {
    },
    Version2_objectifySelectAttributes_closure: function Version2_objectifySelectAttributes_closure() {
    }
  };
  var holders = [C, H, J, P, W, U];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  H.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return "Instance of '" + H.Primitives_objectTypeName(receiver) + "'";
    },
    noSuchMethod$1: function(receiver, invocation) {
      H.interceptedTypeCheck(invocation, "$isInvocation");
      throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    }
  };
  J.JSBool.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    noSuchMethod$1: function(receiver, invocation) {
      return this.super$Interceptor$noSuchMethod(receiver, H.interceptedTypeCheck(invocation, "$isInvocation"));
    },
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {
    get$hashCode: function(receiver) {
      return 0;
    },
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0: function(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$JavaScriptObject$toString(receiver);
      return "JavaScript function for " + H.S(J.toString$0$(dartClosure));
    },
    $signature: function() {
      return {func: 1, opt: [,,,,,,,,,,,,,,,,]};
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1: function(receiver, index) {
      var t1;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeAt"));
      t1 = receiver.length;
      if (index >= t1)
        throw H.wrapException(P.RangeError$value(index, null));
      return receiver.splice(index, 1)[0];
    },
    remove$1: function(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    where$1: function(receiver, f) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return new H.WhereIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: P.bool, args: [t1]}), [t1]);
    },
    addAll$1: function(receiver, collection) {
      var t1;
      H.assertSubtype(collection, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("addAll"));
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current());
    },
    forEach$1: function(receiver, f) {
      var end, i;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return new H.MappedListIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    any$1: function(receiver, test) {
      var end, i;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (H.boolConversionCheck(test.call$1(receiver[i])))
          return true;
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    sort$1: function(receiver, compare) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("sort"));
      H.Sort_sort(receiver, compare, t1);
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable: function(receiver, growable) {
      var t1 = H.setRuntimeTypeInfo(receiver.slice(0), [H.getTypeArgumentByIndex(receiver, 0)]);
      return t1;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator: function(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$range(newLength, 0, null, "newLength", null));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current: function() {
      return this.__interceptors$_current;
    },
    moveNext$0: function() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this.__interceptors$_length !== $length)
        throw H.wrapException(H.throwConcurrentModificationError(t1));
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$__interceptors$_current(null);
        return false;
      }
      _this.set$__interceptors$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$__interceptors$_current: function(_current) {
      this.__interceptors$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      H.numTypeCheck(b);
      if (typeof b !== "number")
        throw H.wrapException(H.argumentErrorValue(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".toInt()"));
    },
    floor$0: function(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".floor()"));
    },
    round$0: function(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".round()"));
    },
    toStringAsFixed$1: function(receiver, fractionDigits) {
      var result;
      if (fractionDigits > 20)
        throw H.wrapException(P.RangeError$range(fractionDigits, 0, 20, "fractionDigits", null));
      result = receiver.toFixed(fractionDigits);
      if (receiver === 0 && this.get$isNegative(receiver))
        return "-" + result;
      return result;
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return 536870911 & intValue;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return 536870911 & ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver + other;
    },
    $mul: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver * other;
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1: function(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + other));
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrBothPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver > other;
    },
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {$isint: 1};
  J.JSDouble.prototype = {};
  J.JSString.prototype = {
    codeUnitAt$1: function(receiver, index) {
      if (index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        H.throwExpression(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    _codeUnitAt$1: function(receiver, index) {
      if (index >= receiver.length)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$value(other, null, null));
      return receiver + other;
    },
    endsWith$1: function(receiver, other) {
      var otherLength = other.length,
        t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    startsWith$1: function(receiver, pattern) {
      var otherLength = pattern.length;
      if (otherLength > receiver.length)
        return false;
      return pattern === receiver.substring(0, otherLength);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (endIndex == null)
        endIndex = receiver.length;
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex, null));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    trim$0: function(receiver) {
      var startIndex, t1, endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this._codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    $mul: function(receiver, times) {
      var s, result;
      H.intTypeCheck(times);
      if (typeof times !== "number")
        return H.iae(times);
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    compareTo$1: function(receiver, other) {
      var t1;
      H.stringTypeCheck(other);
      if (typeof other !== "string")
        throw H.wrapException(H.argumentErrorValue(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >= receiver.length || false)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $isPattern: 1,
    $isString: 1
  };
  H.EfficientLengthIterable.prototype = {};
  H.ListIterable.prototype = {
    get$iterator: function(_) {
      var _this = this;
      return new H.ListIterator(_this, _this.get$length(_this), [H.getRuntimeTypeArgument(_this, "ListIterable", 0)]);
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    where$1: function(_, test) {
      return this.super$Iterable$where(0, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "ListIterable", 0)]}));
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getRuntimeTypeArgument(this, "ListIterable", 0);
      return new H.MappedListIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    toList$1$growable: function(_, growable) {
      var i, _this = this,
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(_this, "ListIterable", 0)]);
      C.JSArray_methods.set$length(result, _this.get$length(_this));
      for (i = 0; i < _this.get$length(_this); ++i)
        C.JSArray_methods.$indexSet(result, i, _this.elementAt$1(0, i));
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.ListIterator.prototype = {
    get$current: function() {
      return this.__internal$_current;
    },
    moveNext$0: function() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  H.MappedIterable.prototype = {
    get$iterator: function(_) {
      return new H.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti);
    },
    get$length: function(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this.__internal$_iterable, index));
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    }
  };
  H.MappedIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current()));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current: function() {
      return this.__internal$_current;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
    },
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  H.MappedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    },
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.WhereIterable.prototype = {
    get$iterator: function(_) {
      return new H.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti);
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return new H.MappedIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    }
  };
  H.WhereIterator.prototype = {
    moveNext$0: function() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (H.boolConversionCheck(t2.call$1(t1.get$current())))
          return true;
      return false;
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  };
  H.TakeIterable.prototype = {
    get$iterator: function(_) {
      return new H.TakeIterator(J.get$iterator$ax(this.__internal$_iterable), this._takeCount, this.$ti);
    }
  };
  H.EfficientLengthTakeIterable.prototype = {
    get$length: function(_) {
      var iterableLength = J.get$length$asx(this.__internal$_iterable),
        t1 = this._takeCount;
      if (iterableLength > t1)
        return t1;
      return iterableLength;
    },
    $isEfficientLengthIterable: 1
  };
  H.TakeIterator.prototype = {
    moveNext$0: function() {
      if (--this._remaining >= 0)
        return this._iterator.moveNext$0();
      this._remaining = -1;
      return false;
    },
    get$current: function() {
      if (this._remaining < 0)
        return;
      return this._iterator.get$current();
    }
  };
  H.SkipIterable.prototype = {
    get$iterator: function(_) {
      return new H.SkipIterator(J.get$iterator$ax(this.__internal$_iterable), this._skipCount, this.$ti);
    }
  };
  H.EfficientLengthSkipIterable.prototype = {
    get$length: function(_) {
      var $length = J.get$length$asx(this.__internal$_iterable) - this._skipCount;
      if ($length >= 0)
        return $length;
      return 0;
    },
    $isEfficientLengthIterable: 1
  };
  H.SkipIterator.prototype = {
    moveNext$0: function() {
      var t1, i;
      for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  };
  H.FixedLengthListMixin.prototype = {
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    removeAt$1: function(receiver, index) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    }
  };
  H.Symbol.prototype = {
    get$hashCode: function(_) {
      var hash = this._hashCode;
      if (hash != null)
        return hash;
      hash = 536870911 & 664597 * J.get$hashCode$(this.__internal$_name);
      this._hashCode = hash;
      return hash;
    },
    toString$0: function(_) {
      return 'Symbol("' + H.S(this.__internal$_name) + '")';
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H.Symbol && this.__internal$_name == other.__internal$_name;
    },
    $isSymbol0: 1
  };
  H.ConstantMapView.prototype = {};
  H.ConstantMap.prototype = {
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $indexSet: function(_, key, val) {
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
      H.assertSubtypeOfRuntimeType(val, H.getTypeArgumentByIndex(this, 1));
      return H.ConstantMap__throwUnmodifiable();
    },
    map$2$1: function(_, transform, K2, V2) {
      var _this = this,
        result = P.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      _this.forEach$1(0, new H.ConstantMap_map_closure(_this, H.functionTypeCheck(transform, {func: 1, ret: [P.MapEntry, K2, V2], args: [H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1)]}), result));
      return result;
    },
    map$1: function($receiver, transform) {
      return this.map$2$1($receiver, transform, null, null);
    },
    $isMap: 1
  };
  H.ConstantMap_map_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this,
        entry = this.transform.call$2(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(t1, 1)));
      this.result.$indexSet(0, C.JSNull_methods.get$key(entry), entry.get$value(entry));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]};
    }
  };
  H.ConstantStringMap.prototype = {
    get$length: function(_) {
      return this._length;
    },
    containsKey$1: function(key) {
      if (typeof key !== "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this.__js_helper$_jsObject.hasOwnProperty(key);
    },
    $index: function(_, key) {
      if (!this.containsKey$1(key))
        return;
      return this._fetch$1(key);
    },
    _fetch$1: function(key) {
      return this.__js_helper$_jsObject[H.stringTypeCheck(key)];
    },
    forEach$1: function(_, f) {
      var keys, t2, i, key, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 1);
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 0), t1]});
      keys = _this._keys;
      for (t2 = keys.length, i = 0; i < t2; ++i) {
        key = keys[i];
        f.call$2(key, H.assertSubtypeOfRuntimeType(_this._fetch$1(key), t1));
      }
    },
    get$keys: function() {
      return new H._ConstantMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
    }
  };
  H._ConstantMapKeyIterable.prototype = {
    get$iterator: function(_) {
      var t1 = this._map._keys;
      return new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]);
    },
    get$length: function(_) {
      return this._map._keys.length;
    }
  };
  H.JSInvocationMirror.prototype = {
    get$memberName: function() {
      var t1 = this._memberName;
      return t1;
    },
    get$positionalArguments: function() {
      var t1, argumentCount, list, index, _this = this;
      if (_this._kind === 1)
        return C.List_empty0;
      t1 = _this._arguments;
      argumentCount = t1.length - _this._namedArgumentNames.length - _this._typeArgumentCount;
      if (argumentCount === 0)
        return C.List_empty0;
      list = [];
      for (index = 0; index < argumentCount; ++index) {
        if (index >= t1.length)
          return H.ioore(t1, index);
        list.push(t1[index]);
      }
      list.fixed$length = Array;
      list.immutable$list = Array;
      return list;
    },
    get$namedArguments: function() {
      var t1, namedArgumentCount, t2, namedArgumentsStartIndex, t3, map, i, t4, t5, _this = this;
      if (_this._kind !== 0)
        return C.Map_empty;
      t1 = _this._namedArgumentNames;
      namedArgumentCount = t1.length;
      t2 = _this._arguments;
      namedArgumentsStartIndex = t2.length - namedArgumentCount - _this._typeArgumentCount;
      if (namedArgumentCount === 0)
        return C.Map_empty;
      t3 = P.Symbol0;
      map = new H.JsLinkedHashMap([t3, null]);
      for (i = 0; i < namedArgumentCount; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t4 = t1[i];
        t5 = namedArgumentsStartIndex + i;
        if (t5 < 0 || t5 >= t2.length)
          return H.ioore(t2, t5);
        map.$indexSet(0, new H.Symbol(t4), t2[t5]);
      }
      return new H.ConstantMapView(map, [t3, null]);
    },
    $isInvocation: 1
  };
  H.Primitives_functionNoSuchMethod_closure.prototype = {
    call$2: function($name, argument) {
      var t1;
      H.stringTypeCheck($name);
      t1 = this._box_0;
      t1.names = t1.names + "$" + H.S($name);
      C.JSArray_methods.add$1(this.namedArgumentList, $name);
      C.JSArray_methods.add$1(this.$arguments, argument);
      ++t1.argumentCount;
    },
    $signature: 19
  };
  H.TypeErrorDecoder.prototype = {
    matchTypeError$1: function(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  H.NullError.prototype = {
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    }
  };
  H.JsNoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(_this._message);
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + H.S(_this._message) + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + H.S(_this._message) + ")";
    }
  };
  H.UnknownJsTypeError.prototype = {
    toString$0: function(_) {
      var t1 = this._message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  H.unwrapException_saveStackTrace.prototype = {
    call$1: function(error) {
      if (!!J.getInterceptor$(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex;
      return error;
    },
    $signature: 3
  };
  H._StackTrace.prototype = {
    toString$0: function(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  H.Closure.prototype = {
    toString$0: function(_) {
      return "Closure '" + H.Primitives_objectTypeName(this).trim() + "'";
    },
    $isFunction: 1,
    get$$call: function() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  H.TearOffClosure.prototype = {};
  H.StaticClosure.prototype = {
    toString$0: function(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + H.unminifyOrTag($name) + "'";
    }
  };
  H.BoundClosure.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return _this._self === other._self && _this.__js_helper$_target === other.__js_helper$_target && _this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var receiverHashCode,
        t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return (receiverHashCode ^ H.Primitives_objectHashCode(this.__js_helper$_target)) >>> 0;
    },
    toString$0: function(_) {
      var receiver = this._receiver;
      if (receiver == null)
        receiver = this._self;
      return "Closure '" + H.S(this._name) + "' of " + ("Instance of '" + H.Primitives_objectTypeName(receiver) + "'");
    }
  };
  H.TypeErrorImplementation.prototype = {
    toString$0: function(_) {
      return this.message;
    }
  };
  H.CastErrorImplementation.prototype = {
    toString$0: function(_) {
      return this.message;
    }
  };
  H.RuntimeError.prototype = {
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    }
  };
  H._AssertionError.prototype = {
    toString$0: function(_) {
      return "Assertion failed: " + P.Error_safeToString(this.message);
    }
  };
  H.JsLinkedHashMap.prototype = {
    get$length: function(_) {
      return this._length;
    },
    get$isEmpty: function(_) {
      return this._length === 0;
    },
    get$keys: function() {
      return new H.LinkedHashMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      var _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      return H.MappedIterable_MappedIterable(new H.LinkedHashMapKeyIterable(_this, [t1]), new H.JsLinkedHashMap_values_closure(_this), t1, H.getTypeArgumentByIndex(_this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums, _this = this;
      if (typeof key === "string") {
        strings = _this._strings;
        if (strings == null)
          return false;
        return _this._containsTableEntry$2(strings, key);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        if (nums == null)
          return false;
        return _this._containsTableEntry$2(nums, key);
      } else
        return _this.internalContainsKey$1(key);
    },
    internalContainsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this.internalFindBucketIndex$2(this._getTableBucket$2(rest, J.get$hashCode$(key) & 0x3ffffff), key) >= 0;
    },
    $index: function(_, key) {
      var strings, cell, t1, nums, _this = this;
      if (typeof key === "string") {
        strings = _this._strings;
        if (strings == null)
          return;
        cell = _this._getTableCell$2(strings, key);
        t1 = cell == null ? null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        if (nums == null)
          return;
        cell = _this._getTableCell$2(nums, key);
        t1 = cell == null ? null : cell.hashMapCellValue;
        return t1;
      } else
        return _this.internalGet$1(key);
    },
    internalGet$1: function(key) {
      var bucket, index,
        rest = this._rest;
      if (rest == null)
        return;
      bucket = this._getTableBucket$2(rest, J.get$hashCode$(key) & 0x3ffffff);
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].hashMapCellValue;
    },
    $indexSet: function(_, key, value) {
      var strings, nums, rest, hash, bucket, index, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      if (typeof key === "string") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else {
        rest = _this._rest;
        if (rest == null)
          rest = _this._rest = _this._newHashTable$0();
        hash = J.get$hashCode$(key) & 0x3ffffff;
        bucket = _this._getTableBucket$2(rest, hash);
        if (bucket == null)
          _this._setTableEntry$3(rest, hash, [_this._newLinkedCell$2(key, value)]);
        else {
          index = _this.internalFindBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].hashMapCellValue = value;
          else
            bucket.push(_this._newLinkedCell$2(key, value));
        }
      }
    },
    remove$1: function(_, key) {
      var t1 = this.internalRemove$1(key);
      return t1;
    },
    internalRemove$1: function(key) {
      var hash, bucket, index, cell, _this = this,
        rest = _this._rest;
      if (rest == null)
        return;
      hash = key.get$hashCode(key) & 0x3ffffff;
      bucket = _this._getTableBucket$2(rest, hash);
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      _this._unlinkCell$1(cell);
      if (bucket.length === 0)
        _this._deleteTableEntry$2(rest, hash);
      return cell.hashMapCellValue;
    },
    clear$0: function(_) {
      var _this = this;
      if (_this._length > 0) {
        _this._strings = _this._nums = _this._rest = _this._first = _this._last = null;
        _this._length = 0;
        _this._modified$0();
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1)]});
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      cell = _this._getTableCell$2(table, key);
      if (cell == null)
        _this._setTableEntry$3(table, key, _this._newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    _modified$0: function() {
      this._modifications = this._modifications + 1 & 67108863;
    },
    _newLinkedCell$2: function(key, value) {
      var last, _this = this,
        cell = new H.LinkedHashMapCell(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1)));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        last = _this._last;
        cell._previous = last;
        _this._last = last._next = cell;
      }
      ++_this._length;
      _this._modified$0();
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var _this = this,
        previous = cell._previous,
        next = cell._next;
      if (previous == null)
        _this._first = next;
      else
        previous._next = next;
      if (next == null)
        _this._last = previous;
      else
        next._previous = previous;
      --_this._length;
      _this._modified$0();
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    _getTableCell$2: function(table, key) {
      return table[key];
    },
    _getTableBucket$2: function(table, key) {
      return table[key];
    },
    _setTableEntry$3: function(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2: function(table, key) {
      delete table[key];
    },
    _containsTableEntry$2: function(table, key) {
      return this._getTableCell$2(table, key) != null;
    },
    _newHashTable$0: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      this._setTableEntry$3(table, _s20_, table);
      this._deleteTableEntry$2(table, _s20_);
      return table;
    },
    $isLinkedHashMap: 1
  };
  H.JsLinkedHashMap_values_closure.prototype = {
    call$1: function(each) {
      var t1 = this.$this;
      return t1.$index(0, H.assertSubtypeOfRuntimeType(each, H.getTypeArgumentByIndex(t1, 0)));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: H.getTypeArgumentByIndex(t1, 1), args: [H.getTypeArgumentByIndex(t1, 0)]};
    }
  };
  H.LinkedHashMapCell.prototype = {};
  H.LinkedHashMapKeyIterable.prototype = {
    get$length: function(_) {
      return this._map._length;
    },
    get$isEmpty: function(_) {
      return this._map._length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._map,
        t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti);
      t2._cell = t1._first;
      return t2;
    },
    contains$1: function(_, element) {
      return this._map.containsKey$1(element);
    }
  };
  H.LinkedHashMapKeyIterator.prototype = {
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this._map;
      if (_this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = _this._cell;
        if (t1 == null) {
          _this.set$_current(null);
          return false;
        } else {
          _this.set$_current(t1.hashMapCellKey);
          _this._cell = _this._cell._next;
          return true;
        }
      }
    },
    set$_current: function(_current) {
      this._current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  H.initHooks_closure.prototype = {
    call$1: function(o) {
      return this.getTag(o);
    },
    $signature: 3
  };
  H.initHooks_closure0.prototype = {
    call$2: function(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 28
  };
  H.initHooks_closure1.prototype = {
    call$1: function(tag) {
      return this.prototypeForTag(H.stringTypeCheck(tag));
    },
    $signature: 32
  };
  H.JSSyntaxRegExp.prototype = {
    toString$0: function(_) {
      return "RegExp/" + this.pattern + "/" + this._nativeRegExp.flags;
    },
    $isPattern: 1
  };
  H.NativeTypedData.prototype = {$isTypedData: 1};
  H.NativeTypedArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
    }
  };
  H.NativeTypedArrayOfDouble.prototype = {
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.doubleTypeCheck(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $asFixedLengthListMixin: function() {
      return [P.double];
    },
    $asListMixin: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    }
  };
  H.NativeTypedArrayOfInt.prototype = {
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.intTypeCheck(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asFixedLengthListMixin: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  H.NativeInt16List.prototype = {
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeInt32List.prototype = {
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeInt8List.prototype = {
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint16List.prototype = {
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint32List.prototype = {
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint8ClampedList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint8List.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  P._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1: function(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 9
  };
  P._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1: function(callback) {
      var t1, t2;
      this._box_0.storedCallback = H.functionTypeCheck(callback, {func: 1, ret: -1});
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 27
  };
  P._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 2
  };
  P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 2
  };
  P._TimerImpl.prototype = {
    _TimerImpl$2: function(milliseconds, callback) {
      if (self.setTimeout != null)
        self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
    }
  };
  P._TimerImpl_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._BroadcastStream.prototype = {};
  P._BroadcastSubscription.prototype = {
    _onPause$0: function() {
    },
    _onResume$0: function() {
    },
    set$_async$_next: function(_next) {
      this._async$_next = H.assertSubtype(_next, "$is_BroadcastSubscription", this.$ti, "$as_BroadcastSubscription");
    },
    set$_async$_previous: function(_previous) {
      this._async$_previous = H.assertSubtype(_previous, "$is_BroadcastSubscription", this.$ti, "$as_BroadcastSubscription");
    }
  };
  P._BroadcastStreamController.prototype = {
    get$_mayAddEvent: function() {
      return this._state < 4;
    },
    _ensureDoneFuture$0: function() {
      var t1 = this._doneFuture;
      if (t1 != null)
        return t1;
      return this._doneFuture = new P._Future($.Zone__current, [null]);
    },
    _removeListener$1: function(subscription) {
      var previous, next;
      H.assertSubtype(subscription, "$is_BroadcastSubscription", this.$ti, "$as_BroadcastSubscription");
      previous = subscription._async$_previous;
      next = subscription._async$_next;
      if (previous == null)
        this.set$_firstSubscription(next);
      else
        previous.set$_async$_next(next);
      if (next == null)
        this.set$_lastSubscription(previous);
      else
        next.set$_async$_previous(previous);
      subscription.set$_async$_previous(subscription);
      subscription.set$_async$_next(subscription);
    },
    _subscribe$4: function(onData, onError, onDone, cancelOnError) {
      var t2, t3, t4, subscription, oldLast, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      if ((_this._state & 4) !== 0) {
        if (onDone == null)
          onDone = P.async___nullDoneHandler$closure();
        t1 = new P._DoneStreamSubscription($.Zone__current, onDone, _this.$ti);
        t1._schedule$0();
        return t1;
      }
      t2 = $.Zone__current;
      t3 = cancelOnError ? 1 : 0;
      t4 = _this.$ti;
      subscription = new P._BroadcastSubscription(_this, t2, t3, t4);
      subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, t1);
      subscription.set$_async$_previous(subscription);
      subscription.set$_async$_next(subscription);
      H.assertSubtype(subscription, "$is_BroadcastSubscription", t4, "$as_BroadcastSubscription");
      subscription._eventState = _this._state & 1;
      oldLast = _this._lastSubscription;
      _this.set$_lastSubscription(subscription);
      subscription.set$_async$_next(null);
      subscription.set$_async$_previous(oldLast);
      if (oldLast == null)
        _this.set$_firstSubscription(subscription);
      else
        oldLast.set$_async$_next(subscription);
      if (_this._firstSubscription == _this._lastSubscription)
        P._runGuarded(_this.onListen);
      return subscription;
    },
    _recordCancel$1: function(sub) {
      var _this = this,
        t1 = _this.$ti;
      sub = H.assertSubtype(H.assertSubtype(sub, "$isStreamSubscription", t1, "$asStreamSubscription"), "$is_BroadcastSubscription", t1, "$as_BroadcastSubscription");
      if (sub._async$_next === sub)
        return;
      t1 = sub._eventState;
      if ((t1 & 2) !== 0)
        sub._eventState = t1 | 4;
      else {
        _this._removeListener$1(sub);
        if ((_this._state & 2) === 0 && _this._firstSubscription == null)
          _this._callOnCancel$0();
      }
      return;
    },
    _addEventError$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add new events after calling close");
      return new P.StateError("Cannot add new events while doing an addStream");
    },
    add$1: function(_, data) {
      var _this = this;
      H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(_this, 0));
      if (!_this.get$_mayAddEvent())
        throw H.wrapException(_this._addEventError$0());
      _this._sendData$1(data);
    },
    close$0: function(_) {
      var doneFuture, _this = this;
      if ((_this._state & 4) !== 0)
        return _this._doneFuture;
      if (!_this.get$_mayAddEvent())
        throw H.wrapException(_this._addEventError$0());
      _this._state |= 4;
      doneFuture = _this._ensureDoneFuture$0();
      _this._sendDone$0();
      return doneFuture;
    },
    _forEachListener$1: function(action) {
      var t1, subscription, id, next, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [[P._BufferingStreamSubscription, H.getTypeArgumentByIndex(_this, 0)]]});
      t1 = _this._state;
      if ((t1 & 2) !== 0)
        throw H.wrapException(P.StateError$("Cannot fire new event. Controller is already firing an event"));
      subscription = _this._firstSubscription;
      if (subscription == null)
        return;
      id = t1 & 1;
      _this._state = t1 ^ 3;
      for (; subscription != null;) {
        t1 = subscription._eventState;
        if ((t1 & 1) === id) {
          subscription._eventState = t1 | 2;
          action.call$1(subscription);
          t1 = subscription._eventState ^= 1;
          next = subscription._async$_next;
          if ((t1 & 4) !== 0)
            _this._removeListener$1(subscription);
          subscription._eventState &= 4294967293;
          subscription = next;
        } else
          subscription = subscription._async$_next;
      }
      _this._state &= 4294967293;
      if (_this._firstSubscription == null)
        _this._callOnCancel$0();
    },
    _callOnCancel$0: function() {
      var _this = this;
      if ((_this._state & 4) !== 0 && _this._doneFuture._state === 0)
        _this._doneFuture._asyncComplete$1(null);
      P._runGuarded(_this.onCancel);
    },
    set$_firstSubscription: function(_firstSubscription) {
      this._firstSubscription = H.assertSubtype(_firstSubscription, "$is_BroadcastSubscription", this.$ti, "$as_BroadcastSubscription");
    },
    set$_lastSubscription: function(_lastSubscription) {
      this._lastSubscription = H.assertSubtype(_lastSubscription, "$is_BroadcastSubscription", this.$ti, "$as_BroadcastSubscription");
    },
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1
  };
  P._SyncBroadcastStreamController.prototype = {
    get$_mayAddEvent: function() {
      return P._BroadcastStreamController.prototype.get$_mayAddEvent.call(this) && (this._state & 2) === 0;
    },
    _addEventError$0: function() {
      if ((this._state & 2) !== 0)
        return new P.StateError("Cannot fire new event. Controller is already firing an event");
      return this.super$_BroadcastStreamController$_addEventError();
    },
    _sendData$1: function(data) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(_this, 0));
      t1 = _this._firstSubscription;
      if (t1 == null)
        return;
      if (t1 === _this._lastSubscription) {
        _this._state |= 2;
        t1._async$_add$1(data);
        _this._state &= 4294967293;
        if (_this._firstSubscription == null)
          _this._callOnCancel$0();
        return;
      }
      _this._forEachListener$1(new P._SyncBroadcastStreamController__sendData_closure(_this, data));
    },
    _sendDone$0: function() {
      var _this = this;
      if (_this._firstSubscription != null)
        _this._forEachListener$1(new P._SyncBroadcastStreamController__sendDone_closure(_this));
      else
        _this._doneFuture._asyncComplete$1(null);
    }
  };
  P._SyncBroadcastStreamController__sendData_closure.prototype = {
    call$1: function(subscription) {
      H.assertSubtype(subscription, "$is_BufferingStreamSubscription", [H.getTypeArgumentByIndex(this.$this, 0)], "$as_BufferingStreamSubscription")._async$_add$1(this.data);
    },
    $signature: function() {
      return {func: 1, ret: P.Null, args: [[P._BufferingStreamSubscription, H.getTypeArgumentByIndex(this.$this, 0)]]};
    }
  };
  P._SyncBroadcastStreamController__sendDone_closure.prototype = {
    call$1: function(subscription) {
      H.assertSubtype(subscription, "$is_BufferingStreamSubscription", [H.getTypeArgumentByIndex(this.$this, 0)], "$as_BufferingStreamSubscription")._close$0();
    },
    $signature: function() {
      return {func: 1, ret: P.Null, args: [[P._BufferingStreamSubscription, H.getTypeArgumentByIndex(this.$this, 0)]]};
    }
  };
  P._Completer.prototype = {};
  P._SyncCompleter.prototype = {};
  P._FutureListener.prototype = {
    matchesErrorTest$1: function(asyncError) {
      if (this.state !== 6)
        return true;
      return this.result._zone.runUnary$2$2(H.functionTypeCheck(this.callback, {func: 1, ret: P.bool, args: [P.Object]}), asyncError.error, P.bool, P.Object);
    },
    handleError$1: function(asyncError) {
      var errorCallback = this.errorCallback,
        t1 = P.Object,
        t2 = {futureOr: 1, type: H.getTypeArgumentByIndex(this, 1)},
        t3 = this.result._zone;
      if (H.functionTypeTest(errorCallback, {func: 1, args: [P.Object, P.StackTrace]}))
        return H.futureOrCheck(t3.runBinary$3$3(errorCallback, asyncError.error, asyncError.stackTrace, null, t1, P.StackTrace), t2);
      else
        return H.futureOrCheck(t3.runUnary$2$2(H.functionTypeCheck(errorCallback, {func: 1, args: [P.Object]}), asyncError.error, null, t1), t2);
    }
  };
  P._Future.prototype = {
    get$_hasError: function() {
      return this._state === 8;
    },
    then$1$2$onError: function(f, onError, $R) {
      var currentZone, result, t2,
        t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
      currentZone = $.Zone__current;
      if (currentZone !== C.C__RootZone) {
        currentZone.toString;
        H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
        if (onError != null)
          onError = P._registerErrorHandler(onError, currentZone);
      }
      H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
      result = new P._Future($.Zone__current, [$R]);
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new P._FutureListener(result, t2, f, onError, [t1, $R]));
      return result;
    },
    then$1$1: function(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    whenComplete$1: function(action) {
      var t1, result;
      H.functionTypeCheck(action, {func: 1});
      t1 = $.Zone__current;
      result = new P._Future(t1, this.$ti);
      if (t1 !== C.C__RootZone) {
        t1.toString;
        H.functionTypeCheck(action, {func: 1, ret: null});
      }
      t1 = H.getTypeArgumentByIndex(this, 0);
      this._addListener$1(new P._FutureListener(result, 8, action, null, [t1, t1]));
      return result;
    },
    _setValue$1: function(value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
      this._state = 4;
      this._resultOrListeners = value;
    },
    _addListener$1: function(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 1) {
        listener._nextListener = H.interceptedTypeCheck(_this._resultOrListeners, "$is_FutureListener");
        _this._resultOrListeners = listener;
      } else {
        if (t1 === 2) {
          source = H.interceptedTypeCheck(_this._resultOrListeners, "$is_Future");
          t1 = source._state;
          if (t1 < 4) {
            source._addListener$1(listener);
            return;
          }
          _this._state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        t1 = _this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__addListener_closure(_this, listener), {func: 1, ret: -1}));
      }
    },
    _prependListeners$1: function(listeners) {
      var t1, existingListeners, cursor, cursor0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 1) {
        existingListeners = H.interceptedTypeCheck(_this._resultOrListeners, "$is_FutureListener");
        cursor = _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          for (; cursor0 = cursor._nextListener, cursor0 != null; cursor = cursor0)
            ;
          cursor._nextListener = existingListeners;
        }
      } else {
        if (t1 === 2) {
          source = H.interceptedTypeCheck(_this._resultOrListeners, "$is_Future");
          t1 = source._state;
          if (t1 < 4) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        t1 = _this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__prependListeners_closure(_box_0, _this), {func: 1, ret: -1}));
      }
    },
    _removeListeners$0: function() {
      var current = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1: function(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1: function(value) {
      var t2, listeners, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.futureOrCheck(value, {futureOr: 1, type: t1});
      t2 = _this.$ti;
      if (H.checkSubtype(value, "$isFuture", t2, "$asFuture"))
        if (H.checkSubtype(value, "$is_Future", t2, null))
          P._Future__chainCoreFuture(value, _this);
        else
          P._Future__chainForeignFuture(value, _this);
      else {
        listeners = _this._removeListeners$0();
        H.assertSubtypeOfRuntimeType(value, t1);
        _this._state = 4;
        _this._resultOrListeners = value;
        P._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeError$2: function(error, stackTrace) {
      var listeners, _this = this;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      listeners = _this._removeListeners$0();
      _this._state = 8;
      _this._resultOrListeners = new P.AsyncError(error, stackTrace);
      P._Future__propagateToListeners(_this, listeners);
    },
    _completeError$1: function(error) {
      return this._completeError$2(error, null);
    },
    _asyncComplete$1: function(value) {
      var t1, _this = this;
      if (H.checkSubtype(value, "$isFuture", _this.$ti, "$asFuture")) {
        _this._chainFuture$1(value);
        return;
      }
      _this._state = 1;
      t1 = _this._zone;
      t1.toString;
      P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__asyncComplete_closure(_this, value), {func: 1, ret: -1}));
    },
    _chainFuture$1: function(value) {
      var _this = this,
        t1 = _this.$ti;
      H.assertSubtype(value, "$isFuture", t1, "$asFuture");
      if (H.checkSubtype(value, "$is_Future", t1, null)) {
        if (value.get$_hasError()) {
          _this._state = 1;
          t1 = _this._zone;
          t1.toString;
          P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__chainFuture_closure(_this, value), {func: 1, ret: -1}));
        } else
          P._Future__chainCoreFuture(value, _this);
        return;
      }
      P._Future__chainForeignFuture(value, _this);
    },
    $isFuture: 1
  };
  P._Future__addListener_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 2
  };
  P._Future__prependListeners_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 2
  };
  P._Future__chainForeignFuture_closure.prototype = {
    call$1: function(value) {
      var t1 = this.target;
      t1._state = 0;
      t1._complete$1(value);
    },
    $signature: 9
  };
  P._Future__chainForeignFuture_closure0.prototype = {
    call$2: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      this.target._completeError$2(error, stackTrace);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    },
    "call*": "call$2",
    $defaultValues: function() {
      return [null];
    },
    $signature: 45
  };
  P._Future__chainForeignFuture_closure1.prototype = {
    call$0: function() {
      this.target._completeError$2(this.e, this.s);
    },
    $signature: 2
  };
  P._Future__asyncComplete_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = H.assertSubtypeOfRuntimeType(this.value, H.getTypeArgumentByIndex(t1, 0)),
        listeners = t1._removeListeners$0();
      t1._state = 4;
      t1._resultOrListeners = t2;
      P._Future__propagateToListeners(t1, listeners);
    },
    $signature: 2
  };
  P._Future__chainFuture_closure.prototype = {
    call$0: function() {
      P._Future__chainCoreFuture(this.value, this.$this);
    },
    $signature: 2
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0: function() {
      var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this.listener;
        completeResult = t1.result._zone.run$1$1(H.functionTypeCheck(t1.callback, {func: 1}), null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        if (_this.hasError) {
          t1 = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError").error;
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError");
        else
          t2.listenerValueOrError = new P.AsyncError(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (!!J.getInterceptor$(completeResult).$isFuture) {
        if (completeResult instanceof P._Future && completeResult._state >= 4) {
          if (completeResult._state === 8) {
            t1 = _this._box_0;
            t1.listenerValueOrError = H.interceptedTypeCheck(completeResult._resultOrListeners, "$isAsyncError");
            t1.listenerHasError = true;
          }
          return;
        }
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), null);
        t1.listenerHasError = false;
      }
    },
    $signature: 0
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1: function(_) {
      return this.originalSource;
    },
    $signature: 40
  };
  P._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0: function() {
      var e, s, t1, t2, t3, t4, exception, _this = this;
      try {
        t1 = _this.listener;
        t2 = H.getTypeArgumentByIndex(t1, 0);
        t3 = H.assertSubtypeOfRuntimeType(_this.sourceResult, t2);
        t4 = H.getTypeArgumentByIndex(t1, 1);
        _this._box_0.listenerValueOrError = t1.result._zone.runUnary$2$2(H.functionTypeCheck(t1.callback, {func: 1, ret: {futureOr: 1, type: t4}, args: [t2]}), t3, {futureOr: 1, type: t4}, t2);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = _this._box_0;
        t1.listenerValueOrError = new P.AsyncError(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 0
  };
  P._Future__propagateToListeners_handleError.prototype = {
    call$0: function() {
      var asyncError, e, s, t1, t2, exception, t3, t4, _this = this;
      try {
        asyncError = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError");
        t1 = _this.listener;
        if (H.boolConversionCheck(t1.matchesErrorTest$1(asyncError)) && t1.errorCallback != null) {
          t2 = _this._box_0;
          t2.listenerValueOrError = t1.handleError$1(asyncError);
          t2.listenerHasError = false;
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError");
        t2 = t1.error;
        t3 = e;
        t4 = _this._box_0;
        if (t2 == null ? t3 == null : t2 === t3)
          t4.listenerValueOrError = t1;
        else
          t4.listenerValueOrError = new P.AsyncError(e, s);
        t4.listenerHasError = true;
      }
    },
    $signature: 0
  };
  P._AsyncCallbackEntry.prototype = {};
  P.Stream.prototype = {
    map$1: function(_, convert) {
      var t1 = H.getRuntimeTypeArgument(this, "Stream", 0);
      return new P._MapStream(H.functionTypeCheck(convert, {func: 1, ret: null, args: [t1]}), this, [t1, null]);
    },
    get$length: function(_) {
      var t1 = {},
        future = new P._Future($.Zone__current, [P.int]);
      t1.count = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1, this), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    toList$0: function(_) {
      var t1 = H.getRuntimeTypeArgument(this, "Stream", 0),
        result = H.setRuntimeTypeInfo([], [t1]),
        future = new P._Future($.Zone__current, [[P.List, t1]]);
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(future, result), future.get$_completeError());
      return future;
    }
  };
  P.Stream_length_closure.prototype = {
    call$1: function(_) {
      H.assertSubtypeOfRuntimeType(_, H.getRuntimeTypeArgument(this.$this, "Stream", 0));
      ++this._box_0.count;
    },
    $signature: function() {
      return {func: 1, ret: P.Null, args: [H.getRuntimeTypeArgument(this.$this, "Stream", 0)]};
    }
  };
  P.Stream_length_closure0.prototype = {
    call$0: function() {
      this.future._complete$1(this._box_0.count);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 2
  };
  P.Stream_toList_closure.prototype = {
    call$1: function(data) {
      C.JSArray_methods.add$1(this.result, H.assertSubtypeOfRuntimeType(data, H.getRuntimeTypeArgument(this.$this, "Stream", 0)));
    },
    $signature: function() {
      return {func: 1, ret: P.Null, args: [H.getRuntimeTypeArgument(this.$this, "Stream", 0)]};
    }
  };
  P.Stream_toList_closure0.prototype = {
    call$0: function() {
      this.future._complete$1(this.result);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 2
  };
  P.StreamSubscription.prototype = {};
  P.StreamTransformerBase.prototype = {};
  P._ControllerStream.prototype = {
    get$hashCode: function(_) {
      return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return other instanceof P._ControllerStream && other._async$_controller === this._async$_controller;
    }
  };
  P._ControllerSubscription.prototype = {
    _onCancel$0: function() {
      return this._async$_controller._recordCancel$1(this);
    },
    _onPause$0: function() {
      H.assertSubtype(this, "$isStreamSubscription", [H.getTypeArgumentByIndex(this._async$_controller, 0)], "$asStreamSubscription");
    },
    _onResume$0: function() {
      H.assertSubtype(this, "$isStreamSubscription", [H.getTypeArgumentByIndex(this._async$_controller, 0)], "$asStreamSubscription");
    }
  };
  P._BufferingStreamSubscription.prototype = {
    _BufferingStreamSubscription$4: function(onData, onError, onDone, cancelOnError, $T) {
      var t2, handleError, handleDone, _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "_BufferingStreamSubscription", 0);
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
      t2 = _this._zone;
      t2.toString;
      _this.set$_async$_onData(H.functionTypeCheck(onData, {func: 1, ret: null, args: [t1]}));
      handleError = onError == null ? P.async___nullErrorHandler$closure() : onError;
      if (H.functionTypeTest(handleError, {func: 1, ret: -1, args: [P.Object, P.StackTrace]}))
        _this._onError = t2.registerBinaryCallback$3$1(handleError, null, P.Object, P.StackTrace);
      else if (H.functionTypeTest(handleError, {func: 1, ret: -1, args: [P.Object]}))
        _this._onError = H.functionTypeCheck(handleError, {func: 1, ret: null, args: [P.Object]});
      else
        H.throwExpression(P.ArgumentError$("handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace."));
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      handleDone = onDone == null ? P.async___nullDoneHandler$closure() : onDone;
      _this.set$_onDone(H.functionTypeCheck(handleDone, {func: 1, ret: -1}));
    },
    pause$0: function(_) {
      var t2, t3, _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t2 = (t1 + 128 | 4) >>> 0;
      _this._state = t2;
      if (t1 < 128 && _this._pending != null) {
        t3 = _this._pending;
        if (t3._state === 1)
          t3._state = 3;
      }
      if ((t1 & 4) === 0 && (t2 & 32) === 0)
        _this._guardCallback$1(_this.get$_onPause());
    },
    resume$0: function() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 = _this._state = t1 - 128;
        if (t1 < 128)
          if ((t1 & 64) !== 0 && _this._pending.lastPendingEvent != null)
            _this._pending.schedule$1(_this);
          else {
            t1 = (t1 & 4294967291) >>> 0;
            _this._state = t1;
            if ((t1 & 32) === 0)
              _this._guardCallback$1(_this.get$_onResume());
          }
      }
    },
    cancel$0: function() {
      var _this = this,
        t1 = (_this._state & 4294967279) >>> 0;
      _this._state = t1;
      if ((t1 & 8) === 0)
        _this._cancel$0();
      t1 = _this._cancelFuture;
      return t1 == null ? $.$get$Future__nullFuture() : t1;
    },
    _cancel$0: function() {
      var t2, _this = this,
        t1 = _this._state = (_this._state | 8) >>> 0;
      if ((t1 & 64) !== 0) {
        t2 = _this._pending;
        if (t2._state === 1)
          t2._state = 3;
      }
      if ((t1 & 32) === 0)
        _this.set$_pending(null);
      _this._cancelFuture = _this._onCancel$0();
    },
    _async$_add$1: function(data) {
      var t2, _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "_BufferingStreamSubscription", 0);
      H.assertSubtypeOfRuntimeType(data, t1);
      t2 = _this._state;
      if ((t2 & 8) !== 0)
        return;
      if (t2 < 32)
        _this._sendData$1(data);
      else
        _this._addPending$1(new P._DelayedData(data, [t1]));
    },
    _addError$2: function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new P._DelayedError(error, stackTrace));
    },
    _close$0: function() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      _this._state = t1;
      if (t1 < 32)
        _this._sendDone$0();
      else
        _this._addPending$1(C.C__DelayedDone);
    },
    _onPause$0: function() {
    },
    _onResume$0: function() {
    },
    _onCancel$0: function() {
      return;
    },
    _addPending$1: function($event) {
      var _this = this,
        t1 = [H.getRuntimeTypeArgument(_this, "_BufferingStreamSubscription", 0)],
        pending = H.assertSubtype(_this._pending, "$is_StreamImplEvents", t1, "$as_StreamImplEvents");
      if (pending == null) {
        pending = new P._StreamImplEvents(t1);
        _this.set$_pending(pending);
      }
      pending.add$1(0, $event);
      t1 = _this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        _this._state = t1;
        if (t1 < 128)
          _this._pending.schedule$1(_this);
      }
    },
    _sendData$1: function(data) {
      var t2, _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "_BufferingStreamSubscription", 0);
      H.assertSubtypeOfRuntimeType(data, t1);
      t2 = _this._state;
      _this._state = (t2 | 32) >>> 0;
      _this._zone.runUnaryGuarded$1$2(_this._async$_onData, data, t1);
      _this._state = (_this._state & 4294967263) >>> 0;
      _this._checkState$1((t2 & 4) !== 0);
    },
    _sendError$2: function(error, stackTrace) {
      var _this = this,
        t1 = _this._state,
        t2 = new P._BufferingStreamSubscription__sendError_sendError(_this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        _this._state = (t1 | 16) >>> 0;
        _this._cancel$0();
        t1 = _this._cancelFuture;
        if (t1 != null && t1 !== $.$get$Future__nullFuture())
          t1.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        _this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0: function() {
      var t2, _this = this,
        t1 = new P._BufferingStreamSubscription__sendDone_sendDone(_this);
      _this._cancel$0();
      _this._state = (_this._state | 16) >>> 0;
      t2 = _this._cancelFuture;
      if (t2 != null && t2 !== $.$get$Future__nullFuture())
        t2.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1: function(callback) {
      var t1, _this = this;
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      t1 = _this._state;
      _this._state = (t1 | 32) >>> 0;
      callback.call$0();
      _this._state = (_this._state & 4294967263) >>> 0;
      _this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1: function(wasInputPaused) {
      var t2, isInputPaused, _this = this,
        t1 = _this._state;
      if ((t1 & 64) !== 0 && _this._pending.lastPendingEvent == null) {
        t1 = _this._state = (t1 & 4294967231) >>> 0;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t2 = _this._pending;
            t2 = t2 == null || t2.lastPendingEvent == null;
          } else
            t2 = false;
        else
          t2 = false;
        if (t2) {
          t1 = (t1 & 4294967291) >>> 0;
          _this._state = t1;
        }
      }
      for (; true; wasInputPaused = isInputPaused) {
        if ((t1 & 8) !== 0) {
          _this.set$_pending(null);
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        _this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          _this._onPause$0();
        else
          _this._onResume$0();
        t1 = (_this._state & 4294967263) >>> 0;
        _this._state = t1;
      }
      if ((t1 & 64) !== 0 && t1 < 128)
        _this._pending.schedule$1(_this);
    },
    set$_async$_onData: function(_onData) {
      this._async$_onData = H.functionTypeCheck(_onData, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "_BufferingStreamSubscription", 0)]});
    },
    set$_onDone: function(_onDone) {
      this._onDone = H.functionTypeCheck(_onDone, {func: 1, ret: -1});
    },
    set$_pending: function(_pending) {
      this._pending = H.assertSubtype(_pending, "$is_PendingEvents", [H.getRuntimeTypeArgument(this, "_BufferingStreamSubscription", 0)], "$as_PendingEvents");
    },
    $isStreamSubscription: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1
  };
  P._BufferingStreamSubscription__sendError_sendError.prototype = {
    call$0: function() {
      var onError, t3, t4,
        t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 32) >>> 0;
      onError = t1._onError;
      t2 = this.error;
      t3 = P.Object;
      t4 = t1._zone;
      if (H.functionTypeTest(onError, {func: 1, ret: -1, args: [P.Object, P.StackTrace]}))
        t4.runBinaryGuarded$2$3(onError, t2, this.stackTrace, t3, P.StackTrace);
      else
        t4.runUnaryGuarded$1$2(H.functionTypeCheck(t1._onError, {func: 1, ret: -1, args: [P.Object]}), t2, t3);
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    $signature: 0
  };
  P._BufferingStreamSubscription__sendDone_sendDone.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    $signature: 0
  };
  P._StreamImpl.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]});
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      return this._async$_controller._subscribe$4(H.functionTypeCheck(onData, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]}), onError, onDone, true === cancelOnError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  };
  P._DelayedEvent.prototype = {
    set$next: function(next) {
      this.next = H.interceptedTypeCheck(next, "$is_DelayedEvent");
    },
    get$next: function() {
      return this.next;
    }
  };
  P._DelayedData.prototype = {
    perform$1: function(dispatch) {
      H.assertSubtype(dispatch, "$is_EventDispatch", this.$ti, "$as_EventDispatch")._sendData$1(this.value);
    }
  };
  P._DelayedError.prototype = {
    perform$1: function(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    },
    $as_DelayedEvent: function() {
    }
  };
  P._DelayedDone.prototype = {
    perform$1: function(dispatch) {
      dispatch._sendDone$0();
    },
    get$next: function() {
      return;
    },
    set$next: function(_) {
      throw H.wrapException(P.StateError$("No events after a done."));
    },
    $is_DelayedEvent: 1,
    $as_DelayedEvent: function() {
    }
  };
  P._PendingEvents.prototype = {
    schedule$1: function(dispatch) {
      var t1, _this = this;
      H.assertSubtype(dispatch, "$is_EventDispatch", _this.$ti, "$as_EventDispatch");
      t1 = _this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        _this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(_this, dispatch));
      _this._state = 1;
    }
  };
  P._PendingEvents_schedule_closure.prototype = {
    call$0: function() {
      var t2, $event, t3,
        t1 = this.$this,
        oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t2 = H.assertSubtype(this.dispatch, "$is_EventDispatch", [H.getTypeArgumentByIndex(t1, 0)], "$as_EventDispatch");
      $event = t1.firstPendingEvent;
      t3 = $event.get$next();
      t1.firstPendingEvent = t3;
      if (t3 == null)
        t1.lastPendingEvent = null;
      $event.perform$1(t2);
    },
    $signature: 2
  };
  P._StreamImplEvents.prototype = {
    add$1: function(_, $event) {
      var t1, _this = this;
      H.interceptedTypeCheck($event, "$is_DelayedEvent");
      t1 = _this.lastPendingEvent;
      if (t1 == null)
        _this.firstPendingEvent = _this.lastPendingEvent = $event;
      else {
        t1.set$next($event);
        _this.lastPendingEvent = $event;
      }
    }
  };
  P._DoneStreamSubscription.prototype = {
    _schedule$0: function() {
      var t1, _this = this;
      if ((_this._state & 2) !== 0)
        return;
      t1 = _this._zone;
      t1.toString;
      P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(_this.get$_sendDone(), {func: 1, ret: -1}));
      _this._state = (_this._state | 2) >>> 0;
    },
    pause$0: function(_) {
      this._state += 4;
    },
    resume$0: function() {
      var t1 = this._state;
      if (t1 >= 4) {
        t1 = this._state = t1 - 4;
        if (t1 < 4 && (t1 & 1) === 0)
          this._schedule$0();
      }
    },
    cancel$0: function() {
      return $.$get$Future__nullFuture();
    },
    _sendDone$0: function() {
      var _this = this,
        t1 = _this._state = (_this._state & 4294967293) >>> 0;
      if (t1 >= 4)
        return;
      _this._state = (t1 | 1) >>> 0;
      _this._zone.runGuarded$1(_this._onDone);
    },
    $isStreamSubscription: 1
  };
  P._ForwardingStream.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t2, t3, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 1);
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      cancelOnError = true === cancelOnError;
      t2 = $.Zone__current;
      t3 = cancelOnError ? 1 : 0;
      t3 = new P._ForwardingStreamSubscription(_this, t2, t3, _this.$ti);
      t3._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, t1);
      t3.set$_subscription(_this._async$_source.listen$3$onDone$onError(t3.get$_handleData(), t3.get$_handleDone(), t3.get$_handleError()));
      return t3;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    $asStream: function($S, $T) {
      return [$T];
    }
  };
  P._ForwardingStreamSubscription.prototype = {
    _async$_add$1: function(data) {
      H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(this, 1));
      if ((this._state & 2) !== 0)
        return;
      this.super$_BufferingStreamSubscription$_add(data);
    },
    _addError$2: function(error, stackTrace) {
      if ((this._state & 2) !== 0)
        return;
      this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
    },
    _onPause$0: function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.pause$0(0);
    },
    _onResume$0: function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.resume$0();
    },
    _onCancel$0: function() {
      var t1 = this._subscription;
      if (t1 != null) {
        this.set$_subscription(null);
        return t1.cancel$0();
      }
      return;
    },
    _handleData$1: function(data) {
      this._stream._handleData$2(H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(this, 0)), this);
    },
    _handleError$2: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      H.assertSubtype(this, "$is_EventSink", [H.getTypeArgumentByIndex(this._stream, 1)], "$as_EventSink")._addError$2(error, stackTrace);
    },
    _handleDone$0: function() {
      H.assertSubtype(this, "$is_EventSink", [H.getTypeArgumentByIndex(this._stream, 1)], "$as_EventSink")._close$0();
    },
    set$_subscription: function(_subscription) {
      this._subscription = H.assertSubtype(_subscription, "$isStreamSubscription", [H.getTypeArgumentByIndex(this, 0)], "$asStreamSubscription");
    },
    $asStreamSubscription: function($S, $T) {
      return [$T];
    },
    $as_EventSink: function($S, $T) {
      return [$T];
    },
    $as_EventDispatch: function($S, $T) {
      return [$T];
    },
    $as_BufferingStreamSubscription: function($S, $T) {
      return [$T];
    }
  };
  P._MapStream.prototype = {
    _handleData$2: function(inputEvent, sink) {
      var outputEvent, e, s, exception;
      H.assertSubtypeOfRuntimeType(inputEvent, H.getTypeArgumentByIndex(this, 0));
      H.assertSubtype(sink, "$is_EventSink", [H.getTypeArgumentByIndex(this, 1)], "$as_EventSink");
      outputEvent = null;
      try {
        outputEvent = this._transform.call$1(inputEvent);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        $.Zone__current.toString;
        sink._addError$2(e, s);
        return;
      }
      sink._async$_add$1(outputEvent);
    }
  };
  P.AsyncError.prototype = {
    toString$0: function(_) {
      return H.S(this.error);
    },
    $isError: 1
  };
  P._Zone.prototype = {$isZone: 1};
  P._rootHandleUncaughtError_closure.prototype = {
    call$0: function() {
      var error,
        t1 = this._box_0,
        t2 = t1.error;
      t1 = t2 == null ? t1.error = new P.NullThrownError() : t2;
      t2 = this.stackTrace;
      if (t2 == null)
        throw H.wrapException(t1);
      error = H.wrapException(t1);
      error.stack = t2.toString$0(0);
      throw error;
    },
    $signature: 2
  };
  P._RootZone.prototype = {
    runGuarded$1: function(f) {
      var e, s, exception, _null = null;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        P._rootRun(_null, _null, this, f, -1);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    runUnaryGuarded$1$2: function(f, arg, $T) {
      var e, s, exception, _null = null;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        P._rootRunUnary(_null, _null, this, f, arg, -1, $T);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    runBinaryGuarded$2$3: function(f, arg1, arg2, T1, T2) {
      var e, s, exception, _null = null;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$2(arg1, arg2);
          return;
        }
        P._rootRunBinary(_null, _null, this, f, arg1, arg2, -1, T1, T2);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    bindCallback$1$1: function(f, $R) {
      return new P._RootZone_bindCallback_closure(this, H.functionTypeCheck(f, {func: 1, ret: $R}), $R);
    },
    bindCallbackGuarded$1: function(f) {
      return new P._RootZone_bindCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1}));
    },
    bindUnaryCallbackGuarded$1$1: function(f, $T) {
      return new P._RootZone_bindUnaryCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]}), $T);
    },
    $index: function(_, key) {
      return;
    },
    run$1$1: function(f, $R) {
      H.functionTypeCheck(f, {func: 1, ret: $R});
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2: function(f, arg, $R, $T) {
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerBinaryCallback$3$1: function(f, $R, T1, T2) {
      return H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
    }
  };
  P._RootZone_bindCallback_closure.prototype = {
    call$0: function() {
      return this.$this.run$1$1(this.f, this.R);
    },
    $signature: function() {
      return {func: 1, ret: this.R};
    }
  };
  P._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0: function() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 0
  };
  P._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1: function(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, H.assertSubtypeOfRuntimeType(arg, t1), t1);
    },
    $signature: function() {
      return {func: 1, ret: -1, args: [this.T]};
    }
  };
  P._LinkedHashSet.prototype = {
    get$iterator: function(_) {
      var _this = this,
        t1 = new P._LinkedHashSetIterator(_this, _this._collection$_modifications, _this.$ti);
      t1._collection$_cell = _this._collection$_first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    contains$1: function(_, object) {
      var strings, t1;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._collection$_strings;
        if (strings == null)
          return false;
        return H.interceptedTypeCheck(strings[object], "$is_LinkedHashSetCell") != null;
      } else {
        t1 = this._contains$1(object);
        return t1;
      }
    },
    _contains$1: function(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, object), object) >= 0;
    },
    add$1: function(_, element) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      if (typeof element === "string" && element !== "__proto__") {
        strings = _this._collection$_strings;
        return _this._collection$_addHashTableEntry$2(strings == null ? _this._collection$_strings = P._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element === "number" && (element & 1073741823) === element) {
        nums = _this._collection$_nums;
        return _this._collection$_addHashTableEntry$2(nums == null ? _this._collection$_nums = P._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(element);
    },
    _add$1: function(element) {
      var rest, hash, bucket, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._collection$_newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._collection$_newLinkedCell$1(element));
      }
      return true;
    },
    remove$1: function(_, object) {
      var _this = this;
      if (typeof object === "string" && object !== "__proto__")
        return _this._removeHashTableEntry$2(_this._collection$_strings, object);
      else if (typeof object === "number" && (object & 1073741823) === object)
        return _this._removeHashTableEntry$2(_this._collection$_nums, object);
      else
        return _this._remove$1(object);
    },
    _remove$1: function(object) {
      var bucket, index, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return false;
      bucket = _this._getBucket$2(rest, object);
      index = _this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      _this._collection$_unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    },
    _collection$_addHashTableEntry$2: function(table, element) {
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
      if (H.interceptedTypeCheck(table[element], "$is_LinkedHashSetCell") != null)
        return false;
      table[element] = this._collection$_newLinkedCell$1(element);
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = H.interceptedTypeCheck(table[element], "$is_LinkedHashSetCell");
      if (cell == null)
        return false;
      this._collection$_unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _collection$_modified$0: function() {
      this._collection$_modifications = 1073741823 & this._collection$_modifications + 1;
    },
    _collection$_newLinkedCell$1: function(element) {
      var last, _this = this,
        cell = new P._LinkedHashSetCell(H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0)));
      if (_this._collection$_first == null)
        _this._collection$_first = _this._collection$_last = cell;
      else {
        last = _this._collection$_last;
        cell._collection$_previous = last;
        _this._collection$_last = last._collection$_next = cell;
      }
      ++_this._collection$_length;
      _this._collection$_modified$0();
      return cell;
    },
    _collection$_unlinkCell$1: function(cell) {
      var _this = this,
        previous = cell._collection$_previous,
        next = cell._collection$_next;
      if (previous == null)
        _this._collection$_first = next;
      else
        previous._collection$_next = next;
      if (next == null)
        _this._collection$_last = previous;
      else
        next._collection$_previous = previous;
      --_this._collection$_length;
      _this._collection$_modified$0();
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _getBucket$2: function(table, element) {
      return table[this._computeHashCode$1(element)];
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element))
          return i;
      return -1;
    }
  };
  P._LinkedHashSetCell.prototype = {};
  P._LinkedHashSetIterator.prototype = {
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this._set;
      if (_this._collection$_modifications !== t1._collection$_modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = _this._collection$_cell;
        if (t1 == null) {
          _this.set$_collection$_current(null);
          return false;
        } else {
          _this.set$_collection$_current(H.assertSubtypeOfRuntimeType(t1._element, H.getTypeArgumentByIndex(_this, 0)));
          _this._collection$_cell = _this._collection$_cell._collection$_next;
          return true;
        }
      }
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  P.ListBase.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1};
  P.ListMixin.prototype = {
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1: function(receiver, action) {
      var $length, i, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)]});
      $length = _this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        action.call$1(_this.$index(receiver, i));
        if ($length !== _this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty: function(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty: function(receiver) {
      return !this.get$isEmpty(receiver);
    },
    where$1: function(receiver, test) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      return new H.WhereIterable(receiver, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), [t1]);
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      return new H.MappedListIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    toList$1$growable: function(receiver, growable) {
      var i, _this = this,
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, _this.get$length(receiver));
      for (i = 0; i < _this.get$length(receiver); ++i)
        C.JSArray_methods.$indexSet(result, i, _this.$index(receiver, i));
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(receiver, element) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0));
      t1 = _this.get$length(receiver);
      _this.set$length(receiver, t1 + 1);
      _this.$indexSet(receiver, t1, element);
    },
    _closeGap$2: function(receiver, start, end) {
      var i, _this = this,
        $length = _this.get$length(receiver),
        size = end - start;
      for (i = end; i < $length; ++i)
        _this.$indexSet(receiver, i - size, _this.$index(receiver, i));
      _this.set$length(receiver, $length - size);
    },
    sort$1: function(receiver, compare) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      H.Sort_sort(receiver, compare, t1);
    },
    removeAt$1: function(receiver, index) {
      var result = this.$index(receiver, index);
      this._closeGap$2(receiver, index, index + 1);
      return result;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    }
  };
  P.MapBase.prototype = {};
  P.MapBase_mapToString_closure.prototype = {
    call$2: function(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += H.S(k);
      t1._contents = t2 + ": ";
      t1._contents += H.S(v);
    },
    $signature: 10
  };
  P.MapMixin.prototype = {
    forEach$1: function(_, action) {
      var t1, key, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(_this, "MapMixin", 0), H.getRuntimeTypeArgument(_this, "MapMixin", 1)]});
      for (t1 = J.get$iterator$ax(_this.get$keys()); t1.moveNext$0();) {
        key = t1.get$current();
        action.call$2(key, _this.$index(0, key));
      }
    },
    map$2$1: function(_, transform, K2, V2) {
      var result, t1, key, entry, _this = this;
      H.functionTypeCheck(transform, {func: 1, ret: [P.MapEntry, K2, V2], args: [H.getRuntimeTypeArgument(_this, "MapMixin", 0), H.getRuntimeTypeArgument(_this, "MapMixin", 1)]});
      result = P.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      for (t1 = J.get$iterator$ax(_this.get$keys()); t1.moveNext$0();) {
        key = t1.get$current();
        entry = transform.call$2(key, _this.$index(0, key));
        result.$indexSet(0, C.JSNull_methods.get$key(entry), entry.get$value(entry));
      }
      return result;
    },
    map$1: function($receiver, transform) {
      return this.map$2$1($receiver, transform, null, null);
    },
    containsKey$1: function(key) {
      return J.contains$1$asx(this.get$keys(), key);
    },
    get$length: function(_) {
      return J.get$length$asx(this.get$keys());
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.get$keys());
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  P._UnmodifiableMapMixin.prototype = {
    $indexSet: function(_, key, value) {
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
    }
  };
  P.MapView.prototype = {
    $index: function(_, key) {
      return this._collection$_map.$index(0, key);
    },
    $indexSet: function(_, key, value) {
      this._collection$_map.$indexSet(0, H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)));
    },
    containsKey$1: function(key) {
      return this._collection$_map.containsKey$1(key);
    },
    forEach$1: function(_, action) {
      this._collection$_map.forEach$1(0, H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]}));
    },
    get$isEmpty: function(_) {
      return this._collection$_map._length === 0;
    },
    get$length: function(_) {
      return this._collection$_map._length;
    },
    get$keys: function() {
      var t1 = this._collection$_map;
      return new H.LinkedHashMapKeyIterable(t1, [H.getTypeArgumentByIndex(t1, 0)]);
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this._collection$_map);
    },
    map$2$1: function(_, transform, K2, V2) {
      return this._collection$_map.map$2$1(0, H.functionTypeCheck(transform, {func: 1, ret: [P.MapEntry, K2, V2], args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]}), K2, V2);
    },
    map$1: function($receiver, transform) {
      return this.map$2$1($receiver, transform, null, null);
    },
    $isMap: 1
  };
  P.UnmodifiableMapView.prototype = {};
  P.SetMixin.prototype = {
    toList$1$growable: function(_, growable) {
      var t1, i, i0, _this = this,
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(_this, "SetMixin", 0)]);
      C.JSArray_methods.set$length(result, _this.get$length(_this));
      for (t1 = _this.readClasses$0(), t1 = P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H.getTypeArgumentByIndex(t1, 0)), i = 0; t1.moveNext$0(); i = i0) {
        i0 = i + 1;
        C.JSArray_methods.$indexSet(result, i, t1._collection$_current);
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getRuntimeTypeArgument(this, "SetMixin", 0);
      return new H.EfficientLengthMappedIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element;
      P.RangeError_checkNotNegative(index, "index");
      for (t1 = this.readClasses$0(), t1 = P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H.getTypeArgumentByIndex(t1, 0)), elementIndex = 0; t1.moveNext$0();) {
        element = t1._collection$_current;
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
    }
  };
  P.SetBase.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isSet: 1};
  P._SetBase.prototype = {
    addAll$1: function(_, elements) {
      var t1;
      for (t1 = J.get$iterator$ax(H.assertSubtype(elements, "$isIterable", this.$ti, "$asIterable")); t1.moveNext$0();)
        this.add$1(0, t1.get$current());
    },
    toList$1$growable: function(_, growable) {
      var t1, i, i0, _this = this,
        result = H.setRuntimeTypeInfo([], _this.$ti);
      C.JSArray_methods.set$length(result, _this._collection$_length);
      for (t1 = P._LinkedHashSetIterator$(_this, _this._collection$_modifications, H.getTypeArgumentByIndex(_this, 0)), i = 0; t1.moveNext$0(); i = i0) {
        i0 = i + 1;
        C.JSArray_methods.$indexSet(result, i, t1._collection$_current);
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return new H.EfficientLengthMappedIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    join$1: function(_, separator) {
      var t1,
        iterator = P._LinkedHashSetIterator$(this, this._collection$_modifications, H.getTypeArgumentByIndex(this, 0));
      if (!iterator.moveNext$0())
        return "";
      if (separator === "") {
        t1 = "";
        do
          t1 += H.S(iterator._collection$_current);
        while (iterator.moveNext$0());
      } else {
        t1 = H.S(iterator._collection$_current);
        for (; iterator.moveNext$0();)
          t1 = t1 + separator + H.S(iterator._collection$_current);
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element, _this = this;
      P.RangeError_checkNotNegative(index, "index");
      for (t1 = P._LinkedHashSetIterator$(_this, _this._collection$_modifications, H.getTypeArgumentByIndex(_this, 0)), elementIndex = 0; t1.moveNext$0();) {
        element = t1._collection$_current;
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, _this, "index", null, elementIndex));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  P._ListBase_Object_ListMixin.prototype = {};
  P._SetBase_Object_SetMixin.prototype = {};
  P._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  P._JsonMap.prototype = {
    $index: function(_, key) {
      var result,
        t1 = this._processed;
      if (t1 == null)
        return this._data.$index(0, key);
      else if (typeof key !== "string")
        return;
      else {
        result = t1[key];
        return typeof result == "undefined" ? this._process$1(key) : result;
      }
    },
    get$length: function(_) {
      return this._processed == null ? this._data._length : this._computeKeys$0().length;
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$keys: function() {
      if (this._processed == null) {
        var t1 = this._data;
        return new H.LinkedHashMapKeyIterable(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      }
      return new P._JsonMapKeyIterable(this);
    },
    $indexSet: function(_, key, value) {
      var processed, original, _this = this;
      if (_this._processed == null)
        _this._data.$indexSet(0, key, value);
      else if (_this.containsKey$1(key)) {
        processed = _this._processed;
        processed[key] = value;
        original = _this._original;
        if (original == null ? processed != null : original !== processed)
          original[key] = null;
      } else
        _this._upgrade$0().$indexSet(0, key, value);
    },
    containsKey$1: function(key) {
      if (this._processed == null)
        return this._data.containsKey$1(key);
      return Object.prototype.hasOwnProperty.call(this._original, key);
    },
    forEach$1: function(_, f) {
      var keys, i, key, value, _this = this;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      if (_this._processed == null)
        return _this._data.forEach$1(0, f);
      keys = _this._computeKeys$0();
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        value = _this._processed[key];
        if (typeof value == "undefined") {
          value = P._convertJsonToDartLazy(_this._original[key]);
          _this._processed[key] = value;
        }
        f.call$2(key, value);
        if (keys !== _this._data)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
    },
    _computeKeys$0: function() {
      var keys = H.listTypeCheck(this._data);
      if (keys == null)
        keys = this._data = H.setRuntimeTypeInfo(Object.keys(this._original), [P.String]);
      return keys;
    },
    _upgrade$0: function() {
      var result, keys, i, t1, key, _this = this;
      if (_this._processed == null)
        return _this._data;
      result = P.LinkedHashMap_LinkedHashMap$_empty(P.String, null);
      keys = _this._computeKeys$0();
      for (i = 0; t1 = keys.length, i < t1; ++i) {
        key = keys[i];
        result.$indexSet(0, key, _this.$index(0, key));
      }
      if (t1 === 0)
        C.JSArray_methods.add$1(keys, null);
      else
        C.JSArray_methods.set$length(keys, 0);
      _this._original = _this._processed = null;
      return _this._data = result;
    },
    _process$1: function(key) {
      var result;
      if (!Object.prototype.hasOwnProperty.call(this._original, key))
        return;
      result = P._convertJsonToDartLazy(this._original[key]);
      return this._processed[key] = result;
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $asMap: function() {
      return [P.String, null];
    }
  };
  P._JsonMapKeyIterable.prototype = {
    get$length: function(_) {
      var t1 = this._parent;
      return t1.get$length(t1);
    },
    elementAt$1: function(_, index) {
      var t1 = this._parent;
      if (t1._processed == null)
        t1 = t1.get$keys().elementAt$1(0, index);
      else {
        t1 = t1._computeKeys$0();
        if (index < 0 || index >= t1.length)
          return H.ioore(t1, index);
        t1 = t1[index];
      }
      return t1;
    },
    get$iterator: function(_) {
      var t1 = this._parent;
      if (t1._processed == null) {
        t1 = t1.get$keys();
        t1 = t1.get$iterator(t1);
      } else {
        t1 = t1._computeKeys$0();
        t1 = new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]);
      }
      return t1;
    },
    contains$1: function(_, key) {
      return this._parent.containsKey$1(key);
    },
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $asListIterable: function() {
      return [P.String];
    },
    $asIterable: function() {
      return [P.String];
    }
  };
  P.Codec.prototype = {};
  P.Converter.prototype = {};
  P.JsonUnsupportedObjectError.prototype = {
    toString$0: function(_) {
      var safeString = P.Error_safeToString(this.unsupportedObject);
      return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + safeString;
    }
  };
  P.JsonCyclicError.prototype = {
    toString$0: function(_) {
      return "Cyclic error in JSON stringify";
    }
  };
  P.JsonCodec.prototype = {
    decode$2$reviver: function(_, source, reviver) {
      var t1 = P._parseJson(source, this.get$decoder()._reviver);
      return t1;
    },
    encode$2$toEncodable: function(value, toEncodable) {
      var t1 = P._JsonStringStringifier_stringify(value, this.get$encoder()._toEncodable, null);
      return t1;
    },
    get$encoder: function() {
      return C.JsonEncoder_null;
    },
    get$decoder: function() {
      return C.JsonDecoder_null;
    }
  };
  P.JsonEncoder.prototype = {
    $asConverter: function() {
      return [P.Object, P.String];
    }
  };
  P.JsonDecoder.prototype = {
    $asConverter: function() {
      return [P.String, P.Object];
    }
  };
  P._JsonStringifier.prototype = {
    writeStringContent$1: function(s) {
      var t1, t2, offset, i, charCode, t3,
        $length = s.length;
      for (t1 = J.getInterceptor$s(s), t2 = this._sink, offset = 0, i = 0; i < $length; ++i) {
        charCode = t1._codeUnitAt$1(s, i);
        if (charCode > 92)
          continue;
        if (charCode < 32) {
          if (i > offset)
            t2._contents += C.JSString_methods.substring$2(s, offset, i);
          offset = i + 1;
          t2._contents += H.Primitives_stringFromCharCode(92);
          switch (charCode) {
            case 8:
              t2._contents += H.Primitives_stringFromCharCode(98);
              break;
            case 9:
              t2._contents += H.Primitives_stringFromCharCode(116);
              break;
            case 10:
              t2._contents += H.Primitives_stringFromCharCode(110);
              break;
            case 12:
              t2._contents += H.Primitives_stringFromCharCode(102);
              break;
            case 13:
              t2._contents += H.Primitives_stringFromCharCode(114);
              break;
            default:
              t2._contents += H.Primitives_stringFromCharCode(117);
              t2._contents += H.Primitives_stringFromCharCode(48);
              t2._contents += H.Primitives_stringFromCharCode(48);
              t3 = charCode >>> 4 & 15;
              t2._contents += H.Primitives_stringFromCharCode(t3 < 10 ? 48 + t3 : 87 + t3);
              t3 = charCode & 15;
              t2._contents += H.Primitives_stringFromCharCode(t3 < 10 ? 48 + t3 : 87 + t3);
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            t2._contents += C.JSString_methods.substring$2(s, offset, i);
          offset = i + 1;
          t2._contents += H.Primitives_stringFromCharCode(92);
          t2._contents += H.Primitives_stringFromCharCode(charCode);
        }
      }
      if (offset === 0)
        t2._contents += H.S(s);
      else if (offset < $length)
        t2._contents += t1.substring$2(s, offset, $length);
    },
    _checkCycle$1: function(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw H.wrapException(new P.JsonCyclicError(object, null));
      }
      C.JSArray_methods.add$1(t1, object);
    },
    writeObject$1: function(object) {
      var customJson, e, t1, exception, _this = this;
      if (_this.writeJsonValue$1(object))
        return;
      _this._checkCycle$1(object);
      try {
        customJson = _this._toEncodable.call$1(object);
        if (!_this.writeJsonValue$1(customJson)) {
          t1 = P.JsonUnsupportedObjectError$(object, null, _this.get$_partialResult());
          throw H.wrapException(t1);
        }
        t1 = _this._seen;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.JsonUnsupportedObjectError$(object, e, _this.get$_partialResult());
        throw H.wrapException(t1);
      }
    },
    writeJsonValue$1: function(object) {
      var t1, success, _this = this;
      if (typeof object === "number") {
        if (!isFinite(object))
          return false;
        _this._sink._contents += C.JSNumber_methods.toString$0(object);
        return true;
      } else if (object === true) {
        _this._sink._contents += "true";
        return true;
      } else if (object === false) {
        _this._sink._contents += "false";
        return true;
      } else if (object == null) {
        _this._sink._contents += "null";
        return true;
      } else if (typeof object === "string") {
        t1 = _this._sink;
        t1._contents += '"';
        _this.writeStringContent$1(object);
        t1._contents += '"';
        return true;
      } else {
        t1 = J.getInterceptor$(object);
        if (!!t1.$isList) {
          _this._checkCycle$1(object);
          _this.writeList$1(object);
          t1 = _this._seen;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
          return true;
        } else if (!!t1.$isMap) {
          _this._checkCycle$1(object);
          success = _this.writeMap$1(object);
          t1 = _this._seen;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
          return success;
        } else
          return false;
      }
    },
    writeList$1: function(list) {
      var t2, i,
        t1 = this._sink;
      t1._contents += "[";
      t2 = J.getInterceptor$asx(list);
      if (t2.get$isNotEmpty(list)) {
        this.writeObject$1(t2.$index(list, 0));
        for (i = 1; i < t2.get$length(list); ++i) {
          t1._contents += ",";
          this.writeObject$1(t2.$index(list, i));
        }
      }
      t1._contents += "]";
    },
    writeMap$1: function(map) {
      var t1, keyValueList, i, t2, separator, t3, _this = this, _box_0 = {};
      if (map.get$isEmpty(map)) {
        _this._sink._contents += "{}";
        return true;
      }
      t1 = map.get$length(map) * 2;
      keyValueList = new Array(t1);
      keyValueList.fixed$length = Array;
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      map.forEach$1(0, new P._JsonStringifier_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      t2 = _this._sink;
      t2._contents += "{";
      for (separator = '"'; i < t1; i += 2, separator = ',"') {
        t2._contents += separator;
        _this.writeStringContent$1(H.stringTypeCheck(keyValueList[i]));
        t2._contents += '":';
        t3 = i + 1;
        if (t3 >= t1)
          return H.ioore(keyValueList, t3);
        _this.writeObject$1(keyValueList[t3]);
      }
      t2._contents += "}";
      return true;
    }
  };
  P._JsonStringifier_writeMap_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2;
      if (typeof key !== "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      C.JSArray_methods.$indexSet(t1, t2.i++, key);
      C.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 10
  };
  P._JsonStringStringifier.prototype = {
    get$_partialResult: function() {
      var t1 = this._sink._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  P.NoSuchMethodError_toString_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2, t3;
      H.interceptedTypeCheck(key, "$isSymbol0");
      t1 = this.sb;
      t2 = this._box_0;
      t1._contents += t2.comma;
      t3 = t1._contents += H.S(key.__internal$_name);
      t1._contents = t3 + ": ";
      t1._contents += P.Error_safeToString(value);
      t2.comma = ", ";
    },
    $signature: 30
  };
  P.bool.prototype = {};
  P.DateTime.prototype = {
    add$1: function(_, duration) {
      return P.DateTime$_withValue(C.JSInt_methods.$add(this._value, H.interceptedTypeCheck(duration, "$isDuration").get$inMilliseconds()), false);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.DateTime && this._value === other._value && true;
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._value, H.interceptedTypeCheck(other, "$isDateTime")._value);
    },
    get$hashCode: function(_) {
      var t1 = this._value;
      return (t1 ^ C.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toString$0: function(_) {
      var _this = this,
        y = P.DateTime__fourDigits(H.Primitives_getYear(_this)),
        m = P.DateTime__twoDigits(H.Primitives_getMonth(_this)),
        d = P.DateTime__twoDigits(H.Primitives_getDay(_this)),
        h = P.DateTime__twoDigits(H.Primitives_getHours(_this)),
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(_this)),
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(_this)),
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(_this)),
        t1 = y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
      return t1;
    }
  };
  P.double.prototype = {};
  P.Error.prototype = {};
  P.AssertionError.prototype = {
    toString$0: function(_) {
      return "Assertion failed";
    }
  };
  P.NullThrownError.prototype = {
    toString$0: function(_) {
      return "Throw of null.";
    }
  };
  P.ArgumentError.prototype = {
    get$_errorName: function() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation: function() {
      return "";
    },
    toString$0: function(_) {
      var message, prefix, explanation, errorValue, _this = this,
        t1 = _this.name,
        nameString = t1 != null ? " (" + t1 + ")" : "";
      t1 = _this.message;
      message = t1 == null ? "" : ": " + H.S(t1);
      prefix = _this.get$_errorName() + nameString + message;
      if (!_this._hasValue)
        return prefix;
      explanation = _this.get$_errorExplanation();
      errorValue = P.Error_safeToString(_this.invalidValue);
      return prefix + explanation + ": " + errorValue;
    }
  };
  P.RangeError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var explanation, t2,
        t1 = this.start;
      if (t1 == null) {
        t1 = this.end;
        explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
      } else {
        t2 = this.end;
        if (t2 == null)
          explanation = ": Not greater than or equal to " + H.S(t1);
        else if (t2 > t1)
          explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
        else
          explanation = t2 < t1 ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
      }
      return explanation;
    }
  };
  P.IndexError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var t1,
        invalidValue = H.intTypeCheck(this.invalidValue);
      if (typeof invalidValue !== "number")
        return invalidValue.$lt();
      if (invalidValue < 0)
        return ": index must not be negative";
      t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + H.S(t1);
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.NoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t1, t2, _i, t3, t4, argument, receiverText, actualParameters, _this = this, _box_0 = {},
        sb = new P.StringBuffer("");
      _box_0.comma = "";
      for (t1 = _this._core$_arguments, t2 = t1.length, _i = 0, t3 = "", t4 = ""; _i < t2; ++_i, t4 = ", ") {
        argument = t1[_i];
        sb._contents = t3 + t4;
        t3 = sb._contents += P.Error_safeToString(argument);
        _box_0.comma = ", ";
      }
      _this._namedArguments.forEach$1(0, new P.NoSuchMethodError_toString_closure(_box_0, sb));
      receiverText = P.Error_safeToString(_this._core$_receiver);
      actualParameters = sb.toString$0(0);
      t1 = "NoSuchMethodError: method not found: '" + H.S(_this._core$_memberName.__internal$_name) + "'\nReceiver: " + receiverText + "\nArguments: [" + actualParameters + "]";
      return t1;
    }
  };
  P.UnsupportedError.prototype = {
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  P.UnimplementedError.prototype = {
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + t1 : "UnimplementedError";
    }
  };
  P.StateError.prototype = {
    toString$0: function(_) {
      return "Bad state: " + this.message;
    }
  };
  P.ConcurrentModificationError.prototype = {
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + P.Error_safeToString(t1) + ".";
    }
  };
  P.OutOfMemoryError.prototype = {
    toString$0: function(_) {
      return "Out of Memory";
    },
    $isError: 1
  };
  P.StackOverflowError.prototype = {
    toString$0: function(_) {
      return "Stack Overflow";
    },
    $isError: 1
  };
  P.CyclicInitializationError.prototype = {
    toString$0: function(_) {
      var t1 = this.variableName;
      return t1 == null ? "Reading static variable during its initialization" : "Reading static variable '" + t1 + "' during its initialization";
    }
  };
  P._Exception.prototype = {
    toString$0: function(_) {
      return "Exception: " + this.message;
    },
    $isException: 1
  };
  P.FormatException.prototype = {
    toString$0: function(_) {
      var source,
        t1 = this.message,
        report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException",
        objectSource = this.source;
      if (typeof objectSource === "string") {
        source = objectSource.length > 78 ? C.JSString_methods.substring$2(objectSource, 0, 75) + "..." : objectSource;
        return report + "\n" + source;
      } else
        return report;
    },
    $isException: 1
  };
  P.Function.prototype = {};
  P.int.prototype = {};
  P.Iterable.prototype = {
    map$1$1: function(_, f, $T) {
      var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      return H.MappedIterable_MappedIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    where$1: function(_, test) {
      var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      return new H.WhereIterable(this, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), [t1]);
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, true, H.getRuntimeTypeArgument(this, "Iterable", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current();
    },
    get$single: function(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      result = it.get$current();
      if (it.moveNext$0())
        throw H.wrapException(H.IterableElementError_tooMany());
      return result;
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element;
      P.RangeError_checkNotNegative(index, "index");
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P.Iterator.prototype = {};
  P.List.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1};
  P.Map.prototype = {};
  P.MapEntry.prototype = {};
  P.Null.prototype = {
    get$hashCode: function(_) {
      return P.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0: function(_) {
      return "null";
    }
  };
  P.num.prototype = {};
  P.Object.prototype = {constructor: P.Object, $isObject: 1,
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return "Instance of '" + H.Primitives_objectTypeName(this) + "'";
    },
    noSuchMethod$1: function(_, invocation) {
      H.interceptedTypeCheck(invocation, "$isInvocation");
      throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    },
    toString: function() {
      return this.toString$0(this);
    }
  };
  P.Set.prototype = {};
  P.StackTrace.prototype = {};
  P.String.prototype = {$isPattern: 1};
  P.StringBuffer.prototype = {
    get$length: function(_) {
      return this._contents.length;
    },
    toString$0: function(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isStringSink: 1
  };
  P.Symbol0.prototype = {};
  W.HtmlElement.prototype = {$isHtmlElement: 1};
  W.AnchorElement.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isAnchorElement: 1
  };
  W.AreaElement.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.BaseElement.prototype = {$isBaseElement: 1};
  W.Blob.prototype = {$isBlob: 1};
  W.BodyElement.prototype = {$isBodyElement: 1};
  W.CanvasElement.prototype = {
    getContext$1: function(receiver, contextId) {
      return receiver.getContext(contextId);
    },
    $isCanvasElement: 1
  };
  W.CanvasRenderingContext2D.prototype = {
    fillText$3: function(receiver, text, x, y) {
      receiver.fillText(text, x, y);
    },
    $isCanvasRenderingContext2D: 1
  };
  W.CharacterData.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssStyleDeclaration.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssStyleDeclarationBase.prototype = {};
  W.DivElement.prototype = {$isDivElement: 1};
  W.DomException.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.DomRectReadOnly.prototype = {
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    },
    $eq: function(receiver, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor$(other).$isRectangle)
        return false;
      return receiver.left === other.left && receiver.top === other.top && receiver.width === other.width && receiver.height === other.height;
    },
    get$hashCode: function(receiver) {
      return W._JenkinsSmiHash_hash4(C.JSNumber_methods.get$hashCode(receiver.left), C.JSNumber_methods.get$hashCode(receiver.top), C.JSNumber_methods.get$hashCode(receiver.width), C.JSNumber_methods.get$hashCode(receiver.height));
    },
    $isRectangle: 1,
    $asRectangle: function() {
      return [P.num];
    }
  };
  W.DomTokenList.prototype = {
    add$1: function(receiver, tokens) {
      return receiver.add(H.stringTypeCheck(tokens));
    },
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W._ChildrenElementList.prototype = {
    get$isEmpty: function(_) {
      return this._html$_element.firstElementChild == null;
    },
    get$length: function(_) {
      return this._childElements.length;
    },
    $index: function(_, index) {
      var t1;
      H.intTypeCheck(index);
      t1 = this._childElements;
      if (index < 0 || index >= t1.length)
        return H.ioore(t1, index);
      return H.interceptedTypeCheck(t1[index], "$isElement");
    },
    $indexSet: function(_, index, value) {
      var t1;
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isElement");
      t1 = this._childElements;
      if (index < 0 || index >= t1.length)
        return H.ioore(t1, index);
      this._html$_element.replaceChild(value, t1[index]);
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize element lists"));
    },
    add$1: function(_, value) {
      H.interceptedTypeCheck(value, "$isElement");
      this._html$_element.appendChild(value);
      return value;
    },
    get$iterator: function(_) {
      var t1 = this.toList$0(this);
      return new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]);
    },
    sort$1: function(_, compare) {
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [W.Element, W.Element]});
      throw H.wrapException(P.UnsupportedError$("Cannot sort element lists"));
    },
    clear$0: function(_) {
      J._clearChildren$0$x(this._html$_element);
    },
    removeAt$1: function(_, index) {
      var result,
        t1 = this._childElements;
      if (index >= t1.length)
        return H.ioore(t1, index);
      result = H.interceptedTypeCheck(t1[index], "$isElement");
      this._html$_element.removeChild(result);
      return result;
    },
    $asEfficientLengthIterable: function() {
      return [W.Element];
    },
    $asListMixin: function() {
      return [W.Element];
    },
    $asIterable: function() {
      return [W.Element];
    },
    $asList: function() {
      return [W.Element];
    }
  };
  W._FrozenElementList.prototype = {
    get$length: function(_) {
      return this._nodeList.length;
    },
    $index: function(_, index) {
      var t1;
      H.intTypeCheck(index);
      t1 = this._nodeList;
      if (index < 0 || index >= t1.length)
        return H.ioore(t1, index);
      return H.assertSubtypeOfRuntimeType(t1[index], H.getTypeArgumentByIndex(this, 0));
    },
    $indexSet: function(_, index, value) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
      throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
    },
    sort$1: function(_, compare) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      throw H.wrapException(P.UnsupportedError$("Cannot sort list"));
    },
    $isElementList: 1
  };
  W.Element.prototype = {
    get$attributes: function(receiver) {
      return new W._ElementAttributeMap(receiver);
    },
    get$children: function(receiver) {
      return new W._ChildrenElementList(receiver, receiver.children);
    },
    get$classes: function(receiver) {
      return new W._ElementCssClassSet(receiver);
    },
    appendHtml$1: function(receiver, text) {
      this.insertAdjacentHtml$4$treeSanitizer$validator(receiver, "beforeend", text, null, null);
    },
    toString$0: function(receiver) {
      return receiver.localName;
    },
    insertAdjacentHtml$4$treeSanitizer$validator: function(receiver, where, html, treeSanitizer, validator) {
      var t1,
        node = this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator);
      switch (where.toLowerCase()) {
        case "beforebegin":
          receiver.parentNode.insertBefore(node, receiver);
          break;
        case "afterbegin":
          t1 = receiver.childNodes;
          receiver.insertBefore(node, t1.length > 0 ? t1[0] : null);
          break;
        case "beforeend":
          receiver.appendChild(node);
          break;
        case "afterend":
          receiver.parentNode.insertBefore(node, receiver.nextSibling);
          break;
        default:
          H.throwExpression(P.ArgumentError$("Invalid position " + where));
      }
    },
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, t2, contextElement, fragment;
      if (treeSanitizer == null) {
        t1 = $.Element__defaultValidator;
        if (t1 == null) {
          t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
          t2 = new W.NodeValidatorBuilder(t1);
          C.JSArray_methods.add$1(t1, W._Html5NodeValidator$(null));
          C.JSArray_methods.add$1(t1, W._TemplatingNodeValidator$());
          $.Element__defaultValidator = t2;
          validator = t2;
        } else
          validator = t1;
        t1 = $.Element__defaultSanitizer;
        if (t1 == null) {
          t1 = new W._ValidatingTreeSanitizer(validator);
          $.Element__defaultSanitizer = t1;
          treeSanitizer = t1;
        } else {
          t1.validator = validator;
          treeSanitizer = t1;
        }
      }
      if ($.Element__parseDocument == null) {
        t1 = document;
        t2 = t1.implementation.createHTMLDocument("");
        $.Element__parseDocument = t2;
        $.Element__parseRange = t2.createRange();
        t2 = $.Element__parseDocument.createElement("base");
        H.interceptedTypeCheck(t2, "$isBaseElement");
        t2.href = t1.baseURI;
        $.Element__parseDocument.head.appendChild(t2);
      }
      t1 = $.Element__parseDocument;
      if (t1.body == null) {
        t2 = t1.createElement("body");
        t1.body = H.interceptedTypeCheck(t2, "$isBodyElement");
      }
      t1 = $.Element__parseDocument;
      if (!!this.$isBodyElement)
        contextElement = t1.body;
      else {
        contextElement = t1.createElement(receiver.tagName);
        $.Element__parseDocument.body.appendChild(contextElement);
      }
      if ("createContextualFragment" in window.Range.prototype && !C.JSArray_methods.contains$1(C.List_ego, receiver.tagName)) {
        $.Element__parseRange.selectNodeContents(contextElement);
        fragment = $.Element__parseRange.createContextualFragment(html);
      } else {
        contextElement.innerHTML = html;
        fragment = $.Element__parseDocument.createDocumentFragment();
        for (; t1 = contextElement.firstChild, t1 != null;)
          fragment.appendChild(t1);
      }
      t1 = $.Element__parseDocument.body;
      if (contextElement == null ? t1 != null : contextElement !== t1)
        J.remove$0$ax(contextElement);
      treeSanitizer.sanitizeTree$1(fragment);
      document.adoptNode(fragment);
      return fragment;
    },
    createFragment$2$treeSanitizer: function($receiver, html, treeSanitizer) {
      return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
    },
    setInnerHtml$1: function(receiver, html) {
      receiver.textContent = null;
      receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, null, null));
    },
    $isElement: 1,
    get$tagName: function(receiver) {
      return receiver.tagName;
    }
  };
  W.Element_Element$html_closure.prototype = {
    call$1: function(e) {
      return !!J.getInterceptor$(H.interceptedTypeCheck(e, "$isNode")).$isElement;
    },
    $signature: 11
  };
  W.Event.prototype = {$isEvent: 1};
  W.EventTarget.prototype = {
    _addEventListener$3: function(receiver, type, listener, options) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(H.functionTypeCheck(listener, {func: 1, args: [W.Event]}), 1), false);
    },
    _removeEventListener$3: function(receiver, type, listener, options) {
      return receiver.removeEventListener(type, H.convertDartClosureToJS(H.functionTypeCheck(listener, {func: 1, args: [W.Event]}), 1), false);
    },
    $isEventTarget: 1
  };
  W.FormElement.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.HtmlCollection.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isNode");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isHtmlCollection: 1,
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W.ImageData.prototype = {$isImageData: 1};
  W.InputElement.prototype = {$isInputElement: 1};
  W.KeyboardEvent.prototype = {$isKeyboardEvent: 1};
  W.Location.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isLocation: 1
  };
  W.MouseEvent.prototype = {
    get$offset: function(receiver) {
      var t1, target, t2, t3, t4, t5;
      if (!!receiver.offsetX)
        return new P.Point(receiver.offsetX, receiver.offsetY, [P.num]);
      else {
        t1 = receiver.target;
        if (!J.getInterceptor$(W._convertNativeToDart_EventTarget(t1)).$isElement)
          throw H.wrapException(P.UnsupportedError$("offsetX is only supported on elements"));
        target = H.interceptedTypeCheck(W._convertNativeToDart_EventTarget(t1), "$isElement");
        t1 = receiver.clientX;
        t2 = receiver.clientY;
        t3 = [P.num];
        t4 = target.getBoundingClientRect();
        t5 = t4.left;
        t4 = t4.top;
        H.assertSubtype(new P.Point(t5, t4, t3), "$isPoint", t3, "$asPoint");
        if (typeof t1 !== "number")
          return t1.$sub();
        if (typeof t2 !== "number")
          return t2.$sub();
        return new P.Point(C.JSNumber_methods.toInt$0(t1 - t5), C.JSNumber_methods.toInt$0(t2 - t4), t3);
      }
    },
    $isMouseEvent: 1
  };
  W._ChildNodeListLazy.prototype = {
    get$single: function(_) {
      var t1 = this._this,
        l = t1.childNodes.length;
      if (l === 0)
        throw H.wrapException(P.StateError$("No elements"));
      if (l > 1)
        throw H.wrapException(P.StateError$("More than one element"));
      return t1.firstChild;
    },
    add$1: function(_, value) {
      this._this.appendChild(H.interceptedTypeCheck(value, "$isNode"));
    },
    addAll$1: function(_, iterable) {
      var t1, t2, len, i;
      H.assertSubtype(iterable, "$isIterable", [W.Node], "$asIterable");
      t1 = iterable._this;
      t2 = this._this;
      if (t1 !== t2)
        for (len = t1.childNodes.length, i = 0; i < len; ++i)
          t2.appendChild(t1.firstChild);
      return;
    },
    removeAt$1: function(_, index) {
      var result,
        t1 = this._this,
        t2 = t1.childNodes;
      if (index >= t2.length)
        return H.ioore(t2, index);
      result = t2[index];
      t1.removeChild(result);
      return result;
    },
    $indexSet: function(_, index, value) {
      var t1, t2;
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isNode");
      t1 = this._this;
      t2 = t1.childNodes;
      if (index < 0 || index >= t2.length)
        return H.ioore(t2, index);
      t1.replaceChild(value, t2[index]);
    },
    get$iterator: function(_) {
      var t1 = this._this.childNodes;
      return new W.FixedSizeListIterator(t1, t1.length, [H.getRuntimeTypeArgumentIntercepted(C.NodeList_methods, t1, "ImmutableListMixin", 0)]);
    },
    sort$1: function(_, compare) {
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [W.Node, W.Node]});
      throw H.wrapException(P.UnsupportedError$("Cannot sort Node list"));
    },
    get$length: function(_) {
      return this._this.childNodes.length;
    },
    set$length: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
    },
    $index: function(_, index) {
      var t1;
      H.intTypeCheck(index);
      t1 = this._this.childNodes;
      if (index < 0 || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $asListMixin: function() {
      return [W.Node];
    },
    $asIterable: function() {
      return [W.Node];
    },
    $asList: function() {
      return [W.Node];
    }
  };
  W.Node.prototype = {
    remove$0: function(receiver) {
      var t1 = receiver.parentNode;
      if (t1 != null)
        t1.removeChild(receiver);
    },
    replaceWith$1: function(receiver, otherNode) {
      var $parent, exception;
      try {
        $parent = receiver.parentNode;
        J._replaceChild$2$x($parent, otherNode, receiver);
      } catch (exception) {
        H.unwrapException(exception);
      }
      return receiver;
    },
    _clearChildren$0: function(receiver) {
      var t1;
      for (; t1 = receiver.firstChild, t1 != null;)
        receiver.removeChild(t1);
    },
    toString$0: function(receiver) {
      var value = receiver.nodeValue;
      return value == null ? this.super$Interceptor$toString(receiver) : value;
    },
    _replaceChild$2: function(receiver, node, child) {
      return receiver.replaceChild(node, child);
    },
    $isNode: 1
  };
  W.NodeList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isNode");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W.SelectElement.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.TableElement.prototype = {
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var table, fragment;
      if ("createContextualFragment" in window.Range.prototype)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      table = W.Element_Element$html("<table>" + H.S(html) + "</table>", treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      fragment.toString;
      table.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(table));
      return fragment;
    }
  };
  W.TableRowElement.prototype = {
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, fragment, section, row;
      if ("createContextualFragment" in window.Range.prototype)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      t1 = document;
      fragment = t1.createDocumentFragment();
      t1 = C.TableElement_methods.createFragment$3$treeSanitizer$validator(t1.createElement("table"), html, treeSanitizer, validator);
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      section = t1.get$single(t1);
      section.toString;
      t1 = new W._ChildNodeListLazy(section);
      row = t1.get$single(t1);
      fragment.toString;
      row.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(row));
      return fragment;
    }
  };
  W.TableSectionElement.prototype = {
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, fragment, section;
      if ("createContextualFragment" in window.Range.prototype)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      t1 = document;
      fragment = t1.createDocumentFragment();
      t1 = C.TableElement_methods.createFragment$3$treeSanitizer$validator(t1.createElement("table"), html, treeSanitizer, validator);
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      section = t1.get$single(t1);
      fragment.toString;
      section.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(section));
      return fragment;
    }
  };
  W.TemplateElement.prototype = {
    setInnerHtml$1: function(receiver, html) {
      var fragment;
      receiver.textContent = null;
      fragment = this.createFragment$3$treeSanitizer$validator(receiver, html, null, null);
      receiver.content.appendChild(fragment);
    },
    $isTemplateElement: 1
  };
  W.TouchEvent.prototype = {$isTouchEvent: 1};
  W.UIEvent.prototype = {};
  W.Window.prototype = {
    get$animationFrame: function(receiver) {
      var t1 = P.num,
        t2 = new P._Future($.Zone__current, [t1]),
        t3 = H.functionTypeCheck(new W.Window_animationFrame_closure(new P._SyncCompleter(t2, [t1])), {func: 1, ret: -1, args: [P.num]});
      this._ensureRequestAnimationFrame$0(receiver);
      this._requestAnimationFrame$1(receiver, W._wrapZone(t3, t1));
      return t2;
    },
    _requestAnimationFrame$1: function(receiver, callback) {
      return receiver.requestAnimationFrame(H.convertDartClosureToJS(H.functionTypeCheck(callback, {func: 1, ret: -1, args: [P.num]}), 1));
    },
    _ensureRequestAnimationFrame$0: function(receiver) {
      if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
        return;
      (function($this) {
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
          $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
          $this.cancelAnimationFrame = $this[vendors[i] + 'CancelAnimationFrame'] || $this[vendors[i] + 'CancelRequestAnimationFrame'];
        }
        if ($this.requestAnimationFrame && $this.cancelAnimationFrame)
          return;
        $this.requestAnimationFrame = function(callback) {
          return window.setTimeout(function() {
            callback(Date.now());
          }, 16);
        };
        $this.cancelAnimationFrame = function(id) {
          clearTimeout(id);
        };
      })(receiver);
    },
    $isWindow: 1,
    $isWindowBase: 1
  };
  W.Window_animationFrame_closure.prototype = {
    call$1: function(time) {
      var t1 = this.completer;
      time = H.futureOrCheck(H.numTypeCheck(time), {futureOr: 1, type: H.getTypeArgumentByIndex(t1, 0)});
      t1 = t1.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._complete$1(time);
    },
    $signature: 20
  };
  W.WorkerGlobalScope.prototype = {$isWorkerGlobalScope: 1};
  W._Attr.prototype = {$is_Attr: 1};
  W._DomRect.prototype = {
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    },
    $eq: function(receiver, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor$(other).$isRectangle)
        return false;
      return receiver.left === other.left && receiver.top === other.top && receiver.width === other.width && receiver.height === other.height;
    },
    get$hashCode: function(receiver) {
      return W._JenkinsSmiHash_hash4(C.JSNumber_methods.get$hashCode(receiver.left), C.JSNumber_methods.get$hashCode(receiver.top), C.JSNumber_methods.get$hashCode(receiver.width), C.JSNumber_methods.get$hashCode(receiver.height));
    }
  };
  W._NamedNodeMap.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isNode");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W._AttributeMap.prototype = {
    forEach$1: function(_, f) {
      var t1, t2, t3, _i, key;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String, P.String]});
      for (t1 = this.get$keys(), t2 = t1.length, t3 = this._html$_element, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        key = t1[_i];
        f.call$2(key, t3.getAttribute(key));
      }
    },
    get$keys: function() {
      var len, i, attr,
        attributes = this._html$_element.attributes,
        keys = H.setRuntimeTypeInfo([], [P.String]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        attr = H.interceptedTypeCheck(attributes[i], "$is_Attr");
        if (attr.namespaceURI == null)
          C.JSArray_methods.add$1(keys, attr.name);
      }
      return keys;
    },
    get$isEmpty: function(_) {
      return this.get$keys().length === 0;
    },
    $asMapMixin: function() {
      return [P.String, P.String];
    },
    $asMap: function() {
      return [P.String, P.String];
    }
  };
  W._ElementAttributeMap.prototype = {
    containsKey$1: function(key) {
      return this._html$_element.hasAttribute(key);
    },
    $index: function(_, key) {
      return this._html$_element.getAttribute(H.stringTypeCheck(key));
    },
    $indexSet: function(_, key, value) {
      this._html$_element.setAttribute(key, H.stringTypeCheck(value));
    },
    get$length: function(_) {
      return this.get$keys().length;
    }
  };
  W._ElementCssClassSet.prototype = {
    readClasses$0: function() {
      var t1, t2, _i, trimmed,
        s = P.LinkedHashSet_LinkedHashSet(P.String);
      for (t1 = this._html$_element.className.split(" "), t2 = t1.length, _i = 0; _i < t2; ++_i) {
        trimmed = J.trim$0$s(t1[_i]);
        if (trimmed.length !== 0)
          s.add$1(0, trimmed);
      }
      return s;
    },
    writeClasses$1: function(s) {
      this._html$_element.className = H.assertSubtype(s, "$isSet", [P.String], "$asSet").join$1(0, " ");
    },
    get$length: function(_) {
      return this._html$_element.classList.length;
    },
    add$1: function(_, value) {
      var list, t1;
      H.stringTypeCheck(value);
      list = this._html$_element.classList;
      t1 = list.contains(value);
      list.add(value);
      return !t1;
    },
    remove$1: function(_, value) {
      var list = this._html$_element.classList,
        removed = list.contains(value);
      list.remove(value);
      return removed;
    }
  };
  W._EventStream.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      return W._EventStreamSubscription$(this._target, this._eventType, onData, false, t1);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  };
  W._ElementEventStreamImpl.prototype = {};
  W._ElementListEventStreamImpl.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t2, pool, t3, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      t2 = _this.$ti;
      pool = new W._StreamPool(new H.JsLinkedHashMap([[P.Stream, t1], [P.StreamSubscription, t1]]), t2);
      pool.set$_controller(new P._SyncBroadcastStreamController(null, pool.get$close(pool), t2));
      for (t1 = _this._targetList, t1 = new H.ListIterator(t1, t1.get$length(t1), [H.getTypeArgumentByIndex(t1, 0)]), t3 = _this._eventType; t1.moveNext$0();)
        pool.add$1(0, new W._EventStream(t1.__internal$_current, t3, false, t2));
      t1 = pool._controller;
      t1.toString;
      return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  };
  W._EventStreamSubscription.prototype = {
    cancel$0: function() {
      var _this = this;
      if (_this._target == null)
        return;
      _this._unlisten$0();
      _this._target = null;
      _this.set$_onData(null);
      return;
    },
    pause$0: function(_) {
      if (this._target == null)
        return;
      ++this._pauseCount;
      this._unlisten$0();
    },
    resume$0: function() {
      var _this = this;
      if (_this._target == null || _this._pauseCount <= 0)
        return;
      --_this._pauseCount;
      _this._tryResume$0();
    },
    _tryResume$0: function() {
      var t3, _this = this,
        t1 = _this._onData,
        t2 = t1 != null;
      if (t2 && _this._pauseCount <= 0) {
        t3 = _this._target;
        t3.toString;
        H.functionTypeCheck(t1, {func: 1, args: [W.Event]});
        if (t2)
          J._addEventListener$3$x(t3, _this._eventType, t1, false);
      }
    },
    _unlisten$0: function() {
      var t3,
        t1 = this._onData,
        t2 = t1 != null;
      if (t2) {
        t3 = this._target;
        t3.toString;
        H.functionTypeCheck(t1, {func: 1, args: [W.Event]});
        if (t2)
          J._removeEventListener$3$x(t3, this._eventType, t1, false);
      }
    },
    set$_onData: function(_onData) {
      this._onData = H.functionTypeCheck(_onData, {func: 1, args: [W.Event]});
    }
  };
  W._EventStreamSubscription_closure.prototype = {
    call$1: function(e) {
      return this.onData.call$1(H.interceptedTypeCheck(e, "$isEvent"));
    },
    $signature: 26
  };
  W._StreamPool.prototype = {
    add$1: function(_, stream) {
      var t1, t2, t3, _this = this;
      H.assertSubtype(stream, "$isStream", _this.$ti, "$asStream");
      t1 = _this._subscriptions;
      if (t1.containsKey$1(stream))
        return;
      t2 = _this._controller;
      t3 = H.getTypeArgumentByIndex(stream, 0);
      t2 = H.functionTypeCheck(t2.get$add(t2), {func: 1, ret: -1, args: [t3]});
      H.functionTypeCheck(new W._StreamPool_add_closure(_this, stream), {func: 1, ret: -1});
      t1.$indexSet(0, stream, W._EventStreamSubscription$(stream._target, stream._eventType, t2, false, t3));
    },
    close$0: function(_) {
      var t1, t2;
      for (t1 = this._subscriptions, t2 = t1.get$values(t1), t2 = new H.MappedIterator(J.get$iterator$ax(t2.__internal$_iterable), t2._f, [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)]); t2.moveNext$0();)
        t2.__internal$_current.cancel$0();
      t1.clear$0(0);
      this._controller.close$0(0);
    },
    set$_controller: function(_controller) {
      this._controller = H.assertSubtype(_controller, "$isStreamController", this.$ti, "$asStreamController");
    }
  };
  W._StreamPool_add_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        subscription = t1._subscriptions.remove$1(0, H.assertSubtype(this.stream, "$isStream", [H.getTypeArgumentByIndex(t1, 0)], "$asStream"));
      if (subscription != null)
        subscription.cancel$0();
      return;
    },
    $signature: 0
  };
  W._Html5NodeValidator.prototype = {
    _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
      var _i;
      if ($._Html5NodeValidator__attributeValidators._length === 0) {
        for (_i = 0; _i < 262; ++_i)
          $._Html5NodeValidator__attributeValidators.$indexSet(0, C.List_2Zi[_i], W.html__Html5NodeValidator__standardAttributeValidator$closure());
        for (_i = 0; _i < 12; ++_i)
          $._Html5NodeValidator__attributeValidators.$indexSet(0, C.List_yrN[_i], W.html__Html5NodeValidator__uriAttributeValidator$closure());
      }
    },
    allowsElement$1: function(element) {
      return $.$get$_Html5NodeValidator__allowedElements().contains$1(0, W.Element__safeTagName(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var validator = $._Html5NodeValidator__attributeValidators.$index(0, H.S(W.Element__safeTagName(element)) + "::" + attributeName);
      if (validator == null)
        validator = $._Html5NodeValidator__attributeValidators.$index(0, "*::" + attributeName);
      if (validator == null)
        return false;
      return H.boolTypeCheck(validator.call$4(element, attributeName, value, this));
    },
    $isNodeValidator: 1
  };
  W.ImmutableListMixin.prototype = {
    get$iterator: function(receiver) {
      return new W.FixedSizeListIterator(receiver, this.get$length(receiver), [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0)]);
    },
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    sort$1: function(receiver, compare) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      throw H.wrapException(P.UnsupportedError$("Cannot sort immutable List."));
    },
    removeAt$1: function(receiver, pos) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
    }
  };
  W.NodeValidatorBuilder.prototype = {
    add$1: function(_, validator) {
      C.JSArray_methods.add$1(this._validators, H.interceptedTypeCheck(validator, "$isNodeValidator"));
    },
    allowsElement$1: function(element) {
      return C.JSArray_methods.any$1(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      return C.JSArray_methods.any$1(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
    },
    $isNodeValidator: 1
  };
  W.NodeValidatorBuilder_allowsElement_closure.prototype = {
    call$1: function(v) {
      return H.interceptedTypeCheck(v, "$isNodeValidator").allowsElement$1(this.element);
    },
    $signature: 12
  };
  W.NodeValidatorBuilder_allowsAttribute_closure.prototype = {
    call$1: function(v) {
      return H.interceptedTypeCheck(v, "$isNodeValidator").allowsAttribute$3(this.element, this.attributeName, this.value);
    },
    $signature: 12
  };
  W._SimpleNodeValidator.prototype = {
    _SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes: function(uriPolicy, allowedAttributes, allowedElements, allowedUriAttributes) {
      var legalAttributes, extraUriAttributes, t1;
      this.allowedElements.addAll$1(0, allowedElements);
      legalAttributes = allowedAttributes.where$1(0, new W._SimpleNodeValidator_closure());
      extraUriAttributes = allowedAttributes.where$1(0, new W._SimpleNodeValidator_closure0());
      this.allowedAttributes.addAll$1(0, legalAttributes);
      t1 = this.allowedUriAttributes;
      t1.addAll$1(0, C.List_empty);
      t1.addAll$1(0, extraUriAttributes);
    },
    allowsElement$1: function(element) {
      return this.allowedElements.contains$1(0, W.Element__safeTagName(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var _this = this,
        tagName = W.Element__safeTagName(element),
        t1 = _this.allowedUriAttributes;
      if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
        return _this.uriPolicy.allowsUri$1(value);
      else if (t1.contains$1(0, "*::" + attributeName))
        return _this.uriPolicy.allowsUri$1(value);
      else {
        t1 = _this.allowedAttributes;
        if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
          return true;
        else if (t1.contains$1(0, "*::" + attributeName))
          return true;
        else if (t1.contains$1(0, H.S(tagName) + "::*"))
          return true;
        else if (t1.contains$1(0, "*::*"))
          return true;
      }
      return false;
    },
    $isNodeValidator: 1
  };
  W._SimpleNodeValidator_closure.prototype = {
    call$1: function(x) {
      return !C.JSArray_methods.contains$1(C.List_yrN, H.stringTypeCheck(x));
    },
    $signature: 17
  };
  W._SimpleNodeValidator_closure0.prototype = {
    call$1: function(x) {
      return C.JSArray_methods.contains$1(C.List_yrN, H.stringTypeCheck(x));
    },
    $signature: 17
  };
  W._TemplatingNodeValidator.prototype = {
    allowsAttribute$3: function(element, attributeName, value) {
      if (this.super$_SimpleNodeValidator$allowsAttribute(element, attributeName, value))
        return true;
      if (attributeName === "template" && value === "")
        return true;
      if (element.getAttribute("template") === "")
        return this._templateAttrs.contains$1(0, attributeName);
      return false;
    }
  };
  W._TemplatingNodeValidator_closure.prototype = {
    call$1: function(attr) {
      return "TEMPLATE::" + H.S(H.stringTypeCheck(attr));
    },
    $signature: 16
  };
  W._SvgNodeValidator.prototype = {
    allowsElement$1: function(element) {
      var t1 = J.getInterceptor$(element);
      if (!!t1.$isScriptElement)
        return false;
      t1 = !!t1.$isSvgElement;
      if (t1 && W.Element__safeTagName(element) === "foreignObject")
        return false;
      if (t1)
        return true;
      return false;
    },
    allowsAttribute$3: function(element, attributeName, value) {
      if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
        return false;
      return this.allowsElement$1(element);
    },
    $isNodeValidator: 1
  };
  W.FixedSizeListIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        nextPosition = _this._position + 1,
        t1 = _this._html$_length;
      if (nextPosition < t1) {
        _this.set$_html$_current(J.$index$asx(_this._array, nextPosition));
        _this._position = nextPosition;
        return true;
      }
      _this.set$_html$_current(null);
      _this._position = t1;
      return false;
    },
    get$current: function() {
      return this._html$_current;
    },
    set$_html$_current: function(_current) {
      this._html$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  W._DOMWindowCrossFrame.prototype = {$isEventTarget: 1, $isWindowBase: 1};
  W.NodeValidator.prototype = {};
  W._SameOriginUriPolicy.prototype = {$isUriPolicy: 1};
  W._ValidatingTreeSanitizer.prototype = {
    sanitizeTree$1: function(node) {
      new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$2(node, null);
    },
    _removeNode$2: function(node, $parent) {
      if ($parent == null)
        J.remove$0$ax(node);
      else
        $parent.removeChild(node);
    },
    _sanitizeUntrustedElement$2: function(element, $parent) {
      var corruptedTest1, elementText, elementTagName, exception, t1,
        corrupted = true,
        attrs = null, isAttr = null;
      try {
        attrs = J.get$attributes$x(element);
        isAttr = attrs._html$_element.getAttribute("is");
        H.interceptedTypeCheck(element, "$isElement");
        corruptedTest1 = function(element) {
          if (!(element.attributes instanceof NamedNodeMap))
            return true;
          var childNodes = element.childNodes;
          if (element.lastChild && element.lastChild !== childNodes[childNodes.length - 1])
            return true;
          if (element.children)
            if (!(element.children instanceof HTMLCollection || element.children instanceof NodeList))
              return true;
          var length = 0;
          if (element.children)
            length = element.children.length;
          for (var i = 0; i < length; i++) {
            var child = element.children[i];
            if (child.id == 'attributes' || child.name == 'attributes' || child.id == 'lastChild' || child.name == 'lastChild' || child.id == 'children' || child.name == 'children')
              return true;
          }
          return false;
        }(element);
        corrupted = H.boolConversionCheck(corruptedTest1) ? true : !(element.attributes instanceof NamedNodeMap);
      } catch (exception) {
        H.unwrapException(exception);
      }
      elementText = "element unprintable";
      try {
        elementText = J.toString$0$(element);
      } catch (exception) {
        H.unwrapException(exception);
      }
      try {
        elementTagName = W.Element__safeTagName(element);
        this._sanitizeElement$7(H.interceptedTypeCheck(element, "$isElement"), $parent, corrupted, elementText, elementTagName, H.interceptedTypeCheck(attrs, "$isMap"), H.stringTypeCheck(isAttr));
      } catch (exception) {
        if (H.unwrapException(exception) instanceof P.ArgumentError)
          throw exception;
        else {
          this._removeNode$2(element, $parent);
          window;
          t1 = "Removing corrupted element " + H.S(elementText);
          if (typeof console != "undefined")
            window.console.warn(t1);
        }
      }
    },
    _sanitizeElement$7: function(element, $parent, corrupted, text, tag, attrs, isAttr) {
      var t1, keys, i, $name, t2, t3, _this = this;
      if (corrupted) {
        _this._removeNode$2(element, $parent);
        window;
        t1 = "Removing element due to corrupted attributes on <" + text + ">";
        if (typeof console != "undefined")
          window.console.warn(t1);
        return;
      }
      if (!_this.validator.allowsElement$1(element)) {
        _this._removeNode$2(element, $parent);
        window;
        t1 = "Removing disallowed element <" + H.S(tag) + "> from " + H.S($parent);
        if (typeof console != "undefined")
          window.console.warn(t1);
        return;
      }
      if (isAttr != null)
        if (!_this.validator.allowsAttribute$3(element, "is", isAttr)) {
          _this._removeNode$2(element, $parent);
          window;
          t1 = "Removing disallowed type extension <" + H.S(tag) + ' is="' + isAttr + '">';
          if (typeof console != "undefined")
            window.console.warn(t1);
          return;
        }
      t1 = attrs.get$keys();
      keys = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
      for (i = attrs.get$keys().length - 1, t1 = attrs._html$_element; i >= 0; --i) {
        if (i >= keys.length)
          return H.ioore(keys, i);
        $name = keys[i];
        t2 = _this.validator;
        t3 = J.toLowerCase$0$s($name);
        H.stringTypeCheck($name);
        if (!t2.allowsAttribute$3(element, t3, t1.getAttribute($name))) {
          window;
          t2 = "Removing disallowed attribute <" + H.S(tag) + " " + $name + '="' + H.S(t1.getAttribute($name)) + '">';
          if (typeof console != "undefined")
            window.console.warn(t2);
          t1.removeAttribute($name);
        }
      }
      if (!!J.getInterceptor$(element).$isTemplateElement)
        _this.sanitizeTree$1(element.content);
    },
    $isNodeTreeSanitizer: 1
  };
  W._ValidatingTreeSanitizer_sanitizeTree_walk.prototype = {
    call$2: function(node, $parent) {
      var child, nextChild, exception, t2, t3,
        t1 = this.$this;
      switch (node.nodeType) {
        case 1:
          t1._sanitizeUntrustedElement$2(node, $parent);
          break;
        case 8:
        case 11:
        case 3:
        case 4:
          break;
        default:
          t1._removeNode$2(node, $parent);
      }
      child = node.lastChild;
      for (t1 = node == null; null != child;) {
        nextChild = null;
        try {
          nextChild = child.previousSibling;
        } catch (exception) {
          H.unwrapException(exception);
          t2 = H.interceptedTypeCheck(child, "$isNode");
          if (t1) {
            t3 = t2.parentNode;
            if (t3 != null)
              t3.removeChild(t2);
          } else
            node.removeChild(t2);
          child = null;
          nextChild = node.lastChild;
        }
        if (child != null)
          this.call$2(child, node);
        child = H.interceptedTypeCheck(nextChild, "$isNode");
      }
    },
    $signature: 21
  };
  W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase.prototype = {};
  W._HtmlCollection_Interceptor_ListMixin.prototype = {};
  W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._NodeList_Interceptor_ListMixin.prototype = {};
  W._NodeList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__NamedNodeMap_Interceptor_ListMixin.prototype = {};
  W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P.CssClassSetImpl.prototype = {
    _validateToken$1: function(value) {
      var t1 = $.$get$CssClassSetImpl__validTokenRE()._nativeRegExp;
      if (t1.test(value))
        return value;
      throw H.wrapException(P.ArgumentError$value(value, "value", "Not a valid class token"));
    },
    toString$0: function(_) {
      return this.readClasses$0().join$1(0, " ");
    },
    get$iterator: function(_) {
      var t1 = this.readClasses$0();
      return P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H.getTypeArgumentByIndex(t1, 0));
    },
    map$1$1: function(_, f, $T) {
      var t1, t2;
      H.functionTypeCheck(f, {func: 1, ret: $T, args: [P.String]});
      t1 = this.readClasses$0();
      t2 = H.getTypeArgumentByIndex(t1, 0);
      return new H.EfficientLengthMappedIterable(t1, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t2]}), [t2, $T]);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    get$length: function(_) {
      return this.readClasses$0()._collection$_length;
    },
    add$1: function(_, value) {
      H.stringTypeCheck(value);
      this._validateToken$1(value);
      return H.boolTypeCheck(this.modify$1(new P.CssClassSetImpl_add_closure(value)));
    },
    remove$1: function(_, value) {
      var s, result;
      this._validateToken$1(value);
      s = this.readClasses$0();
      result = s.remove$1(0, value);
      this.writeClasses$1(s);
      return result;
    },
    toList$1$growable: function(_, growable) {
      return this.readClasses$0().toList$1$growable(0, true);
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    elementAt$1: function(_, index) {
      return this.readClasses$0().elementAt$1(0, index);
    },
    modify$1: function(f) {
      var s, ret;
      H.functionTypeCheck(f, {func: 1, args: [[P.Set, P.String]]});
      s = this.readClasses$0();
      ret = f.call$1(s);
      this.writeClasses$1(s);
      return ret;
    },
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $asSetMixin: function() {
      return [P.String];
    },
    $asIterable: function() {
      return [P.String];
    },
    $asSet: function() {
      return [P.String];
    }
  };
  P.CssClassSetImpl_add_closure.prototype = {
    call$1: function(s) {
      return H.assertSubtype(s, "$isSet", [P.String], "$asSet").add$1(0, this.value);
    },
    $signature: 22
  };
  P.FilteredElementList.prototype = {
    get$_html_common$_iterable: function() {
      var t1 = this._childNodes,
        t2 = H.getRuntimeTypeArgument(t1, "ListMixin", 0),
        t3 = W.Element;
      return new H.MappedIterable(new H.WhereIterable(t1, H.functionTypeCheck(new P.FilteredElementList__iterable_closure(), {func: 1, ret: P.bool, args: [t2]}), [t2]), H.functionTypeCheck(new P.FilteredElementList__iterable_closure0(), {func: 1, ret: t3, args: [t2]}), [t2, t3]);
    },
    $indexSet: function(_, index, value) {
      var t1;
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isElement");
      t1 = this.get$_html_common$_iterable();
      J.replaceWith$1$x(t1._f.call$1(J.elementAt$1$ax(t1.__internal$_iterable, index)), value);
    },
    set$length: function(_, newLength) {
      var len = J.get$length$asx(this.get$_html_common$_iterable().__internal$_iterable);
      if (newLength >= len)
        return;
      else if (newLength < 0)
        throw H.wrapException(P.ArgumentError$("Invalid list length"));
      this.removeRange$2(0, newLength, len);
    },
    add$1: function(_, value) {
      this._childNodes._this.appendChild(H.interceptedTypeCheck(value, "$isElement"));
    },
    sort$1: function(_, compare) {
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [W.Element, W.Element]});
      throw H.wrapException(P.UnsupportedError$("Cannot sort filtered list"));
    },
    removeRange$2: function(_, start, end) {
      var t1 = this.get$_html_common$_iterable();
      t1 = H.SkipIterable_SkipIterable(t1, start, H.getRuntimeTypeArgument(t1, "Iterable", 0));
      C.JSArray_methods.forEach$1(P.List_List$from(H.TakeIterable_TakeIterable(t1, end - start, H.getRuntimeTypeArgument(t1, "Iterable", 0)), true, null), new P.FilteredElementList_removeRange_closure());
    },
    clear$0: function(_) {
      J._clearChildren$0$x(this._childNodes._this);
    },
    removeAt$1: function(_, index) {
      var t1 = this.get$_html_common$_iterable();
      t1 = t1._f.call$1(J.elementAt$1$ax(t1.__internal$_iterable, index));
      J.remove$0$ax(t1);
      return t1;
    },
    get$length: function(_) {
      return J.get$length$asx(this.get$_html_common$_iterable().__internal$_iterable);
    },
    $index: function(_, index) {
      var t1;
      H.intTypeCheck(index);
      t1 = this.get$_html_common$_iterable();
      return t1._f.call$1(J.elementAt$1$ax(t1.__internal$_iterable, index));
    },
    get$iterator: function(_) {
      var t1 = P.List_List$from(this.get$_html_common$_iterable(), false, W.Element);
      return new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]);
    },
    $asEfficientLengthIterable: function() {
      return [W.Element];
    },
    $asListMixin: function() {
      return [W.Element];
    },
    $asIterable: function() {
      return [W.Element];
    },
    $asList: function() {
      return [W.Element];
    }
  };
  P.FilteredElementList__iterable_closure.prototype = {
    call$1: function(n) {
      return !!J.getInterceptor$(H.interceptedTypeCheck(n, "$isNode")).$isElement;
    },
    $signature: 11
  };
  P.FilteredElementList__iterable_closure0.prototype = {
    call$1: function(n) {
      return H.interceptedTypeCast(H.interceptedTypeCheck(n, "$isNode"), "$isElement");
    },
    $signature: 23
  };
  P.FilteredElementList_removeRange_closure.prototype = {
    call$1: function(el) {
      return J.remove$0$ax(el);
    },
    $signature: 3
  };
  P.KeyRange.prototype = {$isKeyRange: 1};
  P.JsObject.prototype = {
    $index: function(_, property) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(P.ArgumentError$("property is not a String or num"));
      return P._convertToDart(this._jsObject[property]);
    },
    $indexSet: function(_, property, value) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(P.ArgumentError$("property is not a String or num"));
      this._jsObject[property] = P._convertToJS(value);
    },
    get$hashCode: function(_) {
      return 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.JsObject && this._jsObject === other._jsObject;
    },
    toString$0: function(_) {
      var t1, exception;
      try {
        t1 = String(this._jsObject);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        t1 = this.super$Object$toString(this);
        return t1;
      }
    },
    callMethod$2: function(method, args) {
      var t2,
        t1 = this._jsObject;
      if (args == null)
        t2 = null;
      else {
        t2 = H.getTypeArgumentByIndex(args, 0);
        t2 = P.List_List$from(new H.MappedListIterable(args, H.functionTypeCheck(P.js___convertToJS$closure(), {func: 1, ret: null, args: [t2]}), [t2, null]), true, null);
      }
      return P._convertToDart(t1[method].apply(t1, t2));
    }
  };
  P.JsFunction.prototype = {};
  P.JsArray.prototype = {
    _checkIndex$1: function(index) {
      var _this = this,
        t1 = index < 0 || index >= _this.get$length(_this);
      if (t1)
        throw H.wrapException(P.RangeError$range(index, 0, _this.get$length(_this), null, null));
    },
    $index: function(_, index) {
      if (typeof index === "number" && index === C.JSInt_methods.toInt$0(index))
        this._checkIndex$1(H.intTypeCheck(index));
      return H.assertSubtypeOfRuntimeType(this.super$JsObject$$index(0, index), H.getTypeArgumentByIndex(this, 0));
    },
    $indexSet: function(_, index, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
      if (typeof index === "number" && index === C.JSInt_methods.toInt$0(index))
        this._checkIndex$1(H.intTypeCheck(index));
      this.super$JsObject$$indexSet(0, index, value);
    },
    get$length: function(_) {
      var len = this._jsObject.length;
      if (typeof len === "number" && len >>> 0 === len)
        return len;
      throw H.wrapException(P.StateError$("Bad JsArray length"));
    },
    set$length: function(_, $length) {
      this.super$JsObject$$indexSet(0, "length", $length);
    },
    add$1: function(_, value) {
      this.callMethod$2("push", [H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0))]);
    },
    removeAt$1: function(_, index) {
      this._checkIndex$1(index);
      return H.assertSubtypeOfRuntimeType(J.$index$asx(this.callMethod$2("splice", [index, 1]), 0), H.getTypeArgumentByIndex(this, 0));
    },
    sort$1: function(_, compare) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      this.callMethod$2("sort", [compare]);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  P._convertToJS_closure.prototype = {
    call$1: function(o) {
      var jsFunction;
      H.interceptedTypeCheck(o, "$isFunction");
      jsFunction = function(_call, f, captureThis) {
        return function() {
          return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));
        };
      }(P._callDartFunction, o, false);
      P._defineProperty(jsFunction, $.$get$DART_CLOSURE_PROPERTY_NAME(), o);
      return jsFunction;
    },
    $signature: 3
  };
  P._convertToJS_closure0.prototype = {
    call$1: function(o) {
      return new this.ctor(o);
    },
    $signature: 3
  };
  P._wrapToDart_closure.prototype = {
    call$1: function(o) {
      return new P.JsFunction(o);
    },
    $signature: 24
  };
  P._wrapToDart_closure0.prototype = {
    call$1: function(o) {
      return new P.JsArray(o, [null]);
    },
    $signature: 25
  };
  P._wrapToDart_closure1.prototype = {
    call$1: function(o) {
      return new P.JsObject(o);
    },
    $signature: 53
  };
  P._JsArray_JsObject_ListMixin.prototype = {};
  P.Point.prototype = {
    toString$0: function(_) {
      return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor$(other).$isPoint && this.x == other.x && this.y == other.y;
    },
    get$hashCode: function(_) {
      var hash,
        t1 = J.get$hashCode$(this.x),
        t2 = J.get$hashCode$(this.y);
      t2 = P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2);
      hash = 536870911 & t2 + ((67108863 & t2) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    $mul: function(_, factor) {
      var t2, t3, _this = this,
        t1 = _this.x;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof factor !== "number")
        return H.iae(factor);
      t2 = H.getTypeArgumentByIndex(_this, 0);
      t1 = H.assertSubtypeOfRuntimeType(t1 * factor, t2);
      t3 = _this.y;
      if (typeof t3 !== "number")
        return t3.$mul();
      return new P.Point(t1, H.assertSubtypeOfRuntimeType(t3 * factor, t2), _this.$ti);
    }
  };
  P.ScriptElement.prototype = {$isScriptElement: 1};
  P.AttributeClassSet.prototype = {
    readClasses$0: function() {
      var t1, t2, _i, trimmed,
        classname = this._svg$_element.getAttribute("class"),
        s = P.LinkedHashSet_LinkedHashSet(P.String);
      if (classname == null)
        return s;
      for (t1 = classname.split(" "), t2 = t1.length, _i = 0; _i < t2; ++_i) {
        trimmed = J.trim$0$s(t1[_i]);
        if (trimmed.length !== 0)
          s.add$1(0, trimmed);
      }
      return s;
    },
    writeClasses$1: function(s) {
      this._svg$_element.setAttribute("class", s.join$1(0, " "));
    }
  };
  P.SvgElement.prototype = {
    get$classes: function(receiver) {
      return new P.AttributeClassSet(receiver);
    },
    get$children: function(receiver) {
      return new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
    },
    createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
      var html, t2, fragment, svgFragment, root,
        t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
      C.JSArray_methods.add$1(t1, W._Html5NodeValidator$(null));
      C.JSArray_methods.add$1(t1, W._TemplatingNodeValidator$());
      C.JSArray_methods.add$1(t1, new W._SvgNodeValidator());
      treeSanitizer = new W._ValidatingTreeSanitizer(new W.NodeValidatorBuilder(t1));
      html = '<svg version="1.1">' + H.S(svg) + "</svg>";
      t1 = document;
      t2 = t1.body;
      fragment = (t2 && C.BodyElement_methods).createFragment$2$treeSanitizer(t2, html, treeSanitizer);
      svgFragment = t1.createDocumentFragment();
      fragment.toString;
      t1 = new W._ChildNodeListLazy(fragment);
      root = t1.get$single(t1);
      for (; t1 = root.firstChild, t1 != null;)
        svgFragment.appendChild(t1);
      return svgFragment;
    },
    insertAdjacentHtml$4$treeSanitizer$validator: function(receiver, where, text, treeSanitizer, validator) {
      throw H.wrapException(P.UnsupportedError$("Cannot invoke insertAdjacentHtml on SVG."));
    },
    $isSvgElement: 1
  };
  U.Block.prototype = {
    get$indentAbove: function() {
      return 0;
    },
    get$indentBelow: function() {
      return 0;
    },
    get$bottomOfChain: function() {
      var t1 = this.next;
      return t1 != null ? t1.get$bottomOfChain() : this;
    },
    get$nextChain: function() {
      var t1 = this.next;
      if (!(t1 != null)) {
        t1 = this.parent;
        t1 = t1 != null ? t1.nextClause : null;
      }
      return t1;
    },
    get$isStartOfChain: function() {
      return this.prev == null;
    },
    Block$3: function(workspace, id, action) {
      var t2, _this = this,
        t1 = _this.id;
      if (t1 == null) {
        t1 = _this.workspace;
        t2 = t1.nextBlockId;
        _this.id = t2;
        t1.nextBlockId = t2 + 1;
      } else {
        t2 = _this.workspace;
        if (t1 >= t2.nextBlockId)
          t2.nextBlockId = t1 + 1;
      }
      _this.width = $.$get$BLOCK_WIDTH();
      _this._height = $.$get$BLOCK_HEIGHT();
    },
    clone$0: function(_) {
      var _this = this,
        other = U.Block$(_this.workspace, _this.id, _this.action);
      _this._copyTo$1(other);
      return other;
    },
    _copyTo$1: function(other) {
      var t1, t2, otherParam, otherProp, _this = this;
      other.action = _this.action;
      other.type = _this.type;
      other.format = _this.format;
      other.blockColor = _this.blockColor;
      other.textColor = _this.textColor;
      other.borderColor = _this.borderColor;
      other.font = _this.font;
      other.required = _this.required;
      other.width = _this.width;
      other._height = _this._height;
      other.hasTopConnector = _this.hasTopConnector;
      for (t1 = _this.params, t1 = t1.get$values(t1), t1 = new H.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]), t2 = other.params; t1.moveNext$0();) {
        otherParam = t1.__internal$_current.clone$1(0, other);
        t2.$indexSet(0, otherParam.id, otherParam);
      }
      for (t1 = _this.properties, t1 = t1.get$values(t1), t1 = new H.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]), t2 = other.properties; t1.moveNext$0();) {
        otherProp = t1.__internal$_current.clone$1(0, other);
        t2.$indexSet(0, otherProp.id, otherProp);
      }
    },
    toJSON$0: function() {
      var t1, t2, _this = this,
        _s10_ = "properties",
        data = P.LinkedHashMap__makeEmpty();
      data.$indexSet(0, "id", _this.id);
      data.$indexSet(0, "action", _this.action);
      data.$indexSet(0, "type", _this.type);
      data.$indexSet(0, "format", _this.format);
      data.$indexSet(0, "start", _this.hasTopConnector);
      data.$indexSet(0, "required", _this.required);
      t1 = _this.x;
      t2 = $.$get$BLOCK_UNIT();
      if (typeof t1 !== "number")
        return t1.$div();
      if (typeof t2 !== "number")
        return H.iae(t2);
      data.$indexSet(0, "x", t1 / t2);
      t1 = _this.y;
      if (typeof t1 !== "number")
        return t1.$div();
      data.$indexSet(0, "y", t1 / t2);
      t1 = _this.params;
      if (t1._length !== 0) {
        data.$indexSet(0, "params", []);
        for (t1 = t1.get$values(t1), t1 = new H.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t1.moveNext$0();) {
          t2 = t1.__internal$_current;
          J.add$1$ax(data.$index(0, "params"), t2.toJSON$0());
        }
      }
      t1 = _this.properties;
      if (t1._length !== 0) {
        data.$indexSet(0, _s10_, []);
        for (t1 = t1.get$values(t1), t1 = new H.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t1.moveNext$0();) {
          t2 = t1.__internal$_current;
          J.add$1$ax(data.$index(0, _s10_), t2.toJSON$0());
        }
      }
      return data;
    },
    _exportParseTree$1: function(chain) {
      var t1;
      J.add$1$ax(chain, this.toJSON$0());
      t1 = this.next;
      if (t1 != null)
        t1._exportParseTree$1(chain);
    },
    _resizeChain$2: function(ctx, maxX) {
      var pwidth, rwidth, w, t4, below, _this = this,
        t1 = $.$get$BLOCK_WIDTH(),
        t2 = _this._getTextWidth$1(ctx),
        t3 = $.$get$BLOCK_PADDING();
      if (typeof t3 !== "number")
        return t3.$mul();
      if (typeof t2 !== "number")
        return t2.$add();
      _this.width = Math.max(H.checkNum(t1), t2 + t3 * 2);
      if (!_this._inMenu && _this.params._length !== 0)
        for (t1 = _this.params, t1 = t1.get$values(t1), t1 = new H.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]), pwidth = 0; t1.moveNext$0();) {
          t2 = t1.__internal$_current;
          t2._resize$1(ctx);
          pwidth += t2.width + t3;
        }
      else
        pwidth = 0;
      if (!_this._inMenu && _this.properties._length !== 0)
        for (t1 = _this.properties, t1 = t1.get$values(t1), t1 = new H.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]), rwidth = 0; t1.moveNext$0();) {
          t2 = t1.__internal$_current;
          t2._resize$1(ctx);
          w = t2.width;
          ctx.save();
          ctx.font = t2.block.font;
          t4 = $.$get$BLOCK_INDENT();
          t2 = ctx.measureText("\u25b8    " + H.S(t2.name)).width;
          if (typeof t4 !== "number")
            return t4.$add();
          if (typeof t2 !== "number")
            return H.iae(t2);
          ctx.restore();
          rwidth = Math.max(rwidth, w + (t4 + t2 + t3 * 2));
        }
      else
        rwidth = 0;
      t1 = _this.x;
      if (typeof t1 !== "number")
        return t1.$add();
      t2 = _this.width;
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = Math.max(t1 + rwidth, t1 + t2 + pwidth);
      maxX = Math.max(H.checkNum(maxX), t2);
      below = _this.get$nextChain();
      if (below != null)
        maxX = below._resizeChain$2(ctx, maxX);
      t1 = _this.x;
      if (typeof t1 !== "number")
        return H.iae(t1);
      _this.width = maxX - t1;
      return maxX;
    },
    _reindentChain$2: function(indent, $parent) {
      var t1, _this = this;
      _this.indent = indent;
      _this.parent = $parent;
      t1 = _this.next;
      if (t1 != null)
        t1._reindentChain$2(indent + _this.get$indentBelow(), $parent);
    },
    _repositionChain$0: function() {
      var t2, t3, t4, t5, _this = this,
        t1 = _this.next;
      if (t1 != null) {
        t2 = _this.y;
        t3 = _this._inMenu ? $.$get$BLOCK_HEIGHT() : _this._height;
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t1.y = t2 + t3;
        t3 = _this.x;
        t2 = t1.indent;
        t4 = _this.indent;
        t5 = $.$get$BLOCK_INDENT();
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (typeof t3 !== "number")
          return t3.$add();
        t1.x = t3 + (t2 - t4) * t5;
        t1._repositionChain$0();
      }
    },
    _getTextWidth$1: function(ctx) {
      var w;
      ctx.save();
      ctx.font = this.font;
      w = ctx.measureText(this.action).width;
      ctx.restore();
      return w;
    },
    _drawLabel$1: function(ctx) {
      var t1, t2, t3, t4, t5, _this = this;
      ctx.save();
      ctx.fillStyle = _this.textColor;
      ctx.font = _this.font;
      ctx.textAlign = "left";
      ctx.textBaseline = "middle";
      t1 = _this.action;
      t2 = _this.x;
      t3 = $.$get$BLOCK_PADDING();
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = _this.y;
      t5 = $.$get$BLOCK_HEIGHT();
      if (typeof t5 !== "number")
        return t5.$div();
      if (typeof t4 !== "number")
        return t4.$add();
      C.CanvasRenderingContext2D_methods.fillText$3(ctx, t1, t2 + t3, t4 + t5 / 2);
      ctx.restore();
    },
    _drawOutline$1: function(ctx) {
      var t1;
      ctx.save();
      this._outlineBlock$1(ctx);
      ctx.strokeStyle = this.borderColor;
      t1 = $.$get$SCALE();
      if (typeof t1 !== "number")
        return H.iae(t1);
      ctx.lineWidth = 0.5 * t1;
      ctx.lineJoin = "round";
      ctx.stroke();
      ctx.restore();
    },
    _drawBlock$1: function(ctx) {
      ctx.save();
      this._outlineBlock$1(ctx);
      ctx.fillStyle = this.blockColor;
      ctx.fill();
      ctx.fillStyle = "rgba(0, 0, 0, " + H.S(Math.min(1, 0.075 * this.indent));
      ctx.fill();
      ctx.restore();
    },
    _drawParameters$1: function(ctx) {
      var i, t3,
        left = this.width,
        t1 = this.params,
        t2 = H.getTypeArgumentByIndex(t1, 0),
        keys = P.List_List$from(new H.LinkedHashMapKeyIterable(t1, [t2]), true, t2);
      for (i = keys.length - 1; i >= 0; --i) {
        t2 = $.$get$BLOCK_PADDING();
        if (i >= keys.length)
          return H.ioore(keys, i);
        t3 = t1.$index(0, keys[i]).width;
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof left !== "number")
          return left.$sub();
        left -= t2 + t3;
        if (i >= keys.length)
          return H.ioore(keys, i);
        t1.$index(0, keys[i]).draw$2(ctx, left);
      }
    },
    _drawProperties$1: function(ctx) {
      var i, i0, $top, t3, t4, t5, t6, t7, t8, t9, t10,
        t1 = this.properties,
        t2 = H.getTypeArgumentByIndex(t1, 0),
        keys = P.List_List$from(new H.LinkedHashMapKeyIterable(t1, [t2]), true, t2);
      for (i = 0; i < keys.length; i = i0) {
        t2 = $.$get$BLOCK_HEIGHT();
        i0 = i + 1;
        if (typeof t2 !== "number")
          return t2.$mul();
        $top = t2 * i0;
        t3 = t1.$index(0, keys[i]);
        t4 = t3.block;
        t5 = t4.width;
        t6 = $.$get$BLOCK_PADDING();
        t7 = t3.width;
        if (typeof t6 !== "number")
          return t6.$add();
        if (typeof t5 !== "number")
          return t5.$sub();
        t8 = t4.y;
        if (typeof t8 !== "number")
          return t8.$add();
        t9 = t4.x;
        t10 = $.$get$BLOCK_INDENT();
        if (typeof t9 !== "number")
          return t9.$add();
        if (typeof t10 !== "number")
          return H.iae(t10);
        ctx.fillStyle = t4.textColor;
        ctx.font = t4.font;
        ctx.textAlign = "left";
        ctx.textBaseline = "middle";
        ctx.fillText("\u25b8    " + H.S(t3.name), t9 + t10, t8 + $top + t2 / 2);
        t3.draw$3(ctx, t5 - (t6 + t7), $top);
      }
    },
    _outlineBlock$1: function(ctx) {
      var t1, t2, t3, t4, t5, _this = this;
      ctx.beginPath();
      t1 = _this.x;
      t2 = $.$get$BLOCK_PADDING();
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      ctx.moveTo(t1 + t2, _this.y);
      _this._outlineTop$2(ctx, _this.prev == null && _this.hasTopConnector);
      t1 = _this.indent === 0;
      t3 = t1 && _this.prev == null;
      _this._outlineRight$3(ctx, t3, t1 && _this.next == null);
      _this._outlineBottom$2(ctx, _this.next == null && _this.indent === 0);
      if (_this.indent <= 0)
        t1 = _this.prev != null && _this.next != null;
      else
        t1 = true;
      if (t1) {
        t1 = _this.x;
        t3 = _this.y;
        t4 = _this._inMenu ? $.$get$BLOCK_HEIGHT() : _this._height;
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t4 !== "number")
          return H.iae(t4);
        ctx.lineTo(t1, t3 + t4);
        ctx.lineTo(_this.x, _this.y);
        t4 = _this.x;
        if (typeof t4 !== "number")
          return t4.$add();
        ctx.lineTo(t4 + t2, _this.y);
      } else if (_this.next != null) {
        t1 = _this.x;
        t3 = _this.y;
        t4 = _this._inMenu ? $.$get$BLOCK_HEIGHT() : _this._height;
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t4 !== "number")
          return H.iae(t4);
        ctx.lineTo(t1, t3 + t4);
        t4 = _this.x;
        t3 = _this.y;
        if (typeof t3 !== "number")
          return t3.$add();
        ctx.lineTo(t4, t3 + t2);
        t3 = _this.x;
        t4 = _this.y;
        if (typeof t3 !== "number")
          return t3.$add();
        ctx.quadraticCurveTo(t3, t4, t3 + t2, t4);
      } else {
        t1 = _this.prev;
        t3 = _this.x;
        t4 = _this.y;
        if (t1 != null) {
          t1 = _this._inMenu;
          t5 = t1 ? $.$get$BLOCK_HEIGHT() : _this._height;
          if (typeof t4 !== "number")
            return t4.$add();
          if (typeof t5 !== "number")
            return H.iae(t5);
          t1 = t1 ? $.$get$BLOCK_HEIGHT() : _this._height;
          if (typeof t1 !== "number")
            return H.iae(t1);
          ctx.quadraticCurveTo(t3, t4 + t5, t3, t4 + t1 - t2);
          ctx.lineTo(_this.x, _this.y);
          t1 = _this.x;
          if (typeof t1 !== "number")
            return t1.$add();
          ctx.lineTo(t1 + t2, _this.y);
        } else {
          t1 = _this._inMenu;
          t5 = t1 ? $.$get$BLOCK_HEIGHT() : _this._height;
          if (typeof t4 !== "number")
            return t4.$add();
          if (typeof t5 !== "number")
            return H.iae(t5);
          t1 = t1 ? $.$get$BLOCK_HEIGHT() : _this._height;
          if (typeof t1 !== "number")
            return H.iae(t1);
          ctx.quadraticCurveTo(t3, t4 + t5, t3, t4 + t1 - t2);
          t1 = _this.x;
          t4 = _this.y;
          if (typeof t4 !== "number")
            return t4.$add();
          ctx.lineTo(t1, t4 + t2);
          t4 = _this.x;
          t1 = _this.y;
          if (typeof t4 !== "number")
            return t4.$add();
          ctx.quadraticCurveTo(t4, t1, t4 + t2, t1);
        }
      }
      ctx.closePath();
    },
    _outlineRight$3: function(ctx, curveTop, curveBottom) {
      var t3, t4, _this = this,
        r = $.$get$BLOCK_PADDING(),
        t1 = _this.x,
        t2 = _this.width;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (typeof r !== "number")
        return H.iae(r);
      ctx.lineTo(t1 + t2 - r, _this.y);
      if (curveTop && curveBottom) {
        t1 = _this.x;
        t2 = _this.width;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 + t2;
        t1 = _this.y;
        if (typeof t1 !== "number")
          return t1.$add();
        ctx.quadraticCurveTo(t2, t1, t2, t1 + r);
        t1 = _this.x;
        t2 = _this.width;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = _this.y;
        t4 = _this._inMenu ? $.$get$BLOCK_HEIGHT() : _this._height;
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t4 !== "number")
          return H.iae(t4);
        ctx.lineTo(t1 + t2, t3 + t4 - r);
        t4 = _this.x;
        t3 = _this.width;
        if (typeof t4 !== "number")
          return t4.$add();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t3 = t4 + t3;
        t4 = _this.y;
        t1 = _this._inMenu;
        t2 = t1 ? $.$get$BLOCK_HEIGHT() : _this._height;
        if (typeof t4 !== "number")
          return t4.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t1 = t1 ? $.$get$BLOCK_HEIGHT() : _this._height;
        if (typeof t1 !== "number")
          return H.iae(t1);
        ctx.quadraticCurveTo(t3, t4 + t2, t3 - r, t4 + t1);
      } else if (curveBottom) {
        t1 = _this.x;
        t2 = _this.width;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        ctx.lineTo(t1 + t2, _this.y);
        t2 = _this.x;
        t1 = _this.width;
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t3 = _this.y;
        t4 = _this._inMenu ? $.$get$BLOCK_HEIGHT() : _this._height;
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t4 !== "number")
          return H.iae(t4);
        ctx.lineTo(t2 + t1, t3 + t4 - r);
        t4 = _this.x;
        t3 = _this.width;
        if (typeof t4 !== "number")
          return t4.$add();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t3 = t4 + t3;
        t4 = _this.y;
        t1 = _this._inMenu;
        t2 = t1 ? $.$get$BLOCK_HEIGHT() : _this._height;
        if (typeof t4 !== "number")
          return t4.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t1 = t1 ? $.$get$BLOCK_HEIGHT() : _this._height;
        if (typeof t1 !== "number")
          return H.iae(t1);
        ctx.quadraticCurveTo(t3, t4 + t2, t3 - r, t4 + t1);
      } else {
        t1 = _this.x;
        t2 = _this.width;
        t3 = _this.y;
        if (curveTop) {
          if (typeof t1 !== "number")
            return t1.$add();
          if (typeof t2 !== "number")
            return H.iae(t2);
          t1 += t2;
          if (typeof t3 !== "number")
            return t3.$add();
          ctx.quadraticCurveTo(t1, t3, t1, t3 + r);
          t3 = _this.x;
          t1 = _this.width;
          if (typeof t3 !== "number")
            return t3.$add();
          if (typeof t1 !== "number")
            return H.iae(t1);
          t2 = _this.y;
          t4 = _this._inMenu ? $.$get$BLOCK_HEIGHT() : _this._height;
          if (typeof t2 !== "number")
            return t2.$add();
          if (typeof t4 !== "number")
            return H.iae(t4);
          ctx.lineTo(t3 + t1, t2 + t4);
          t4 = _this.x;
          t2 = _this.width;
          if (typeof t4 !== "number")
            return t4.$add();
          if (typeof t2 !== "number")
            return H.iae(t2);
          t1 = _this.y;
          t3 = _this._inMenu ? $.$get$BLOCK_HEIGHT() : _this._height;
          if (typeof t1 !== "number")
            return t1.$add();
          if (typeof t3 !== "number")
            return H.iae(t3);
          ctx.lineTo(t4 + t2 - r, t1 + t3);
        } else {
          if (typeof t1 !== "number")
            return t1.$add();
          if (typeof t2 !== "number")
            return H.iae(t2);
          ctx.lineTo(t1 + t2, t3);
          t1 = _this.x;
          t2 = _this.width;
          if (typeof t1 !== "number")
            return t1.$add();
          if (typeof t2 !== "number")
            return H.iae(t2);
          t3 = _this.y;
          t4 = _this._inMenu ? $.$get$BLOCK_HEIGHT() : _this._height;
          if (typeof t3 !== "number")
            return t3.$add();
          if (typeof t4 !== "number")
            return H.iae(t4);
          ctx.lineTo(t1 + t2, t3 + t4);
          t4 = _this.x;
          t3 = _this.width;
          if (typeof t4 !== "number")
            return t4.$add();
          if (typeof t3 !== "number")
            return H.iae(t3);
          t2 = _this.y;
          t1 = _this._inMenu ? $.$get$BLOCK_HEIGHT() : _this._height;
          if (typeof t2 !== "number")
            return t2.$add();
          if (typeof t1 !== "number")
            return H.iae(t1);
          ctx.lineTo(t4 + t3 - r, t2 + t1);
        }
      }
    },
    _outlineTop$2: function(ctx, drawNotch) {
      var t2, t3, x1, _this = this,
        r = $.$get$BLOCK_PADDING(),
        t1 = _this.x;
      if (typeof r !== "number")
        return r.$mul();
      if (typeof t1 !== "number")
        return t1.$add();
      t2 = $.$get$BLOCK_INDENT();
      t3 = _this.get$indentAbove();
      if (typeof t2 !== "number")
        return t2.$mul();
      x1 = t1 + r * 2 + t2 * t3;
      if (drawNotch) {
        ctx.lineTo(x1, _this.y);
        t1 = _this.y;
        if (typeof t1 !== "number")
          return t1.$add();
        t2 = t1 + r / 2;
        t3 = x1 + r;
        ctx.bezierCurveTo(x1, t2, t3, t2, t3, t1);
      }
      t1 = _this.x;
      t2 = _this.width;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      ctx.lineTo(t1 + t2 - r, _this.y);
    },
    _outlineBottom$2: function(ctx, drawNotch) {
      var x1, t2, t3, t4, t5, t6, _this = this,
        r = $.$get$BLOCK_PADDING(),
        t1 = _this.x;
      if (typeof r !== "number")
        return r.$mul();
      if (typeof t1 !== "number")
        return t1.$add();
      x1 = t1 + r * 2;
      if (!_this._inMenu) {
        t1 = $.$get$BLOCK_INDENT();
        t2 = _this.get$indentBelow();
        if (typeof t1 !== "number")
          return t1.$mul();
        x1 += t1 * t2;
      }
      if (drawNotch) {
        t1 = x1 + r;
        t2 = _this.y;
        t3 = _this._inMenu ? $.$get$BLOCK_HEIGHT() : _this._height;
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t3 !== "number")
          return H.iae(t3);
        ctx.lineTo(t1, t2 + t3);
        t3 = _this.y;
        t2 = _this._inMenu;
        t4 = t2 ? $.$get$BLOCK_HEIGHT() : _this._height;
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t4 !== "number")
          return H.iae(t4);
        t5 = r / 2;
        t6 = t2 ? $.$get$BLOCK_HEIGHT() : _this._height;
        if (typeof t6 !== "number")
          return H.iae(t6);
        t2 = t2 ? $.$get$BLOCK_HEIGHT() : _this._height;
        if (typeof t2 !== "number")
          return H.iae(t2);
        ctx.bezierCurveTo(t1, t3 + t4 + t5, x1, t3 + t6 + t5, x1, t3 + t2);
      }
      t1 = _this.y;
      t2 = _this._inMenu ? $.$get$BLOCK_HEIGHT() : _this._height;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      ctx.lineTo(x1 - r, t1 + t2);
    },
    containsTouch$1: function(c) {
      var t2, t3, _this = this,
        tx = c.touchX,
        ty = c.touchY,
        y0 = _this.y,
        t1 = _this._inMenu ? $.$get$BLOCK_HEIGHT() : _this._height;
      if (typeof y0 !== "number")
        return y0.$add();
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = _this.x;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (tx >= t2)
        if (ty >= y0) {
          t3 = _this.width;
          if (typeof t3 !== "number")
            return H.iae(t3);
          t1 = tx <= t2 + t3 && ty <= y0 + t1;
        } else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    touchDown$1: function(c) {
      var t1, t2, below, _this = this;
      _this._dragging = true;
      t1 = c.touchX;
      _this._touchX = t1;
      t2 = c.touchY;
      _this._touchY = t2;
      _this._lastX = t1;
      _this._lastY = t2;
      t1 = _this.prev;
      if (t1 != null)
        _this.prev = t1.next = null;
      for (t1 = _this.workspace, below = _this; below != null;) {
        t1._removeBlock$1(below);
        t1._addBlock$1(below);
        below = below.get$nextChain();
      }
      return _this;
    },
    touchUp$1: function(c) {
      var t1, _this = this;
      _this._wasInMenu = _this._inMenu = _this._dragging = false;
      t1 = _this.workspace;
      if (!t1._trashChain$1(_this))
        t1._snapTogether$1(_this);
      t1.programChanged$0();
    },
    touchDrag$1: function(c) {
      this._touchX = c.touchX;
      this._touchY = c.touchY;
    },
    touchSlide$1: function(c) {
    },
    $isTouchable: 1
  };
  U.ControlBlock.prototype = {
    get$nextChain: function() {
      var t1 = this.next;
      if (t1 != null)
        return t1;
      else {
        t1 = this.nextClause;
        if (t1 != null)
          return t1;
        else {
          t1 = this.parent;
          if (t1 != null)
            return t1.nextClause;
          else
            return;
        }
      }
    },
    _reindentChain$2: function(indent, $parent) {
      var t1, _this = this;
      _this.indent = indent;
      _this.parent = $parent;
      t1 = _this.next;
      if (t1 != null)
        t1._reindentChain$2(indent + _this.get$indentBelow(), _this);
    }
  };
  U.ClauseBlock.prototype = {
    get$indentAbove: function() {
      return 1;
    },
    get$indentBelow: function() {
      return 1;
    },
    get$isStartOfChain: function() {
      return false;
    },
    clone$0: function(_) {
      var other, _this = this,
        t1 = _this.workspace,
        t2 = _this.id,
        t3 = _this.action,
        t4 = P.int,
        t5 = U.Parameter,
        t6 = $.$get$SCALE();
      if (typeof t6 !== "number")
        return H.iae(t6);
      other = new U.ClauseBlock(t2, t3, new H.JsLinkedHashMap([t4, t5]), new H.JsLinkedHashMap([t4, t5]), "400 " + H.S(14 * t6) + "px 'Poppins', sans-serif", t1);
      other.Block$3(t1, t2, t3);
      other.hasTopConnector = false;
      _this._copyTo$1(other);
      return other;
    },
    _exportParseTree$1: function(chain) {
      var t1,
        _s8_ = "children",
        json = this.toJSON$0();
      json.$indexSet(0, _s8_, []);
      J.add$1$ax(chain, json);
      t1 = this.next;
      if (t1 != null)
        t1._exportParseTree$1(H.listTypeCheck(json.$index(0, _s8_)));
    },
    _drawOutline$1: function(ctx) {
    },
    _drawBlock$1: function(ctx) {
    },
    touchDown$1: function(c) {
      return this.begin.touchDown$1(c);
    }
  };
  U.EndBlock.prototype = {
    get$indentAbove: function() {
      return 1;
    },
    get$indentBelow: function() {
      return 0;
    },
    _reindentChain$2: function(indent, $parent) {
      var t1;
      this.indent = indent;
      this.parent = $parent;
      t1 = this.next;
      if (t1 != null)
        t1._reindentChain$2(indent, $parent);
    },
    _exportParseTree$1: function(chain) {
      J.add$1$ax(chain, this.toJSON$0());
    },
    _drawLabel$1: function(ctx) {
    }
  };
  U.BeginBlock.prototype = {
    get$indentAbove: function() {
      return 0;
    },
    get$indentBelow: function() {
      return 1;
    },
    clone$0: function(_) {
      var t1, t2, t3, _i, clause, t4, t5, t6, t7, other0, _this = this,
        other = U.BeginBlock$(_this.workspace, _this.id, _this.action);
      _this._copyTo$1(other);
      for (t1 = _this.clauses, t2 = t1.length, t3 = [P.int, U.Parameter], _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        clause = t1[_i];
        if (!clause.$isEndBlock) {
          t4 = clause.workspace;
          t5 = clause.id;
          t6 = clause.action;
          t7 = $.$get$SCALE();
          if (typeof t7 !== "number")
            return H.iae(t7);
          other0 = new U.ClauseBlock(t5, t6, new H.JsLinkedHashMap(t3), new H.JsLinkedHashMap(t3), "400 " + H.S(14 * t7) + "px 'Poppins', sans-serif", t4);
          other0.Block$3(t4, t5, t6);
          other0.hasTopConnector = false;
          clause._copyTo$1(other0);
          other._addClause$1(other0);
        }
      }
      other.end.format = _this.end.format;
      return other;
    },
    get$bottomOfChain: function() {
      var t1 = this.end,
        t2 = t1.next;
      return t2 != null ? t2.get$bottomOfChain() : t1;
    },
    _exportParseTree$1: function(chain) {
      var t1, t2, _i, _this = this,
        _s8_ = "children",
        json = _this.toJSON$0();
      json.$indexSet(0, _s8_, []);
      json.$indexSet(0, "clauses", []);
      J.add$1$ax(chain, json);
      t1 = _this.next;
      if (t1 != null)
        t1._exportParseTree$1(H.listTypeCheck(json.$index(0, _s8_)));
      for (t1 = _this.clauses, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i]._exportParseTree$1(H.listTypeCheck(json.$index(0, "clauses")));
      t1 = _this.end.next;
      if (t1 != null)
        t1._exportParseTree$1(chain);
    },
    _reindentChain$2: function(indent, $parent) {
      var t1, t2, _i, _this = this;
      _this.indent = indent;
      _this.parent = $parent;
      t1 = _this.next;
      if (t1 != null)
        t1._reindentChain$2(indent + 1, _this);
      for (t1 = _this.clauses, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i]._reindentChain$2(indent, $parent);
    },
    _repositionChain$0: function() {
      var t1, t2, last, _i, clause, t3, bottom, t4, t5, _this = this;
      _this.super$Block$_repositionChain();
      for (t1 = _this.clauses, t2 = t1.length, last = _this, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i, last = clause) {
        clause = t1[_i];
        t3 = last.next;
        if (t3 != null) {
          bottom = t3.get$bottomOfChain();
          clause.x = _this.x;
          t3 = bottom.y;
          t4 = bottom._inMenu ? $.$get$BLOCK_HEIGHT() : bottom._height;
          if (typeof t3 !== "number")
            return t3.$add();
          if (typeof t4 !== "number")
            return H.iae(t4);
          clause.y = t3 + t4;
        } else {
          clause.x = _this.x;
          t3 = last.y;
          t4 = last._inMenu ? $.$get$BLOCK_HEIGHT() : last._height;
          if (typeof t3 !== "number")
            return t3.$add();
          if (typeof t4 !== "number")
            return H.iae(t4);
          t5 = $.$get$BLOCK_HEIGHT();
          if (typeof t5 !== "number")
            return H.iae(t5);
          clause.y = t3 + t4 + t5;
        }
        clause._repositionChain$0();
      }
    },
    _addClause$1: function(clause) {
      var t1, i, t2, i0, _this = this;
      clause.begin = _this;
      t1 = _this.clauses;
      C.JSArray_methods.remove$1(t1, _this.end);
      C.JSArray_methods.add$1(t1, clause);
      C.JSArray_methods.add$1(t1, _this.end);
      for (i = 0; t2 = t1.length, i < t2 - 1; i = i0) {
        i0 = i + 1;
        t1[i].nextClause = t1[i0];
      }
      if (0 >= t2)
        return H.ioore(t1, 0);
      _this.nextClause = t1[0];
    },
    _outlineBlock$1: function(ctx) {
      var r, t1, drawTopNotch, block, drawBottomNotch, t2, t3, t4, t5, _this = this;
      if (_this._inMenu) {
        _this.super$Block$_outlineBlock(ctx);
        return;
      }
      r = $.$get$BLOCK_PADDING();
      ctx.beginPath();
      t1 = _this.x;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof r !== "number")
        return H.iae(r);
      ctx.moveTo(t1 + r, _this.y);
      drawTopNotch = _this.prev == null && _this.hasTopConnector;
      for (block = _this; block != null;) {
        if (block.next == null)
          drawBottomNotch = block.nextClause != null || _this.indent === 0;
        else
          drawBottomNotch = false;
        block._outlineTop$2(ctx, drawTopNotch);
        block._outlineRight$3(ctx, drawTopNotch, drawBottomNotch);
        block._outlineBottom$2(ctx, drawBottomNotch);
        if (block.nextClause != null) {
          t1 = block.x;
          t2 = $.$get$BLOCK_INDENT();
          if (typeof t1 !== "number")
            return t1.$add();
          if (typeof t2 !== "number")
            return H.iae(t2);
          t1 += t2;
          t3 = block.y;
          t4 = block._inMenu;
          t5 = t4 ? $.$get$BLOCK_HEIGHT() : block._height;
          if (typeof t3 !== "number")
            return t3.$add();
          if (typeof t5 !== "number")
            return H.iae(t5);
          t4 = t4 ? $.$get$BLOCK_HEIGHT() : block._height;
          if (typeof t4 !== "number")
            return H.iae(t4);
          ctx.quadraticCurveTo(t1, t3 + t5, t1, t3 + t4 + r);
          t1 = block.next;
          t3 = block.x;
          t4 = block.nextClause;
          if (t1 != null) {
            if (typeof t3 !== "number")
              return t3.$add();
            ctx.lineTo(t3 + t2, t4.y);
            t1 = block.x;
            if (typeof t1 !== "number")
              return t1.$add();
            ctx.lineTo(t1 + t2 + r, block.nextClause.y);
          } else {
            if (typeof t3 !== "number")
              return t3.$add();
            t1 = t4.y;
            if (typeof t1 !== "number")
              return t1.$sub();
            ctx.lineTo(t3 + t2, t1 - r);
            t1 = block.x;
            if (typeof t1 !== "number")
              return t1.$add();
            t2 = t1 + t2;
            t1 = block.nextClause.y;
            ctx.quadraticCurveTo(t2, t1, t2 + r, t1);
          }
        }
        drawTopNotch = block.next == null;
        block = block.nextClause;
      }
      t1 = _this.end;
      t2 = t1.next != null || _this.indent > 0;
      t3 = _this.x;
      t4 = t1.y;
      if (t2) {
        t1 = t1._inMenu ? $.$get$BLOCK_HEIGHT() : t1._height;
        if (typeof t4 !== "number")
          return t4.$add();
        if (typeof t1 !== "number")
          return H.iae(t1);
        ctx.lineTo(t3, t4 + t1);
      } else {
        if (typeof t3 !== "number")
          return t3.$add();
        t1 = t1._inMenu ? $.$get$BLOCK_HEIGHT() : t1._height;
        if (typeof t4 !== "number")
          return t4.$add();
        if (typeof t1 !== "number")
          return H.iae(t1);
        ctx.lineTo(t3 + r, t4 + t1);
        t1 = _this.x;
        t4 = _this.end;
        t3 = t4.y;
        t2 = t4._inMenu;
        t5 = t2 ? $.$get$BLOCK_HEIGHT() : t4._height;
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t5 !== "number")
          return H.iae(t5);
        t2 = t2 ? $.$get$BLOCK_HEIGHT() : t4._height;
        if (typeof t2 !== "number")
          return H.iae(t2);
        ctx.quadraticCurveTo(t1, t3 + t5, t1, t3 + t2 - r);
      }
      t1 = _this.prev;
      t2 = _this.x;
      t3 = _this.y;
      if (t1 != null) {
        ctx.lineTo(t2, t3);
        t1 = _this.x;
        if (typeof t1 !== "number")
          return t1.$add();
        ctx.lineTo(t1 + r, _this.y);
      } else {
        if (typeof t3 !== "number")
          return t3.$add();
        ctx.lineTo(t2, t3 + r);
        t1 = _this.x;
        t2 = _this.y;
        if (typeof t1 !== "number")
          return t1.$add();
        ctx.quadraticCurveTo(t1, t2, t1 + r, t2);
      }
      ctx.closePath();
    }
  };
  U.Expression.prototype = {
    displayString$1: function(out) {
      var t3, _this = this,
        t1 = _this.children,
        t2 = t1.length;
      if (t2 === 1) {
        t2 = _this.builder;
        if (t2.root !== _this)
          out._contents += "(";
        out._contents += H.S(_this.name) + " ";
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1[0].displayString$1(out);
        if (t2.root !== _this)
          out._contents += ")";
      } else if (t2 === 2) {
        t3 = _this.builder;
        if (t3.root !== _this)
          out._contents += "(";
        if (0 >= t2)
          return H.ioore(t1, 0);
        t1[0].displayString$1(out);
        out._contents += " " + H.S(_this.name) + " ";
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        t1[1].displayString$1(out);
        if (t3.root !== _this)
          out._contents += ")";
      } else {
        t1 = _this.name;
        if (t1 != null)
          out._contents += t1;
      }
    },
    toJSON$0: function() {
      var t2, _i, child, _this = this,
        _s8_ = "children",
        data = P.LinkedHashMap__makeLiteral(["name", _this.name, "type", _this.type]),
        t1 = _this.children;
      if (t1.length !== 0) {
        data.$indexSet(0, _s8_, []);
        for (t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          child = t1[_i];
          J.add$1$ax(data.$index(0, _s8_), child.toJSON$0());
        }
      }
      t1 = _this.format;
      if (t1 != null)
        data.$indexSet(0, "format", t1);
      return data;
    },
    fromJSON$1: function(json) {
      var t2, t3, t4, c, child, _this = this,
        _s8_ = "children",
        t1 = json.$index(0, "name");
      _this.name = t1 == null ? "" : J.toString$0$(t1);
      t1 = json.$index(0, "type");
      _this.type = t1 == null ? "num" : J.toString$0$(t1);
      t1 = _this.children;
      C.JSArray_methods.set$length(t1, 0);
      if (!!J.getInterceptor$(json.$index(0, _s8_)).$isList)
        for (t2 = J.get$iterator$ax(H.listSuperNativeTypeCheck(json.$index(0, _s8_), "$isIterable")), t3 = _this.builder, t4 = [U.Expression]; t2.moveNext$0();) {
          c = t2.get$current();
          child = new U.Expression(t3, H.stringTypeCheck(J.$index$asx(c, "type")), H.setRuntimeTypeInfo([], t4));
          C.JSArray_methods.add$1(t1, child);
          child.fromJSON$1(H.interceptedTypeCheck(c, "$isMap"));
        }
    },
    childMismatch$1: function(args) {
      var t1, t2, i, t3;
      if (args == null)
        return this.children.length !== 0;
      t1 = this.children;
      t2 = J.getInterceptor$asx(args);
      if (t1.length !== t2.get$length(args))
        return true;
      for (i = 0; i < t2.get$length(args); ++i) {
        t3 = t2.$index(args, i);
        if (i >= t1.length)
          return H.ioore(t1, i);
        if (!J.$eq$(t3, t1[i].type))
          return true;
      }
      return false;
    },
    setChildren$1: function(args) {
      var t2, t3, t4, i, t5, _this = this,
        t1 = _this.children,
        childless = t1.length === 0;
      if (_this.childMismatch$1(args)) {
        C.JSArray_methods.set$length(t1, 0);
        if (args != null)
          for (t2 = J.getInterceptor$asx(args), t3 = _this.builder, t4 = [U.Expression], i = 0; i < t2.get$length(args); ++i)
            if (i === 0 && childless && J.$eq$(t2.$index(args, i), _this.type)) {
              t5 = new U.Expression(t3, H.stringTypeCheck(t2.$index(args, i)), H.setRuntimeTypeInfo([], t4));
              t5.name = _this.name;
              C.JSArray_methods.add$1(t1, t5);
            } else
              C.JSArray_methods.add$1(t1, new U.Expression(t3, H.stringTypeCheck(t2.$index(args, i)), H.setRuntimeTypeInfo([], t4)));
      }
    },
    appendOperator$1: function($parent) {
      var t1, _this = this,
        div = document.createElement("div");
      C.DivElement_methods.setInnerHtml$1(div, H.S(_this.name));
      div.classList.add("nt-expression-text");
      div.classList.add("editable");
      t1 = H.S(_this.type);
      div.classList.add(t1);
      t1 = W.MouseEvent;
      W._EventStreamSubscription$(div, "click", H.functionTypeCheck(new U.Expression_appendOperator_closure(_this, div), {func: 1, ret: -1, args: [t1]}), false, t1);
      _this.electricBrace$2(div, $parent);
      $parent.appendChild(div);
    },
    electricBrace$2: function(curr, $parent) {
      var t1 = W.MouseEvent,
        t2 = {func: 1, ret: -1, args: [t1]};
      W._EventStreamSubscription$(curr, "mouseenter", H.functionTypeCheck(new U.Expression_electricBrace_closure($parent), t2), false, t1);
      W._EventStreamSubscription$(curr, "mouseleave", H.functionTypeCheck(new U.Expression_electricBrace_closure0($parent), t2), false, t1);
    },
    appendParen$2: function($parent, left) {
      var paren = document.createElement("div");
      C.DivElement_methods.setInnerHtml$1(paren, left ? "(" : ")");
      paren.classList.add("nt-expression-text");
      paren.classList.add("parenthesis");
      this.electricBrace$2(paren, $parent);
      $parent.appendChild(paren);
    },
    appendNumber$1: function($parent) {
      var input, t1, _this = this;
      _this.name = J.toString$0$(U.toNum(_this.name, 0));
      input = W.InputElement_InputElement("number");
      input.className = "nt-number-input";
      input.value = _this.name;
      input.step = "1";
      t1 = W.Event;
      W._EventStreamSubscription$(input, "change", H.functionTypeCheck(new U.Expression_appendNumber_closure(_this, input), {func: 1, ret: -1, args: [t1]}), false, t1);
      $parent.appendChild(input);
    },
    get$isNum: function() {
      var t1 = this.name;
      if (t1 != null)
        return P.num_parse(t1, new U.Expression_isNum_closure()) != null;
      return false;
    },
    renderHtml$1: function($parent) {
      var t1, t2, _this = this,
        div = document.createElement("div");
      div.className = "nt-expression";
      if ((_this.get$isNum() || _this.name == null) && _this.type === "num")
        _this.appendNumber$1(div);
      else if (_this.name == null) {
        div.classList.add("empty");
        C.DivElement_methods.appendHtml$1(div, "<small>&#9660;</small>");
      } else {
        t1 = _this.children;
        t2 = t1.length;
        if (t2 === 1) {
          _this.appendParen$2(div, true);
          _this.appendOperator$1(div);
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t1[0].renderHtml$1(div);
          _this.appendParen$2(div, false);
        } else if (t2 === 2) {
          _this.appendParen$2(div, true);
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t1[0].renderHtml$1(div);
          _this.appendOperator$1(div);
          if (1 >= t1.length)
            return H.ioore(t1, 1);
          t1[1].renderHtml$1(div);
          _this.appendParen$2(div, false);
        } else
          C.DivElement_methods.appendHtml$1(div, "<div class='nt-expression-text " + H.S(_this.type) + "'>" + H.S(_this.name) + "</div>");
      }
      if (_this.children.length === 0) {
        div.classList.add("editable");
        t1 = W.MouseEvent;
        W._EventStreamSubscription$(div, "click", H.functionTypeCheck(new U.Expression_renderHtml_closure(_this, div), {func: 1, ret: -1, args: [t1]}), false, t1);
      }
      $parent.appendChild(div);
    },
    openPulldown$1: function(expander) {
      var hmenu, link, _this = this,
        t1 = W.Element,
        t2 = document;
      H.assertIsSubtype(t1, t1, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in 'querySelectorAll'.");
      t1 = new W._FrozenElementList(t2.querySelectorAll(".nt-pulldown-menu"), [t1]);
      t1.forEach$1(t1, new U.Expression_openPulldown_closure());
      hmenu = t2.createElement("div");
      hmenu.classList.add("nt-pulldown-menu");
      t2 = _this.builder.workspace;
      _this._addMenuItems$2(hmenu, t2.expressions);
      if (J.get$isNotEmpty$asx(t2.variables))
        C.DivElement_methods.appendHtml$1(hmenu, "<hr>");
      _this._addMenuItems$2(hmenu, t2.variables);
      C.DivElement_methods.appendHtml$1(hmenu, "<hr>");
      link = W.AnchorElement_AnchorElement("#");
      C.AnchorElement_methods.setInnerHtml$1(link, "Clear");
      link.className = "clear";
      hmenu.appendChild(link);
      t1 = W.MouseEvent;
      W._EventStreamSubscription$(link, "click", H.functionTypeCheck(new U.Expression_openPulldown_closure0(_this, hmenu), {func: 1, ret: -1, args: [t1]}), false, t1);
      expander.appendChild(hmenu);
    },
    _addMenuItems$2: function(hmenu, items) {
      var t1, t2, t3, item, t4, e;
      for (t1 = J.get$iterator$ax(items), t2 = W.MouseEvent, t3 = {func: 1, ret: -1, args: [t2]}; t1.moveNext$0();) {
        item = t1.get$current();
        t4 = J.getInterceptor$asx(item);
        if (J.$eq$(t4.$index(item, "type"), this.type)) {
          e = document.createElement("a");
          e.href = "#";
          C.AnchorElement_methods.setInnerHtml$1(e, H.S(t4.$index(item, "name")));
          hmenu.appendChild(e);
          W._EventStreamSubscription$(e, "click", H.functionTypeCheck(new U.Expression__addMenuItems_closure(this, hmenu, item), t3), false, t2);
        }
      }
    }
  };
  U.Expression_appendOperator_closure.prototype = {
    call$1: function(e) {
      H.interceptedTypeCheck(e, "$isMouseEvent");
      this.$this.openPulldown$1(this.div);
      e.stopPropagation();
    },
    $signature: 1
  };
  U.Expression_electricBrace_closure.prototype = {
    call$1: function(e) {
      H.interceptedTypeCheck(e, "$isMouseEvent");
      this.parent.classList.add("highlight");
    },
    $signature: 1
  };
  U.Expression_electricBrace_closure0.prototype = {
    call$1: function(e) {
      H.interceptedTypeCheck(e, "$isMouseEvent");
      this.parent.classList.remove("highlight");
    },
    $signature: 1
  };
  U.Expression_appendNumber_closure.prototype = {
    call$1: function(e) {
      var t1 = this.$this,
        t2 = this.input,
        t3 = t2.value;
      t1.name = t3;
      if (t3 === "")
        t2.value = t1.name = "0";
    },
    $signature: 4
  };
  U.Expression_isNum_closure.prototype = {
    call$1: function(e) {
      return;
    },
    $signature: 29
  };
  U.Expression_renderHtml_closure.prototype = {
    call$1: function(e) {
      H.interceptedTypeCheck(e, "$isMouseEvent");
      this.$this.openPulldown$1(this.div);
      e.stopPropagation();
    },
    $signature: 1
  };
  U.Expression_openPulldown_closure.prototype = {
    call$1: function(el) {
      return J.remove$0$ax(H.interceptedTypeCheck(el, "$isElement"));
    },
    $signature: 14
  };
  U.Expression_openPulldown_closure0.prototype = {
    call$1: function(e) {
      var t1;
      H.interceptedTypeCheck(e, "$isMouseEvent");
      C.DivElement_methods.remove$0(this.hmenu);
      t1 = this.$this;
      t1.name = null;
      C.JSArray_methods.set$length(t1.children, 0);
      t1.builder.renderHtml$0();
      e.stopPropagation();
      e.preventDefault();
    },
    $signature: 1
  };
  U.Expression__addMenuItems_closure.prototype = {
    call$1: function(e) {
      var t1, t2, t3;
      H.interceptedTypeCheck(e, "$isMouseEvent");
      C.DivElement_methods.remove$0(this.hmenu);
      t1 = this.$this;
      t2 = this.item;
      t3 = J.getInterceptor$asx(t2);
      t1.setChildren$1(H.listTypeCheck(t3.$index(t2, "arguments")));
      t1.name = H.stringTypeCheck(t3.$index(t2, "name"));
      t1.type = H.stringTypeCheck(t3.$index(t2, "type"));
      t1.format = H.stringTypeCheck(t3.$index(t2, "format"));
      t1.builder.renderHtml$0();
      e.stopPropagation();
      e.preventDefault();
    },
    $signature: 1
  };
  U.ExpressionBuilder.prototype = {
    toString$0: function(_) {
      var t1,
        out = new P.StringBuffer("");
      this.root.displayString$1(out);
      t1 = out._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    fromJSON$1: function(json) {
      var t1 = J.getInterceptor$(json);
      if (!!t1.$isMap)
        this.root.fromJSON$1(json);
      else if (json != null)
        this.root.name = t1.toString$0(json);
    },
    renderHtml$0: function() {
      var _this = this,
        t1 = _this.parent;
      if (t1 != null && _this.root != null) {
        J.get$children$x(t1).clear$0(0);
        _this.root.renderHtml$1(H.interceptedTypeCheck(_this.parent, "$isDivElement"));
      }
    }
  };
  U.CodeFormatter.prototype = {
    _formatOutput$3: function(out, indent, post) {
      var i;
      for (i = 0; i < indent; ++i)
        out._contents += "  ";
      out._contents += post + "\n";
    },
    _formatBlock$3: function(out, block, indent) {
      var i, t4,
        t1 = J.getInterceptor$asx(block),
        fmt = H.stringTypeCheck(t1.$index(block, "format")),
        params = t1.$index(block, "params"),
        props = t1.$index(block, "properties"),
        t2 = J.getInterceptor$(params),
        pcount = !!t2.$isList ? t2.get$length(params) : 0,
        t3 = J.getInterceptor$(props),
        rcount = !!t3.$isList ? t3.get$length(props) : 0;
      if (typeof fmt !== "string") {
        fmt = H.S(t1.$index(block, "action"));
        for (i = 0; i < pcount; ++i)
          fmt += " {" + i + "}";
        for (i = 0; i < rcount; ++i)
          fmt += " {P" + i + "}";
      }
      for (i = 0; i < pcount; ++i) {
        t1 = "{" + i + "}";
        t4 = this._formatParameter$1(t2.$index(params, i));
        if (typeof t4 !== "string")
          H.throwExpression(H.argumentErrorValue(t4));
        fmt = H.stringReplaceAllUnchecked(fmt, t1, t4);
      }
      for (i = 0; i < rcount; ++i) {
        t1 = "{P" + i + "}";
        t2 = this._formatParameter$1(t3.$index(props, i));
        if (typeof t2 !== "string")
          H.throwExpression(H.argumentErrorValue(t2));
        fmt = H.stringReplaceAllUnchecked(fmt, t1, t2);
      }
      this._formatOutput$3(out, indent, fmt);
    },
    _formatParameter$1: function(param) {
      var _s5_ = "value",
        t1 = J.getInterceptor$asx(param);
      if (!!J.getInterceptor$(t1.$index(param, _s5_)).$isMap)
        return this._formatExpression$1(t1.$index(param, _s5_));
      else {
        t1 = t1.$index(param, _s5_);
        return t1 == null ? "" : J.toString$0$(t1);
      }
    },
    _formatExpression$1: function(expression) {
      var t2, $name, fmt, i, t3, _this = this,
        t1 = J.getInterceptor$asx(expression),
        c = t1.$index(expression, "children");
      if (c == null || !J.getInterceptor$(c).$isList)
        c = [];
      t2 = t1.$index(expression, "name");
      $name = t2 == null ? "" : J.toString$0$(t2);
      t2 = t1.$index(expression, "format");
      if (typeof t2 === "string") {
        fmt = H.stringTypeCheck(t1.$index(expression, "format"));
        for (t1 = J.getInterceptor$asx(c), i = 0; i < t1.get$length(c); ++i) {
          t2 = "{" + i + "}";
          t3 = _this._formatExpression$1(t1.$index(c, i));
          fmt.toString;
          if (typeof t3 !== "string")
            H.throwExpression(H.argumentErrorValue(t3));
          fmt = H.stringReplaceAllUnchecked(fmt, t2, t3);
        }
        return fmt;
      } else {
        t1 = J.getInterceptor$asx(c);
        if (t1.get$length(c) === 1)
          return "(" + H.S($name) + " " + H.S(_this._formatExpression$1(t1.$index(c, 0))) + ")";
        else if (t1.get$length(c) === 2)
          return "(" + H.S(_this._formatExpression$1(t1.$index(c, 0))) + " " + H.S($name) + " " + H.S(_this._formatExpression$1(t1.$index(c, 1))) + ")";
        else
          return $name;
      }
    }
  };
  U.PlainFormatter.prototype = {
    _format$1: function(parseTree) {
      var t1,
        out = new P.StringBuffer("");
      for (t1 = J.get$iterator$ax(H.listSuperNativeTypeCheck(parseTree.$index(0, "chains"), "$isIterable")); t1.moveNext$0();) {
        this._formatChain$3(out, t1.get$current(), 0);
        out._contents += "\n";
      }
      t1 = out._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _formatChain$3: function(out, chain, indent) {
      var t1, t2, block, t3, clause, t4, _this = this,
        _s8_ = "children";
      for (t1 = J.get$iterator$ax(H.listSuperNativeTypeCheck(chain, "$isIterable")), t2 = indent + 1; t1.moveNext$0();) {
        block = t1.get$current();
        _this._formatBlock$3(out, block, indent);
        t3 = J.getInterceptor$asx(block);
        if (!!J.getInterceptor$(t3.$index(block, _s8_)).$isList)
          _this._formatChain$3(out, t3.$index(block, _s8_), t2);
        if (!!J.getInterceptor$(t3.$index(block, "clauses")).$isList)
          for (t3 = J.get$iterator$ax(H.listSuperNativeTypeCheck(t3.$index(block, "clauses"), "$isIterable")); t3.moveNext$0();) {
            clause = t3.get$current();
            _this._formatBlock$3(out, clause, indent);
            t4 = J.getInterceptor$asx(clause);
            if (!!J.getInterceptor$(t4.$index(clause, _s8_)).$isList)
              _this._formatChain$3(out, t4.$index(clause, _s8_), t2);
          }
      }
    }
  };
  U.NetLogoFormatter.prototype = {
    _format$1: function(parseTree) {
      var chains, t1, chain, t2, _s6_ = "chains",
        out = new P.StringBuffer("");
      if (!J.getInterceptor$(parseTree.$index(0, _s6_)).$isList || J.get$length$asx(parseTree.$index(0, _s6_)) === 0)
        return "".charCodeAt(0) == 0 ? "" : "";
      chains = H.listTypeCheck(parseTree.$index(0, _s6_));
      t1 = J.getInterceptor$ax(chains);
      t1.sort$1(chains, U.ntango__compareChainsByAction$closure());
      for (t1 = t1.get$iterator(chains); t1.moveNext$0();) {
        chain = t1.get$current();
        t2 = J.getInterceptor$asx(chain);
        if (J.$gt$n(t2.get$length(chain), 0) && J.$eq$(J.$index$asx(t2.$index(chain, 0), "type"), "nlogo:procedure")) {
          this._formatBlock$3(out, t2.removeAt$1(chain, 0), 0);
          this._formatChain$3(out, chain, 1);
          t2 = out._contents += "end\n";
          out._contents = t2 + "\n";
        }
      }
      t1 = out._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _formatChain$3: function(out, chain, indent) {
      var t1, t2, block, t3, clause, t4, _this = this,
        _s8_ = "children";
      for (t1 = J.get$iterator$ax(H.listSuperNativeTypeCheck(chain, "$isIterable")), t2 = indent + 1; t1.moveNext$0();) {
        block = t1.get$current();
        _this._formatBlock$3(out, block, indent);
        t3 = J.getInterceptor$asx(block);
        if (!!J.getInterceptor$(t3.$index(block, _s8_)).$isList) {
          _this._formatOutput$3(out, indent, "[");
          _this._formatChain$3(out, t3.$index(block, _s8_), t2);
          _this._formatOutput$3(out, indent, "]");
        }
        if (!!J.getInterceptor$(t3.$index(block, "clauses")).$isList)
          for (t3 = J.get$iterator$ax(H.listSuperNativeTypeCheck(t3.$index(block, "clauses"), "$isIterable")); t3.moveNext$0();) {
            clause = t3.get$current();
            _this._formatBlock$3(out, clause, indent);
            t4 = J.getInterceptor$asx(clause);
            if (!!J.getInterceptor$(t4.$index(clause, _s8_)).$isList) {
              _this._formatOutput$3(out, indent, "[");
              _this._formatChain$3(out, t4.$index(clause, _s8_), t2);
              _this._formatOutput$3(out, indent, "]");
            }
          }
      }
    }
  };
  U.BlockMenu.prototype = {
    isOverMenu$1: function(block) {
      var t1, t2;
      if (!block._inMenu)
        if (!block._wasInMenu) {
          t1 = block.x;
          t2 = block.width;
          if (typeof t2 !== "number")
            return t2.$mul();
          if (typeof t1 !== "number")
            return t1.$add();
          t2 = t1 + t2 * 0.75 >= this.workspace.width - this.width;
          t1 = t2;
        } else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    getBlockById$1: function(id) {
      var t1 = this.slots,
        t2 = H.getTypeArgumentByIndex(t1, 0),
        matches = new H.WhereIterable(t1, H.functionTypeCheck(new U.BlockMenu_getBlockById_closure(id), {func: 1, ret: P.bool, args: [t2]}), [t2]);
      if (matches.get$length(matches) === 1)
        return matches.get$first(matches).block;
      return;
    },
    _resize$1: function(ctx) {
      var t2, t3, _i, t4, w, t5,
        t1 = $.$get$BLOCK_WIDTH();
      if (typeof t1 !== "number")
        return t1.$mul();
      t1 = this.width = t1 * 1.5;
      for (t2 = this.slots, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i, t1 = t5) {
        t4 = t2[_i].block;
        ctx.save();
        ctx.font = t4.font;
        w = ctx.measureText(t4.action).width;
        ctx.restore();
        t4 = $.$get$BLOCK_PADDING();
        if (typeof t4 !== "number")
          return t4.$mul();
        if (typeof w !== "number")
          return w.$add();
        t5 = $.$get$BLOCK_GUTTER();
        if (typeof t5 !== "number")
          return t5.$mul();
        t5 = Math.max(t1, w + t4 * 2 + t5 * 2);
        this.width = t5;
      }
    },
    draw$2: function(ctx, highlightTrash) {
      var t1, t2, t3, ix, iy, _i, slot, t4, t5, t6, _this = this;
      _this._resize$1(ctx);
      ctx.save();
      ctx.fillStyle = "rgba(0,0,0, 0.2)";
      t1 = _this.workspace;
      t2 = t1.width;
      t3 = _this.width;
      ctx.fillRect(t2 - t3, 0, t3, t1.height);
      if (highlightTrash) {
        t2 = t1.width;
        t3 = _this.width;
        ctx.fillRect(t2 - t3, 0, t3, t1.height);
      }
      t1 = t1.width;
      t2 = _this.width;
      t3 = $.$get$BLOCK_GUTTER();
      if (typeof t3 !== "number")
        return H.iae(t3);
      ix = t1 - t2 + t3;
      t3 = $.$get$BLOCK_HEIGHT();
      if (typeof t3 !== "number")
        return t3.$div();
      iy = 0 + t3 / 2;
      for (t1 = _this.slots, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        slot = t1[_i];
        slot.x = ix;
        slot.y = iy;
        t4 = slot.count;
        t5 = slot.workspace;
        t6 = slot.block;
        t5.getBlockCount$1(t6.id);
        if (typeof t4 !== "number")
          return t4.$sub();
        ctx.save();
        t5 = t5.getBlockCount$1(t6.id);
        if (!(t4 < 0 || t4 - t5 > 0))
          ctx.globalAlpha = 0.3;
        t6.x = slot.x;
        t6.y = slot.y;
        t6._resizeChain$2(ctx, $.$get$BLOCK_WIDTH());
        t6._drawBlock$1(ctx);
        t6._drawLabel$1(ctx);
        t6._drawOutline$1(ctx);
        ctx.restore();
        iy += t3 * 1.5;
      }
      ctx.restore();
    }
  };
  U.BlockMenu_getBlockById_closure.prototype = {
    call$1: function(s) {
      return H.interceptedTypeCheck(s, "$isSlot").block.id == this.id;
    },
    $signature: 31
  };
  U.Slot.prototype = {
    isAvailable$0: function() {
      var t1 = this.count,
        t2 = this.workspace.getBlockCount$1(this.block.id);
      if (typeof t1 !== "number")
        return t1.$sub();
      return t1 < 0 || t1 - t2 > 0;
    },
    containsTouch$1: function(c) {
      return this.block.containsTouch$1(c);
    },
    touchDown$1: function(c) {
      var t1, target, t2, t3, _i, _this = this;
      if (_this.isAvailable$0()) {
        t1 = _this.block;
        target = t1.clone$0(0);
        target.id = t1.id;
        t2 = t1.x;
        if (typeof t2 !== "number")
          return t2.$sub();
        target.x = t2 - 5;
        t1 = t1.y;
        if (typeof t1 !== "number")
          return t1.$sub();
        target.y = t1 - 5;
        target._wasInMenu = true;
        t1 = _this.workspace;
        t1._addBlock$1(target);
        if (!!target.$isBeginBlock)
          for (t2 = target.clauses, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i)
            t1._addBlock$1(t2[_i]);
        return target.touchDown$1(c);
      }
      return _this;
    },
    touchUp$1: function(c) {
    },
    touchDrag$1: function(c) {
    },
    touchSlide$1: function(c) {
    },
    $isTouchable: 1
  };
  U.Parameter.prototype = {
    get$value: function(_) {
      var t1 = this._ntango$_value;
      return t1 == null ? "" : J.toString$0$(t1);
    },
    set$value: function(_, v) {
      this._ntango$_value = v == null ? "" : J.toString$0$(v);
    },
    get$valueAsString: function() {
      return H.S(J.toString$0$(this._ntango$_value)) + H.S(this.unit);
    },
    Parameter$2: function(block, data) {
      var t1, t2, t3, _this = this;
      if (H.boolConversionCheck(data.containsKey$1("id"))) {
        t1 = H.intTypeCheck(data.$index(0, "id"));
        _this.id = t1;
        t2 = _this.block;
        t3 = t2.nextParamId;
        if (typeof t1 !== "number")
          return t1.$ge();
        if (t1 >= t3)
          t2.nextParamId = t1 + 1;
      } else
        t1 = _this.id = _this.block.nextParamId++;
      data.$indexSet(0, "id", t1);
      t1 = data.$index(0, "type");
      _this.type = t1 == null ? "num" : J.toString$0$(t1);
      t1 = data.$index(0, "name");
      _this.name = t1 == null ? "" : J.toString$0$(t1);
      t1 = data.$index(0, "unit");
      _this.unit = t1 == null ? "" : J.toString$0$(t1);
      t1 = data.$index(0, "default");
      _this.defaultValue = t1;
      _this.set$value(0, t1);
    },
    clone$1: function(_, $parent) {
      return U.Parameter_Parameter$fromJSON($parent, this.toJSON$0());
    },
    toJSON$0: function() {
      var _this = this;
      return P.LinkedHashMap__makeLiteral(["id", _this.id, "type", _this.type, "name", _this.name, "unit", _this.unit, "value", _this.get$value(_this), "default", _this.defaultValue]);
    },
    _resize$1: function(ctx) {
      var t2, _this = this,
        t1 = $.$get$BLOCK_PADDING();
      if (typeof t1 !== "number")
        return t1.$mul();
      _this.width = t1 * 2;
      ctx.save();
      ctx.font = _this.block.font;
      t1 = _this.width;
      t2 = ctx.measureText(_this.get$valueAsString()).width;
      if (typeof t2 !== "number")
        return H.iae(t2);
      _this.width = t1 + t2;
      ctx.restore();
    },
    draw$3: function(ctx, left, $top) {
      var t1, t2, x, t3, t4, t5, y, w, t6, t7, t8, _this = this;
      _this._left = left;
      _this._top = $top;
      t1 = _this.block;
      ctx.font = t1.font;
      ctx.textAlign = "center";
      ctx.textBaseline = "middle";
      t2 = t1.x;
      if (typeof t2 !== "number")
        return t2.$add();
      x = t2 + left;
      t2 = t1.y;
      if (typeof t2 !== "number")
        return t2.$add();
      t3 = $.$get$BLOCK_HEIGHT();
      if (typeof t3 !== "number")
        return t3.$div();
      t4 = _this.height;
      t5 = t4 / 2;
      y = t2 + $top + t3 / 2 - t5;
      w = _this.width;
      ctx.beginPath();
      ctx.beginPath();
      t3 = x + t5;
      ctx.moveTo(t3, y);
      t2 = x + w;
      t6 = t2 - t5;
      ctx.lineTo(t6, y);
      t7 = y + t5;
      ctx.quadraticCurveTo(t2, y, t2, t7);
      t8 = y + t4;
      t5 = t8 - t5;
      ctx.lineTo(t2, t5);
      ctx.quadraticCurveTo(t2, t8, t6, t8);
      ctx.lineTo(t3, t8);
      ctx.quadraticCurveTo(x, t8, x, t5);
      ctx.lineTo(x, t7);
      ctx.quadraticCurveTo(x, y, t3, y);
      ctx.closePath();
      ctx.fillStyle = _this._down ? t1.blockColor : t1.textColor;
      ctx.fill();
      ctx.fillStyle = _this._down ? t1.textColor : t1.blockColor;
      C.CanvasRenderingContext2D_methods.fillText$3(ctx, _this.get$valueAsString(), x + w / 2, y + t4 * 0.55);
    },
    draw$2: function(ctx, left) {
      return this.draw$3(ctx, left, 0);
    },
    containsTouch$1: function(c) {
      var t5, _this = this,
        t1 = c.touchX,
        t2 = _this.block,
        t3 = t2.x,
        t4 = _this._left;
      if (typeof t3 !== "number")
        return t3.$add();
      t4 = t3 + t4;
      if (t1 >= t4) {
        t3 = c.touchY;
        t2 = t2.y;
        t5 = _this._top;
        if (typeof t2 !== "number")
          return t2.$add();
        t5 = t2 + t5;
        if (t3 >= t5)
          if (t1 <= t4 + _this.width) {
            t1 = $.$get$BLOCK_HEIGHT();
            if (typeof t1 !== "number")
              return H.iae(t1);
            t1 = t3 <= t5 + t1;
          } else
            t1 = false;
        else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    touchUp$1: function(c) {
      this._down = false;
      this._showParameterDialog$2(H.intTypeCheck(c.originalX), H.intTypeCheck(c.originalY));
      this.block.workspace.draw$0();
    },
    touchDown$1: function(c) {
      this._down = true;
      this.block.workspace.draw$0();
      return this;
    },
    touchDrag$1: function(c) {
    },
    touchSlide$1: function(c) {
    },
    _showParameterDialog$2: function(x, y) {
      var inputCode, container, label, input, t2, t3, t4, t5, _this = this,
        _s19_ = "The type argument '",
        _s47_ = "' is not a subtype of the type variable bound '",
        _s45_ = "' of type variable 'T' in 'querySelectorAll'.",
        t1 = document,
        backdrop = t1.createElement("div");
      backdrop.className = "backdrop";
      inputCode = _this._buildHTMLInput$0();
      C.DivElement_methods.appendHtml$1(backdrop, '      <div class="nt-param-dialog" style="top: ' + y + ';">\n        <div class="nt-param-table">\n          <div class="nt-param-row">' + inputCode + '</div>\n        </div>\n        <button class="nt-param-confirm">OK</button>\n        <button class="nt-param-cancel">Cancel</button>\n      </div>');
      container = H.interceptedTypeCheck(t1.querySelector("#" + H.S(_this.block.workspace.canvasId)).parentElement, "$isHtmlElement");
      if (container == null)
        return;
      container.appendChild(backdrop);
      label = H.interceptedTypeCheck(t1.querySelector("#nt-param-label-" + H.S(_this.id)), "$isHtmlElement");
      input = H.interceptedTypeCheck(t1.querySelector("#nt-param-" + H.S(_this.id)), "$isInputElement");
      t2 = W.Element;
      H.assertIsSubtype(t2, t2, _s19_, _s47_, _s45_);
      t3 = [t2];
      t4 = [t2];
      t5 = [W.MouseEvent];
      new W._ElementListEventStreamImpl(H.assertSubtype(new W._FrozenElementList(t1.querySelectorAll(".nt-param-confirm"), t3), "$isElementList", t4, "$asElementList"), false, "click", t5).listen$1(new U.Parameter__showParameterDialog_closure(_this, input, backdrop));
      H.assertIsSubtype(t2, t2, _s19_, _s47_, _s45_);
      new W._ElementListEventStreamImpl(H.assertSubtype(new W._FrozenElementList(t1.querySelectorAll(".nt-param-cancel"), t3), "$isElementList", t4, "$asElementList"), false, "click", t5).listen$1(new U.Parameter__showParameterDialog_closure0(backdrop));
      backdrop.classList.add("show");
      if (input != null) {
        input.focus();
        if (label != null) {
          t1 = W.Event;
          t2 = {func: 1, ret: -1, args: [t1]};
          W._EventStreamSubscription$(input, "change", H.functionTypeCheck(new U.Parameter__showParameterDialog_closure1(label, input), t2), false, t1);
          W._EventStreamSubscription$(input, "input", H.functionTypeCheck(new U.Parameter__showParameterDialog_closure2(label, input), t2), false, t1);
        }
      }
    },
    _buildHTMLInput$0: function() {
      return '      <input class="nt-param-input" id="nt-param-' + H.S(this.id) + '" type="text" value="' + this.get$valueAsString() + '">\n      <span class="nt-param-unit">' + H.S(this.unit) + "</span>\n    ";
    },
    $isTouchable: 1
  };
  U.Parameter__showParameterDialog_closure.prototype = {
    call$1: function(e) {
      var t1, _this = this;
      H.interceptedTypeCheck(e, "$isMouseEvent");
      t1 = _this.input;
      if (t1 != null)
        _this.$this.set$value(0, t1.value);
      C.DivElement_methods.remove$0(_this.backdrop);
      t1 = _this.$this.block.workspace;
      t1.draw$0();
      t1.programChanged$0();
    },
    $signature: 1
  };
  U.Parameter__showParameterDialog_closure0.prototype = {
    call$1: function(e) {
      H.interceptedTypeCheck(e, "$isMouseEvent");
      return C.DivElement_methods.remove$0(this.backdrop);
    },
    $signature: 5
  };
  U.Parameter__showParameterDialog_closure1.prototype = {
    call$1: function(e) {
      J.setInnerHtml$1$x(this.label, this.input.value);
    },
    $signature: 4
  };
  U.Parameter__showParameterDialog_closure2.prototype = {
    call$1: function(e) {
      J.setInnerHtml$1$x(this.label, this.input.value);
    },
    $signature: 4
  };
  U.NumParameter.prototype = {
    NumParameter$2: function(block, data) {
      this.random = U.toBool(data.$index(0, "random"), false);
      this.stepSize = U.toNum(data.$index(0, "step"), this.stepSize);
    },
    toJSON$0: function() {
      var json = this.super$Parameter$toJSON();
      json.$indexSet(0, "random", this.random);
      json.$indexSet(0, "step", this.stepSize);
      return json;
    },
    get$value: function(_) {
      return U.toNum(this._ntango$_value, 0);
    },
    set$value: function(_, v) {
      this._ntango$_value = U.toNum(v, 0);
    },
    get$valueAsString: function() {
      var s = J.toStringAsFixed$1$n(this.get$value(this), 1);
      if (C.JSString_methods.endsWith$1(s, ".0"))
        s = C.JSString_methods.substring$2(s, 0, s.length - 2);
      return s + H.S(this.unit);
    },
    _buildHTMLInput$0: function() {
      var _this = this;
      return '      <div class="nt-param-name">' + H.S(_this.name) + '</div>\n      <div class="nt-param-value">\n        <input class="nt-param-input" id="nt-param-' + H.S(_this.id) + '" type="number" step="' + H.S(_this.stepSize) + '" value="' + H.S(_this.get$value(_this)) + '">\n        <span class="nt-param-unit">' + H.S(_this.unit) + "</span>\n      </div>\n    ";
    }
  };
  U.IntParameter.prototype = {
    get$value: function(_) {
      return U.toInt(this._ntango$_value, 0);
    },
    set$value: function(_, v) {
      this._ntango$_value = U.toInt(v, 0);
    }
  };
  U.RangeParameter.prototype = {
    toJSON$0: function() {
      var json = this.super$NumParameter$toJSON();
      json.$indexSet(0, "min", this.minValue);
      json.$indexSet(0, "max", this.maxValue);
      return json;
    },
    _showParameterDialog$2: function(x, y) {
      var dialog, t2, t3, table, container, label, input, _this = this,
        t1 = document,
        backdrop = t1.createElement("div");
      backdrop.className = "backdrop";
      dialog = t1.createElement("div");
      dialog.className = "nt-param-dialog";
      t2 = dialog.style;
      t3 = "" + y + "px";
      t2.top = t3;
      table = t1.createElement("div");
      table.className = "nt-param-table";
      C.DivElement_methods.appendHtml$1(table, '        <div class="nt-param-row">\n          <div class="nt-param-label">\n            ' + H.S(_this.name) + ':\n            <label id="nt-param-label-' + H.S(_this.id) + '" for="nt-param-' + H.S(_this.id) + '">' + H.S(U.toNum(_this._ntango$_value, 0)) + '</label>\n            <span class="nt-param-unit">' + H.S(_this.unit) + '</span>\n          </div>\n        </div>\n        <div class="nt-param-row">\n          <div class="nt-param-value">\n            <input class="nt-param-input" id="nt-param-' + H.S(_this.id) + '" type="range" value="' + H.S(U.toNum(_this._ntango$_value, 0)) + '" min="' + H.S(_this.minValue) + '" max="' + H.S(_this.maxValue) + '" step="' + H.S(_this.stepSize) + '">\n          </div>\n        </div>\n      ');
      dialog.appendChild(table);
      t2 = W.MouseEvent;
      t3 = {func: 1, ret: -1, args: [t2]};
      W._EventStreamSubscription$(dialog, "click", H.functionTypeCheck(new U.RangeParameter__showParameterDialog_closure(), t3), false, t2);
      backdrop.appendChild(dialog);
      W._EventStreamSubscription$(backdrop, "click", H.functionTypeCheck(new U.RangeParameter__showParameterDialog_closure0(backdrop), t3), false, t2);
      container = H.interceptedTypeCheck(t1.querySelector("#" + H.S(_this.block.workspace.canvasId)).parentElement, "$isHtmlElement");
      if (container != null)
        container.appendChild(backdrop);
      label = H.interceptedTypeCheck(t1.querySelector("#nt-param-label-" + H.S(_this.id)), "$isHtmlElement");
      input = H.interceptedTypeCheck(t1.querySelector("#nt-param-" + H.S(_this.id)), "$isInputElement");
      if (input != null && label != null) {
        t1 = W.Event;
        t2 = {func: 1, ret: -1, args: [t1]};
        W._EventStreamSubscription$(input, "change", H.functionTypeCheck(new U.RangeParameter__showParameterDialog_closure1(_this, input, backdrop), t2), false, t1);
        W._EventStreamSubscription$(input, "input", H.functionTypeCheck(new U.RangeParameter__showParameterDialog_closure2(label, input), t2), false, t1);
      }
      backdrop.classList.add("show");
    }
  };
  U.RangeParameter__showParameterDialog_closure.prototype = {
    call$1: function(e) {
      H.interceptedTypeCheck(e, "$isMouseEvent").stopPropagation();
    },
    $signature: 1
  };
  U.RangeParameter__showParameterDialog_closure0.prototype = {
    call$1: function(e) {
      H.interceptedTypeCheck(e, "$isMouseEvent");
      C.DivElement_methods.remove$0(this.backdrop);
    },
    $signature: 1
  };
  U.RangeParameter__showParameterDialog_closure1.prototype = {
    call$1: function(e) {
      var t1 = this.$this;
      t1._ntango$_value = U.toNum(this.input.value, 0);
      C.DivElement_methods.remove$0(this.backdrop);
      t1 = t1.block.workspace;
      t1.draw$0();
      t1.programChanged$0();
      e.stopPropagation();
    },
    $signature: 4
  };
  U.RangeParameter__showParameterDialog_closure2.prototype = {
    call$1: function(e) {
      J.setInnerHtml$1$x(this.label, this.input.value);
    },
    $signature: 4
  };
  U.SelectParameter.prototype = {
    get$valueAsString: function() {
      return H.S(J.toString$0$(this._display)) + H.S(this.unit) + " \u25be";
    },
    clone$1: function(_, $parent) {
      return U.SelectParameter$($parent, this.toJSON$0());
    },
    toJSON$0: function() {
      var json = this.super$Parameter$toJSON();
      json.$indexSet(0, "values", this.values);
      return json;
    },
    _chooseDisplayValue$1: function(v) {
      var _s7_ = "display",
        t1 = H.boolConversionCheck(v.containsKey$1(_s7_)) && !J.$eq$(J.$index$asx(v, _s7_), ""),
        t2 = J.getInterceptor$asx(v);
      return t1 ? t2.$index(v, _s7_) : t2.$index(v, "actual");
    },
    _showParameterDialog$2: function(x, y) {
      var dialog, t2, t3, table, t4, v, row, t5, t6, display, opt, container, _this = this,
        _s7_ = "display",
        t1 = document,
        backdrop = t1.createElement("div");
      backdrop.className = "backdrop";
      dialog = t1.createElement("div");
      dialog.className = "nt-param-dialog small";
      t2 = dialog.style;
      t3 = "" + y + "px";
      t2.top = t3;
      table = t1.createElement("div");
      table.className = "nt-param-table";
      for (t2 = J.get$iterator$ax(_this.values), t3 = W.MouseEvent, t4 = {func: 1, ret: -1, args: [t3]}; t2.moveNext$0();) {
        v = t2.get$current();
        row = t1.createElement("div");
        row.className = "nt-param-row";
        t5 = H.boolConversionCheck(v.containsKey$1(_s7_)) && !J.$eq$(J.$index$asx(v, _s7_), "");
        t6 = J.getInterceptor$asx(v);
        display = t5 ? t6.$index(v, _s7_) : t6.$index(v, "actual");
        opt = t1.createElement("div");
        opt.className = "nt-select-option";
        C.DivElement_methods.setInnerHtml$1(opt, H.stringTypeCheck(display));
        t5 = J.$index$asx(v, "actual");
        t6 = _this._ntango$_value;
        if (J.$eq$(t5, t6 == null ? "" : J.toString$0$(t6)))
          opt.classList.add("selected");
        W._EventStreamSubscription$(opt, "click", H.functionTypeCheck(new U.SelectParameter__showParameterDialog_closure(_this, v, backdrop), t4), false, t3);
        row.appendChild(opt);
        table.appendChild(row);
      }
      dialog.appendChild(table);
      backdrop.appendChild(dialog);
      W._EventStreamSubscription$(backdrop, "click", H.functionTypeCheck(new U.SelectParameter__showParameterDialog_closure0(backdrop), t4), false, t3);
      container = H.interceptedTypeCheck(t1.querySelector("#" + H.S(_this.block.workspace.canvasId)).parentElement, "$isHtmlElement");
      if (container != null)
        container.appendChild(backdrop);
      backdrop.classList.add("show");
    }
  };
  U.SelectParameter__showParameterDialog_closure.prototype = {
    call$1: function(e) {
      var t1, t2;
      H.interceptedTypeCheck(e, "$isMouseEvent");
      t1 = this.$this;
      t2 = this.v;
      t1._display = t1._chooseDisplayValue$1(t2);
      t2 = J.$index$asx(t2, "actual");
      t1._ntango$_value = t2 == null ? "" : J.toString$0$(t2);
      C.DivElement_methods.remove$0(this.backdrop);
      t1 = t1.block.workspace;
      t1.draw$0();
      t1.programChanged$0();
      e.stopPropagation();
    },
    $signature: 1
  };
  U.SelectParameter__showParameterDialog_closure0.prototype = {
    call$1: function(e) {
      H.interceptedTypeCheck(e, "$isMouseEvent");
      C.DivElement_methods.remove$0(this.backdrop);
    },
    $signature: 1
  };
  U.ExpressionParameter.prototype = {
    get$valueAsString: function() {
      var t1 = this.builder;
      return t1 != null ? t1.toString$0(0) : "";
    },
    get$value: function(_) {
      return this._ntango$_value;
    },
    set$value: function(_, v) {
      var t1;
      this._ntango$_value = v;
      t1 = this.builder;
      if (t1 != null)
        t1.fromJSON$1(v);
    },
    clone$1: function(_, $parent) {
      return U.ExpressionParameter$($parent, this.toJSON$0());
    },
    _showParameterDialog$2: function(x, y) {
      var container, t2, t3, t4, t5, t6, t7, _this = this,
        _s17_ = ".nt-param-confirm",
        _s19_ = "The type argument '",
        _s47_ = "' is not a subtype of the type variable bound '",
        _s45_ = "' of type variable 'T' in 'querySelectorAll'.",
        _s5_ = "click",
        t1 = document,
        backdrop = t1.createElement("div");
      backdrop.className = "backdrop";
      C.DivElement_methods.appendHtml$1(backdrop, '      <div class="nt-param-dialog" style="top: ' + y + ';">\n        <div class="nt-param-table">\n          <div class="nt-param-row">\n            <div class="nt-param-label">' + H.S(_this.name) + ':</div>\n          </div>\n          <div class="nt-param-row">\n            <div id="nt-expression-' + H.S(_this.id) + '" class="nt-expression-root"></div>\n          </div>\n        </div>\n        <button class="nt-param-confirm">OK</button>\n        <button class="nt-param-cancel">Cancel</button>\n      </div>');
      container = H.interceptedTypeCheck(t1.querySelector("#" + H.S(_this.block.workspace.canvasId)).parentElement, "$isHtmlElement");
      if (container == null)
        return;
      container.appendChild(backdrop);
      t2 = W.Element;
      H.assertIsSubtype(t2, t2, _s19_, _s47_, _s45_);
      t3 = [t2];
      t4 = [t2];
      t5 = [W.MouseEvent];
      new W._ElementListEventStreamImpl(H.assertSubtype(new W._FrozenElementList(t1.querySelectorAll(_s17_), t3), "$isElementList", t4, "$asElementList"), false, _s5_, t5).listen$1(new U.ExpressionParameter__showParameterDialog_closure(_this, backdrop));
      H.assertIsSubtype(t2, t2, _s19_, _s47_, _s45_);
      new W._ElementListEventStreamImpl(H.assertSubtype(new W._FrozenElementList(t1.querySelectorAll(_s17_), t3), "$isElementList", t4, "$asElementList"), false, "mousedown", t5).listen$1(new U.ExpressionParameter__showParameterDialog_closure0());
      H.assertIsSubtype(t2, t2, _s19_, _s47_, _s45_);
      new W._ElementListEventStreamImpl(H.assertSubtype(new W._FrozenElementList(t1.querySelectorAll(_s17_), t3), "$isElementList", t4, "$asElementList"), false, "mouseup", t5).listen$1(new U.ExpressionParameter__showParameterDialog_closure1());
      H.assertIsSubtype(t2, t2, _s19_, _s47_, _s45_);
      new W._ElementListEventStreamImpl(H.assertSubtype(new W._FrozenElementList(t1.querySelectorAll(".nt-param-cancel"), t3), "$isElementList", t4, "$asElementList"), false, _s5_, t5).listen$1(new U.ExpressionParameter__showParameterDialog_closure2(backdrop));
      backdrop.classList.add("show");
      t6 = _this.builder;
      t7 = "#nt-expression-" + H.S(_this.id);
      t6.toString;
      t6.parent = t1.querySelector(t7);
      t6.renderHtml$0();
      H.assertIsSubtype(t2, t2, _s19_, _s47_, _s45_);
      new W._ElementListEventStreamImpl(H.assertSubtype(new W._FrozenElementList(t1.querySelectorAll(".nt-param-dialog"), t3), "$isElementList", t4, "$asElementList"), false, _s5_, t5).listen$1(new U.ExpressionParameter__showParameterDialog_closure3());
    }
  };
  U.ExpressionParameter__showParameterDialog_closure.prototype = {
    call$1: function(e) {
      var t1, t2;
      H.interceptedTypeCheck(e, "$isMouseEvent");
      t1 = W.Element;
      t2 = document;
      H.assertIsSubtype(t1, t1, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in 'querySelectorAll'.");
      if (t2.querySelectorAll(".nt-expression.empty").length > 0)
        return false;
      t1 = this.$this;
      t1._ntango$_value = t1.builder.root.toJSON$0();
      C.DivElement_methods.remove$0(this.backdrop);
      t1 = t1.block.workspace;
      t1.draw$0();
      t1.programChanged$0();
    },
    $signature: 33
  };
  U.ExpressionParameter__showParameterDialog_closure0.prototype = {
    call$1: function(e) {
      var t1, t2;
      H.interceptedTypeCheck(e, "$isMouseEvent");
      t1 = W.Element;
      t2 = document;
      H.assertIsSubtype(t1, t1, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in 'querySelectorAll'.");
      t1 = new W._FrozenElementList(t2.querySelectorAll(".nt-expression.empty"), [t1]);
      t1.forEach$1(t1, new U.ExpressionParameter__showParameterDialog__closure1());
    },
    $signature: 1
  };
  U.ExpressionParameter__showParameterDialog__closure1.prototype = {
    call$1: function(el) {
      return J.get$classes$x(H.interceptedTypeCheck(el, "$isElement")).add$1(0, "warn");
    },
    $signature: 18
  };
  U.ExpressionParameter__showParameterDialog_closure1.prototype = {
    call$1: function(e) {
      var t1, t2;
      H.interceptedTypeCheck(e, "$isMouseEvent");
      t1 = W.Element;
      t2 = document;
      H.assertIsSubtype(t1, t1, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in 'querySelectorAll'.");
      t1 = new W._FrozenElementList(t2.querySelectorAll(".nt-expression.empty"), [t1]);
      t1.forEach$1(t1, new U.ExpressionParameter__showParameterDialog__closure0());
    },
    $signature: 1
  };
  U.ExpressionParameter__showParameterDialog__closure0.prototype = {
    call$1: function(el) {
      return J.get$classes$x(H.interceptedTypeCheck(el, "$isElement")).remove$1(0, "warn");
    },
    $signature: 18
  };
  U.ExpressionParameter__showParameterDialog_closure2.prototype = {
    call$1: function(e) {
      H.interceptedTypeCheck(e, "$isMouseEvent");
      C.DivElement_methods.remove$0(this.backdrop);
    },
    $signature: 1
  };
  U.ExpressionParameter__showParameterDialog_closure3.prototype = {
    call$1: function(e) {
      var t1, t2;
      H.interceptedTypeCheck(e, "$isMouseEvent");
      t1 = W.Element;
      t2 = document;
      H.assertIsSubtype(t1, t1, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in 'querySelectorAll'.");
      t1 = new W._FrozenElementList(t2.querySelectorAll(".nt-pulldown-menu"), [t1]);
      t1.forEach$1(t1, new U.ExpressionParameter__showParameterDialog__closure());
    },
    $signature: 1
  };
  U.ExpressionParameter__showParameterDialog__closure.prototype = {
    call$1: function(el) {
      return J.remove$0$ax(H.interceptedTypeCheck(el, "$isElement"));
    },
    $signature: 14
  };
  U.CodeWorkspace.prototype = {
    CodeWorkspace$2: function(canvasId, definition) {
      var t2, t3, canvas, t4, t5, b, block, limit, _this = this,
        _s9_ = "variables",
        _s11_ = "expressions",
        t1 = _this.definition;
      if (!J.$eq$(t1.$index(0, "version"), 2))
        throw H.wrapException("The supported NetTango version is 2, but the given definition version was " + H.S(t1.$index(0, "version")) + ".");
      t2 = _this.canvasId;
      t3 = "#" + H.S(t2);
      canvas = H.interceptedTypeCheck(document.querySelector(t3), "$isCanvasElement");
      if (canvas == null)
        throw H.wrapException("No canvas element with ID " + H.S(t2) + " found.");
      _this.ctx = H.interceptedTypeCheck(C.CanvasElement_methods.getContext$1(canvas, "2d"), "$isCanvasRenderingContext2D");
      t2 = canvas.style;
      t3 = H.S(canvas.width) + "px";
      t2.width = t3;
      t2 = canvas.style;
      t3 = H.S(canvas.height) + "px";
      t2.height = t3;
      t2 = canvas.width;
      t3 = $.$get$SCALE();
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof t3 !== "number")
        return H.iae(t3);
      _this.width = C.JSNumber_methods.floor$0(t2 * t3);
      t2 = canvas.height;
      if (typeof t2 !== "number")
        return t2.$mul();
      t2 = C.JSNumber_methods.floor$0(t2 * t3);
      _this.height = t2;
      canvas.width = _this.width;
      canvas.height = t2;
      t2 = _this.xform;
      t4 = [P.double];
      t5 = new U.Matrix2D(H.setRuntimeTypeInfo([1, 0, 0, 0, 1, 0, 0, 0, 1], t4));
      t5.set$xform(H.setRuntimeTypeInfo([1 / t3, 0, 0, 0, 1 / t3, 0, 0, 0, 1], t4));
      t2.multiply$1(t5);
      _this.iform = t2.invert$0();
      t2 = _this.tmanager;
      t2.registerEvents$1(canvas);
      C.JSArray_methods.add$1(t2.layers, _this);
      t2 = H.setRuntimeTypeInfo([], [U.Slot]);
      t5 = $.$get$BLOCK_WIDTH();
      t4 = $.$get$BLOCK_GUTTER();
      if (typeof t4 !== "number")
        return t4.$mul();
      if (typeof t5 !== "number")
        return t5.$add();
      _this.menu = new U.BlockMenu(_this, t2, t5 + t4 * 2);
      if (!!J.getInterceptor$(t1.$index(0, "blocks")).$isList)
        for (t2 = J.get$iterator$ax(H.listSuperNativeTypeCheck(t1.$index(0, "blocks"), "$isIterable")); t2.moveNext$0();) {
          b = H.interceptedTypeCheck(t2.get$current(), "$isMap");
          block = U.Block_Block$fromJSON(_this, b);
          limit = U.toInt(b.$index(0, "limit"), -1);
          t3 = _this.menu;
          t4 = t3.slots;
          t3 = t3.workspace;
          t5 = new U.Slot(block, t3, limit);
          block._inMenu = true;
          C.JSArray_methods.add$1(t3.touchables, t5);
          C.JSArray_methods.add$1(t4, t5);
        }
      if (!!J.getInterceptor$(t1.$index(0, _s9_)).$isList)
        _this.variables = H.listTypeCheck(t1.$index(0, _s9_));
      if (!!J.getInterceptor$(t1.$index(0, _s11_)).$isList)
        _this.expressions = H.listTypeCheck(t1.$index(0, _s11_));
      if (!!J.getInterceptor$(t1.$index(0, "program")).$isMap)
        _this._restoreProgram$1(H.interceptedTypeCheck(t1.$index(0, "program"), "$isMap"));
      _this.draw$0();
      _this.tick$0();
    },
    unload$0: function() {
      var _this = this;
      C.JSArray_methods.set$length(_this.touchables, 0);
      C.JSArray_methods.set$length(_this.blocks, 0);
      C.JSArray_methods.remove$1(_this.tmanager.layers, _this);
    },
    tick$0: function() {
      if (this.animate$0(0))
        this.draw$0();
      C.Window_methods.get$animationFrame(window).then$1$1(new U.CodeWorkspace_tick_closure(this), -1);
    },
    programChanged$0: function() {
      var exception;
      this.draw$0();
      try {
        $.$get$context().$index(0, "NetTango").callMethod$2("_relayCallback", H.setRuntimeTypeInfo([this.canvasId], [P.String]));
      } catch (exception) {
        H.unwrapException(exception);
        P.print("Unable to relay program changed event to Javascript");
      }
    },
    exportParseTree$0: function() {
      var t1, t2, _i, block, t3, chain, t4,
        json = P.LinkedHashMap__makeLiteral(["chains", []]);
      for (t1 = this.blocks, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        block = t1[_i];
        if (block.get$isStartOfChain()) {
          t3 = json.$index(0, "chains");
          chain = [];
          block._exportParseTree$1(chain);
          J.add$1$ax(t3, chain);
        }
      }
      for (t1 = this.menu.slots, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        t3 = t1[_i].block;
        if (t3.required)
          if (this.getBlockCount$1(t3.id) === 0) {
            t4 = json.$index(0, "chains");
            chain = [];
            t3._exportParseTree$1(chain);
            J.add$1$ax(t4, chain);
          }
      }
      return json;
    },
    _addBlock$1: function(block) {
      var t1, t2;
      C.JSArray_methods.add$1(this.blocks, block);
      t1 = this.touchables;
      C.JSArray_methods.add$1(t1, block);
      for (t2 = block.params, t2 = t2.get$values(t2), t2 = new H.MappedIterator(J.get$iterator$ax(t2.__internal$_iterable), t2._f, [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)]); t2.moveNext$0();)
        C.JSArray_methods.add$1(t1, t2.__internal$_current);
      for (t2 = block.properties, t2 = t2.get$values(t2), t2 = new H.MappedIterator(J.get$iterator$ax(t2.__internal$_iterable), t2._f, [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)]); t2.moveNext$0();)
        C.JSArray_methods.add$1(t1, t2.__internal$_current);
    },
    _removeBlock$1: function(block) {
      var t1, t2;
      C.JSArray_methods.remove$1(this.blocks, block);
      t1 = this.touchables;
      C.JSArray_methods.remove$1(t1, block);
      for (t2 = block.params, t2 = t2.get$values(t2), t2 = new H.MappedIterator(J.get$iterator$ax(t2.__internal$_iterable), t2._f, [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)]); t2.moveNext$0();)
        C.JSArray_methods.remove$1(t1, t2.__internal$_current);
      for (t2 = block.properties, t2 = t2.get$values(t2), t2 = new H.MappedIterator(J.get$iterator$ax(t2.__internal$_iterable), t2._f, [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)]); t2.moveNext$0();)
        C.JSArray_methods.remove$1(t1, t2.__internal$_current);
      this.draw$0();
    },
    getBlockCount$1: function(id) {
      var t1 = this.blocks,
        t2 = H.getTypeArgumentByIndex(t1, 0);
      t2 = new H.WhereIterable(t1, H.functionTypeCheck(new U.CodeWorkspace_getBlockCount_closure(id), {func: 1, ret: P.bool, args: [t2]}), [t2]);
      return t2.get$length(t2);
    },
    _snapTogether$1: function(target) {
      var below, bottom,
        hit = this._findTopConnector$1(target);
      if (hit != null) {
        below = hit.next;
        hit.next = target;
        target.prev = hit;
        if (below != null) {
          bottom = target.get$bottomOfChain();
          below.prev = bottom;
          bottom.next = below;
        }
        return true;
      }
      hit = this._findBottomConnector$1(target);
      if (hit != null) {
        hit.prev = target;
        target.next = hit;
        return true;
      }
      return false;
    },
    _trashChain$1: function(target) {
      var t1, t2;
      if (this.menu.isOverMenu$1(target)) {
        for (t1 = this.blocks, t2 = this.touchables; target != null;) {
          C.JSArray_methods.remove$1(t1, target);
          C.JSArray_methods.remove$1(t2, target);
          target = target.get$nextChain();
        }
        return true;
      }
      return false;
    },
    _findTopConnector$1: function(target) {
      var t1, t2, _i, block, t3, t4, t5, by0, by1;
      if (target.prev == null && target.hasTopConnector)
        for (t1 = this.blocks, t2 = t1.length, _i = 0; _i < t2; ++_i) {
          block = t1[_i];
          if (block !== target) {
            t3 = target.x;
            t4 = block.x;
            t5 = block.width;
            if (typeof t4 !== "number")
              return t4.$add();
            if (typeof t5 !== "number")
              return H.iae(t5);
            if (typeof t3 !== "number")
              return t3.$lt();
            if (t3 < t4 + t5) {
              t5 = target.width;
              if (typeof t5 !== "number")
                return H.iae(t5);
              t4 = t3 + t5 > t4;
              t3 = t4;
            } else
              t3 = false;
            if (t3) {
              by0 = block.y;
              t3 = block._inMenu ? $.$get$BLOCK_HEIGHT() : block._height;
              if (typeof by0 !== "number")
                return by0.$add();
              if (typeof t3 !== "number")
                return H.iae(t3);
              by1 = by0 + t3;
              t3 = $.$get$BLOCK_PADDING();
              if (typeof t3 !== "number")
                return H.iae(t3);
              t4 = block.next == null;
              if (!t4) {
                t5 = target.y;
                if (typeof t5 !== "number")
                  return t5.$lt();
                t5 = t5 < by1 && t5 > by0;
              } else
                t5 = false;
              if (t5)
                return block;
              else {
                if (t4) {
                  t4 = target.y;
                  if (typeof t4 !== "number")
                    return t4.$gt();
                  t3 = t4 > by0 && t4 < by1 + t3;
                } else
                  t3 = false;
                if (t3)
                  return block;
              }
            }
          }
        }
      return;
    },
    _findBottomConnector$1: function(target) {
      var t1, t2, _i, block, t3, t4, t5;
      if (target.next == null)
        for (t1 = this.blocks, t2 = t1.length, _i = 0; _i < t2; ++_i) {
          block = t1[_i];
          if (block !== target && block.prev == null && block.hasTopConnector) {
            t3 = target.x;
            t4 = block.x;
            t5 = block.width;
            if (typeof t4 !== "number")
              return t4.$add();
            if (typeof t5 !== "number")
              return H.iae(t5);
            if (typeof t3 !== "number")
              return t3.$lt();
            if (t3 < t4 + t5) {
              t5 = target.width;
              if (typeof t5 !== "number")
                return H.iae(t5);
              t4 = t3 + t5 > t4;
              t3 = t4;
            } else
              t3 = false;
            if (t3) {
              t3 = block.y;
              t4 = target.y;
              t5 = target._inMenu ? $.$get$BLOCK_HEIGHT() : target._height;
              if (typeof t4 !== "number")
                return t4.$add();
              if (typeof t5 !== "number")
                return H.iae(t5);
              if (typeof t3 !== "number")
                return t3.$sub();
              if (Math.abs(t3 - (t4 + t5)) < 20)
                return block;
            }
          }
        }
      return;
    },
    animate$0: function(_) {
      var t1, t2, refresh, lowestY, _i, block, t3, t4, t5, t6, t7, w, h, canvas, _this = this;
      _this.menu.toString;
      for (t1 = _this.blocks, t2 = t1.length, refresh = false, lowestY = 0, _i = 0; _i < t2; ++_i) {
        block = t1[_i];
        t3 = block._dragging;
        if (t3) {
          t4 = block.x;
          t5 = block._touchX;
          t6 = block._lastX;
          if (typeof t5 !== "number")
            return t5.$sub();
          if (typeof t6 !== "number")
            return H.iae(t6);
          if (typeof t4 !== "number")
            return t4.$add();
          block.x = t4 + (t5 - t6);
          t6 = block.y;
          t4 = block._touchY;
          t7 = block._lastY;
          if (typeof t4 !== "number")
            return t4.$sub();
          if (typeof t7 !== "number")
            return H.iae(t7);
          if (typeof t6 !== "number")
            return t6.$add();
          block.y = t6 + (t4 - t7);
          block._lastX = t5;
          block._lastY = t4;
        }
        if (t3)
          refresh = true;
        t3 = block.y;
        t4 = block._inMenu ? $.$get$BLOCK_HEIGHT() : block._height;
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t4 !== "number")
          return H.iae(t4);
        lowestY = Math.max(t3 + t4, lowestY);
      }
      if (lowestY > _this.height)
        if (!refresh) {
          t1 = _this.width;
          t2 = $.$get$SCALE();
          if (typeof t2 !== "number")
            return H.iae(t2);
          t3 = $.$get$BLOCK_HEIGHT();
          if (typeof t3 !== "number")
            return t3.$mul();
          w = C.JSDouble_methods.round$0(t1 / t2);
          h = C.JSDouble_methods.round$0((lowestY + t3 * 3) / t2);
          t3 = "#" + H.S(_this.canvasId);
          canvas = H.interceptedTypeCheck(document.querySelector(t3), "$isCanvasElement");
          if (canvas != null) {
            t1 = canvas.style;
            t3 = "" + w + "px";
            t1.width = t3;
            t1 = canvas.style;
            t3 = "" + h + "px";
            t1.height = t3;
            _this.width = C.JSNumber_methods.floor$0(w * t2);
            t1 = C.JSNumber_methods.floor$0(h * t2);
            _this.height = t1;
            canvas.width = _this.width;
            canvas.height = t1;
            _this.ctx = H.interceptedTypeCheck(C.CanvasElement_methods.getContext$1(canvas, "2d"), "$isCanvasRenderingContext2D");
            _this.draw$0();
          }
        }
      return refresh;
    },
    draw$0: function() {
      var drags, t1, t2, overMenu, _i, block, t3, t4, t5, target, t6, t7, t8, _this = this;
      _this.ctx.save();
      _this.ctx.clearRect(0, 0, _this.width, _this.height);
      drags = H.setRuntimeTypeInfo([], [U.Block]);
      for (t1 = _this.blocks, t2 = t1.length, overMenu = false, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        block = t1[_i];
        if (block.prev == null && !(block instanceof U.ClauseBlock)) {
          block._reindentChain$2(0, null);
          block._repositionChain$0();
          block._resizeChain$2(_this.ctx, $.$get$BLOCK_WIDTH());
        }
        if (block._dragging)
          C.JSArray_methods.add$1(drags, block);
        t3 = _this.menu;
        t3.toString;
        if (!block._inMenu)
          if (!block._wasInMenu) {
            t4 = block.x;
            t5 = block.width;
            if (typeof t5 !== "number")
              return t5.$mul();
            if (typeof t4 !== "number")
              return t4.$add();
            t3 = t4 + t5 * 0.75 >= t3.workspace.width - t3.width;
          } else
            t3 = false;
        else
          t3 = false;
        if (t3)
          overMenu = true;
      }
      _this.menu.draw$2(_this.ctx, overMenu);
      for (t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        block = t1[_i];
        if (block._dragging) {
          target = _this._findTopConnector$1(block);
          if (target != null) {
            t3 = _this.ctx;
            t3.save();
            t3.lineWidth = 5;
            t3.strokeStyle = "cyan";
            t3.beginPath();
            t4 = target.x;
            t5 = target.width;
            if (typeof t4 !== "number")
              return t4.$add();
            if (typeof t5 !== "number")
              return H.iae(t5);
            t6 = $.$get$BLOCK_PADDING();
            if (typeof t6 !== "number")
              return H.iae(t6);
            t7 = target.y;
            t8 = target._inMenu ? $.$get$BLOCK_HEIGHT() : target._height;
            if (typeof t7 !== "number")
              return t7.$add();
            if (typeof t8 !== "number")
              return H.iae(t8);
            t3.moveTo(t4 + t5 - t6, t7 + t8);
            target._outlineBottom$2(t3, target.next == null && target.indent === 0);
            t3.stroke();
            t3.restore();
          } else {
            target = _this._findBottomConnector$1(block);
            if (target != null) {
              t3 = _this.ctx;
              t3.save();
              t3.lineWidth = 5;
              t3.strokeStyle = "cyan";
              t3.beginPath();
              t4 = target.x;
              t5 = $.$get$BLOCK_PADDING();
              if (typeof t4 !== "number")
                return t4.$add();
              if (typeof t5 !== "number")
                return H.iae(t5);
              t6 = $.$get$BLOCK_INDENT();
              t7 = target.get$indentAbove();
              if (typeof t6 !== "number")
                return t6.$mul();
              t3.moveTo(t4 + t5 + t6 * t7, target.y);
              target._outlineTop$2(t3, target.prev == null && target.hasTopConnector);
              t3.stroke();
              t3.restore();
            }
          }
        }
        block._drawBlock$1(_this.ctx);
        block._drawLabel$1(_this.ctx);
        block._drawParameters$1(_this.ctx);
        block._drawProperties$1(_this.ctx);
        block._drawOutline$1(_this.ctx);
      }
      _this.ctx.restore();
    },
    _restoreProgram$1: function(json) {
      var t1, chain, t2, b;
      if (!!J.getInterceptor$(json.$index(0, "chains")).$isList)
        for (t1 = J.get$iterator$ax(H.listSuperNativeTypeCheck(json.$index(0, "chains"), "$isIterable")); t1.moveNext$0();) {
          chain = t1.get$current();
          t2 = J.getInterceptor$(chain);
          if (!!t2.$isList)
            for (t2 = t2.get$iterator(chain); t2.moveNext$0();) {
              b = t2.get$current();
              if (!!J.getInterceptor$(b).$isMap)
                this._restoreBlock$1(b);
            }
        }
    },
    _restoreBlock$1: function(json) {
      var t1, t2, t3, block, _i, block0, child, clause, _this = this,
        _s8_ = "children",
        proto = _this.menu.getBlockById$1(H.intTypeCheck(json.$index(0, "id")));
      if (proto == null) {
        P.print("No prototype block found for id: " + H.S(json.$index(0, "id")));
        t1 = _this.menu.slots;
        t2 = P.int;
        t3 = H.getTypeArgumentByIndex(t1, 0);
        P.print(new H.MappedListIterable(t1, H.functionTypeCheck(new U.CodeWorkspace__restoreBlock_closure(), {func: 1, ret: t2, args: [t3]}), [t3, t2]));
        return;
      }
      block = proto.clone$0(0);
      t1 = json.$index(0, "x");
      if (typeof t1 === "number") {
        t1 = json.$index(0, "y");
        t1 = typeof t1 === "number";
      } else
        t1 = false;
      if (t1) {
        t1 = json.$index(0, "x");
        t2 = $.$get$BLOCK_UNIT();
        block.x = H.numTypeCheck(J.$mul$ns(t1, t2));
        block.y = H.numTypeCheck(J.$mul$ns(json.$index(0, "y"), t2));
      }
      _this._addBlock$1(block);
      if (!!block.$isBeginBlock)
        for (t1 = block.clauses, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          _this._addBlock$1(t1[_i]);
      _this._snapTogether$1(block);
      for (t1 = _this.blocks, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        block0 = t1[_i];
        if (block0.prev == null && !(block0 instanceof U.ClauseBlock)) {
          block0._reindentChain$2(0, null);
          block0._repositionChain$0();
          block0._resizeChain$2(_this.ctx, $.$get$BLOCK_WIDTH());
        }
      }
      _this._restoreParams$3(block, H.listTypeCheck(json.$index(0, "params")), H.listTypeCheck(json.$index(0, "properties")));
      if (!!J.getInterceptor$(json.$index(0, _s8_)).$isList)
        for (t1 = J.get$iterator$ax(H.listSuperNativeTypeCheck(json.$index(0, _s8_), "$isIterable")); t1.moveNext$0();) {
          child = t1.get$current();
          if (!!J.getInterceptor$(child).$isMap)
            _this._restoreBlock$1(child);
        }
      if (!!J.getInterceptor$(json.$index(0, "clauses")).$isList)
        for (t1 = J.get$iterator$ax(H.listSuperNativeTypeCheck(json.$index(0, "clauses"), "$isIterable")); t1.moveNext$0();) {
          clause = t1.get$current();
          t2 = J.getInterceptor$(clause);
          if (!!t2.$isMap && !!J.getInterceptor$(clause.$index(0, _s8_)).$isList)
            for (t2 = J.get$iterator$ax(H.listSuperNativeTypeCheck(t2.$index(clause, _s8_), "$isIterable")); t2.moveNext$0();)
              _this._restoreBlock$1(H.interceptedTypeCheck(t2.get$current(), "$isMap"));
        }
    },
    _restoreParams$3: function(block, params, properties) {
      var t2, param, t3, prop, _s2_ = "id", _s5_ = "value",
        t1 = J.getInterceptor$(params);
      if (!!t1.$isList)
        for (t1 = t1.get$iterator(params), t2 = block.params; t1.moveNext$0();) {
          param = t1.get$current();
          t3 = J.getInterceptor$(param);
          if (!!t3.$isMap && H.boolConversionCheck(param.containsKey$1(_s2_)) && H.boolConversionCheck(param.containsKey$1(_s5_)) && t2.containsKey$1(param.$index(0, _s2_)))
            J.set$value$x(t2.$index(0, t3.$index(param, _s2_)), t3.$index(param, _s5_));
        }
      t1 = J.getInterceptor$(properties);
      if (!!t1.$isList)
        for (t1 = t1.get$iterator(properties), t2 = block.properties; t1.moveNext$0();) {
          prop = t1.get$current();
          t3 = J.getInterceptor$(prop);
          if (!!t3.$isMap && H.boolConversionCheck(prop.containsKey$1(_s2_)) && H.boolConversionCheck(prop.containsKey$1(_s5_)) && t2.containsKey$1(prop.$index(0, _s2_)))
            J.set$value$x(t2.$index(0, t3.$index(prop, _s2_)), t3.$index(prop, _s5_));
        }
    }
  };
  U.CodeWorkspace_tick_closure.prototype = {
    call$1: function(time) {
      H.numTypeCheck(time);
      return this.$this.tick$0();
    },
    $signature: 44
  };
  U.CodeWorkspace_getBlockCount_closure.prototype = {
    call$1: function(b) {
      return H.interceptedTypeCheck(b, "$isBlock").id == this.id;
    },
    $signature: 36
  };
  U.CodeWorkspace__restoreBlock_closure.prototype = {
    call$1: function(s) {
      return H.interceptedTypeCheck(s, "$isSlot").block.id;
    },
    $signature: 37
  };
  U.Matrix2D.prototype = {
    invert$0: function() {
      var t3, t4, t5, t6, t7, t8, t9, t10, t11, det, invDet,
        t1 = H.setRuntimeTypeInfo([1, 0, 0, 0, 1, 0, 0, 0, 1], [P.double]),
        i = new U.Matrix2D(t1),
        m = this.xform,
        t2 = m.length;
      if (0 >= t2)
        return H.ioore(m, 0);
      t3 = m[0];
      if (4 >= t2)
        return H.ioore(m, 4);
      t4 = m[4];
      if (8 >= t2)
        return H.ioore(m, 8);
      t2 = m[8];
      if (typeof t4 !== "number")
        return t4.$mul();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t5 = m[7];
      t6 = m[5];
      if (typeof t5 !== "number")
        return t5.$mul();
      if (typeof t6 !== "number")
        return H.iae(t6);
      t7 = t4 * t2 - t5 * t6;
      if (typeof t3 !== "number")
        return t3.$mul();
      t8 = m[3];
      t9 = m[1];
      if (typeof t9 !== "number")
        return t9.$mul();
      t10 = m[2];
      if (typeof t10 !== "number")
        return H.iae(t10);
      if (typeof t8 !== "number")
        return t8.$mul();
      t11 = m[6];
      if (typeof t11 !== "number")
        return t11.$mul();
      det = t3 * t7 - t8 * (t9 * t2 - t5 * t10) + t11 * (t9 * t6 - t4 * t10);
      if (det === 0)
        return i;
      invDet = 1 / det;
      C.JSArray_methods.$indexSet(t1, 0, invDet * t7);
      t2 = m.length;
      if (6 >= t2)
        return H.ioore(m, 6);
      t3 = m[6];
      t4 = m[5];
      if (typeof t3 !== "number")
        return t3.$mul();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = m[3];
      if (8 >= t2)
        return H.ioore(m, 8);
      t2 = m[8];
      if (typeof t5 !== "number")
        return t5.$mul();
      if (typeof t2 !== "number")
        return H.iae(t2);
      C.JSArray_methods.$indexSet(t1, 3, invDet * (t3 * t4 - t5 * t2));
      t2 = m.length;
      if (3 >= t2)
        return H.ioore(m, 3);
      t5 = m[3];
      if (7 >= t2)
        return H.ioore(m, 7);
      t2 = m[7];
      if (typeof t5 !== "number")
        return t5.$mul();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t4 = m[6];
      t3 = m[4];
      if (typeof t4 !== "number")
        return t4.$mul();
      if (typeof t3 !== "number")
        return H.iae(t3);
      C.JSArray_methods.$indexSet(t1, 6, invDet * (t5 * t2 - t4 * t3));
      t3 = m.length;
      if (7 >= t3)
        return H.ioore(m, 7);
      t4 = m[7];
      t2 = m[2];
      if (typeof t4 !== "number")
        return t4.$mul();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t5 = m[1];
      if (8 >= t3)
        return H.ioore(m, 8);
      t3 = m[8];
      if (typeof t5 !== "number")
        return t5.$mul();
      if (typeof t3 !== "number")
        return H.iae(t3);
      C.JSArray_methods.$indexSet(t1, 1, invDet * (t4 * t2 - t5 * t3));
      t3 = m.length;
      if (0 >= t3)
        return H.ioore(m, 0);
      t5 = m[0];
      if (8 >= t3)
        return H.ioore(m, 8);
      t3 = m[8];
      if (typeof t5 !== "number")
        return t5.$mul();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t2 = m[6];
      t4 = m[2];
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof t4 !== "number")
        return H.iae(t4);
      C.JSArray_methods.$indexSet(t1, 4, invDet * (t5 * t3 - t2 * t4));
      t4 = m.length;
      if (6 >= t4)
        return H.ioore(m, 6);
      t2 = m[6];
      t3 = m[1];
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t5 = m[0];
      if (7 >= t4)
        return H.ioore(m, 7);
      t4 = m[7];
      if (typeof t5 !== "number")
        return t5.$mul();
      if (typeof t4 !== "number")
        return H.iae(t4);
      C.JSArray_methods.$indexSet(t1, 7, invDet * (t2 * t3 - t5 * t4));
      t4 = m.length;
      if (1 >= t4)
        return H.ioore(m, 1);
      t5 = m[1];
      if (5 >= t4)
        return H.ioore(m, 5);
      t4 = m[5];
      if (typeof t5 !== "number")
        return t5.$mul();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t3 = m[4];
      t2 = m[2];
      if (typeof t3 !== "number")
        return t3.$mul();
      if (typeof t2 !== "number")
        return H.iae(t2);
      C.JSArray_methods.$indexSet(t1, 2, invDet * (t5 * t4 - t3 * t2));
      t2 = m.length;
      if (3 >= t2)
        return H.ioore(m, 3);
      t3 = m[3];
      t4 = m[2];
      if (typeof t3 !== "number")
        return t3.$mul();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = m[0];
      if (5 >= t2)
        return H.ioore(m, 5);
      t2 = m[5];
      if (typeof t5 !== "number")
        return t5.$mul();
      if (typeof t2 !== "number")
        return H.iae(t2);
      C.JSArray_methods.$indexSet(t1, 5, invDet * (t3 * t4 - t5 * t2));
      t2 = m.length;
      if (0 >= t2)
        return H.ioore(m, 0);
      t5 = m[0];
      if (4 >= t2)
        return H.ioore(m, 4);
      t2 = m[4];
      if (typeof t5 !== "number")
        return t5.$mul();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t4 = m[3];
      t3 = m[1];
      if (typeof t4 !== "number")
        return t4.$mul();
      if (typeof t3 !== "number")
        return H.iae(t3);
      C.JSArray_methods.$indexSet(t1, 8, invDet * (t5 * t2 - t4 * t3));
      return i;
    },
    multiply$1: function(right) {
      var t4, t5, t6, t7, t8, t9, i, _this = this,
        t1 = H.setRuntimeTypeInfo([1, 0, 0, 0, 1, 0, 0, 0, 1], [P.double]),
        t2 = _this.xform,
        t3 = t2.length;
      if (0 >= t3)
        return H.ioore(t2, 0);
      t4 = t2[0];
      t5 = right.xform;
      t6 = t5.length;
      if (0 >= t6)
        return H.ioore(t5, 0);
      t7 = t5[0];
      if (typeof t4 !== "number")
        return t4.$mul();
      if (typeof t7 !== "number")
        return H.iae(t7);
      if (1 >= t3)
        return H.ioore(t2, 1);
      t8 = t2[1];
      if (3 >= t6)
        return H.ioore(t5, 3);
      t9 = t5[3];
      if (typeof t8 !== "number")
        return t8.$mul();
      if (typeof t9 !== "number")
        return H.iae(t9);
      if (2 >= t3)
        return H.ioore(t2, 2);
      t2 = t2[2];
      if (6 >= t6)
        return H.ioore(t5, 6);
      t5 = t5[6];
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof t5 !== "number")
        return H.iae(t5);
      C.JSArray_methods.$indexSet(t1, 0, t4 * t7 + t8 * t9 + t2 * t5);
      t5 = _this.xform;
      t2 = t5.length;
      if (0 >= t2)
        return H.ioore(t5, 0);
      t9 = t5[0];
      t8 = right.xform;
      t7 = t8.length;
      if (1 >= t7)
        return H.ioore(t8, 1);
      t4 = t8[1];
      if (typeof t9 !== "number")
        return t9.$mul();
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (1 >= t2)
        return H.ioore(t5, 1);
      t6 = t5[1];
      if (4 >= t7)
        return H.ioore(t8, 4);
      t3 = t8[4];
      if (typeof t6 !== "number")
        return t6.$mul();
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (2 >= t2)
        return H.ioore(t5, 2);
      t5 = t5[2];
      if (7 >= t7)
        return H.ioore(t8, 7);
      t8 = t8[7];
      if (typeof t5 !== "number")
        return t5.$mul();
      if (typeof t8 !== "number")
        return H.iae(t8);
      C.JSArray_methods.$indexSet(t1, 1, t9 * t4 + t6 * t3 + t5 * t8);
      t8 = _this.xform;
      t5 = t8.length;
      if (0 >= t5)
        return H.ioore(t8, 0);
      t3 = t8[0];
      t6 = right.xform;
      t4 = t6.length;
      if (2 >= t4)
        return H.ioore(t6, 2);
      t9 = t6[2];
      if (typeof t3 !== "number")
        return t3.$mul();
      if (typeof t9 !== "number")
        return H.iae(t9);
      if (1 >= t5)
        return H.ioore(t8, 1);
      t7 = t8[1];
      if (5 >= t4)
        return H.ioore(t6, 5);
      t2 = t6[5];
      if (typeof t7 !== "number")
        return t7.$mul();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (2 >= t5)
        return H.ioore(t8, 2);
      t8 = t8[2];
      if (8 >= t4)
        return H.ioore(t6, 8);
      t6 = t6[8];
      if (typeof t8 !== "number")
        return t8.$mul();
      if (typeof t6 !== "number")
        return H.iae(t6);
      C.JSArray_methods.$indexSet(t1, 2, t3 * t9 + t7 * t2 + t8 * t6);
      t6 = _this.xform;
      t8 = t6.length;
      if (3 >= t8)
        return H.ioore(t6, 3);
      t2 = t6[3];
      t7 = right.xform;
      t9 = t7.length;
      if (0 >= t9)
        return H.ioore(t7, 0);
      t3 = t7[0];
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (4 >= t8)
        return H.ioore(t6, 4);
      t4 = t6[4];
      if (3 >= t9)
        return H.ioore(t7, 3);
      t5 = t7[3];
      if (typeof t4 !== "number")
        return t4.$mul();
      if (typeof t5 !== "number")
        return H.iae(t5);
      if (5 >= t8)
        return H.ioore(t6, 5);
      t6 = t6[5];
      if (6 >= t9)
        return H.ioore(t7, 6);
      t7 = t7[6];
      if (typeof t6 !== "number")
        return t6.$mul();
      if (typeof t7 !== "number")
        return H.iae(t7);
      C.JSArray_methods.$indexSet(t1, 3, t2 * t3 + t4 * t5 + t6 * t7);
      t7 = _this.xform;
      t6 = t7.length;
      if (3 >= t6)
        return H.ioore(t7, 3);
      t5 = t7[3];
      t4 = right.xform;
      t3 = t4.length;
      if (1 >= t3)
        return H.ioore(t4, 1);
      t2 = t4[1];
      if (typeof t5 !== "number")
        return t5.$mul();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (4 >= t6)
        return H.ioore(t7, 4);
      t9 = t7[4];
      if (4 >= t3)
        return H.ioore(t4, 4);
      t8 = t4[4];
      if (typeof t9 !== "number")
        return t9.$mul();
      if (typeof t8 !== "number")
        return H.iae(t8);
      if (5 >= t6)
        return H.ioore(t7, 5);
      t7 = t7[5];
      if (7 >= t3)
        return H.ioore(t4, 7);
      t4 = t4[7];
      if (typeof t7 !== "number")
        return t7.$mul();
      if (typeof t4 !== "number")
        return H.iae(t4);
      C.JSArray_methods.$indexSet(t1, 4, t5 * t2 + t9 * t8 + t7 * t4);
      t4 = _this.xform;
      t7 = t4.length;
      if (3 >= t7)
        return H.ioore(t4, 3);
      t8 = t4[3];
      t9 = right.xform;
      t2 = t9.length;
      if (2 >= t2)
        return H.ioore(t9, 2);
      t5 = t9[2];
      if (typeof t8 !== "number")
        return t8.$mul();
      if (typeof t5 !== "number")
        return H.iae(t5);
      if (4 >= t7)
        return H.ioore(t4, 4);
      t3 = t4[4];
      if (5 >= t2)
        return H.ioore(t9, 5);
      t6 = t9[5];
      if (typeof t3 !== "number")
        return t3.$mul();
      if (typeof t6 !== "number")
        return H.iae(t6);
      if (5 >= t7)
        return H.ioore(t4, 5);
      t4 = t4[5];
      if (8 >= t2)
        return H.ioore(t9, 8);
      t9 = t9[8];
      if (typeof t4 !== "number")
        return t4.$mul();
      if (typeof t9 !== "number")
        return H.iae(t9);
      C.JSArray_methods.$indexSet(t1, 5, t8 * t5 + t3 * t6 + t4 * t9);
      t9 = _this.xform;
      t4 = t9.length;
      if (6 >= t4)
        return H.ioore(t9, 6);
      t6 = t9[6];
      t3 = right.xform;
      t5 = t3.length;
      if (0 >= t5)
        return H.ioore(t3, 0);
      t8 = t3[0];
      if (typeof t6 !== "number")
        return t6.$mul();
      if (typeof t8 !== "number")
        return H.iae(t8);
      if (7 >= t4)
        return H.ioore(t9, 7);
      t2 = t9[7];
      if (3 >= t5)
        return H.ioore(t3, 3);
      t7 = t3[3];
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof t7 !== "number")
        return H.iae(t7);
      if (8 >= t4)
        return H.ioore(t9, 8);
      t9 = t9[8];
      if (6 >= t5)
        return H.ioore(t3, 6);
      t3 = t3[6];
      if (typeof t9 !== "number")
        return t9.$mul();
      if (typeof t3 !== "number")
        return H.iae(t3);
      C.JSArray_methods.$indexSet(t1, 6, t6 * t8 + t2 * t7 + t9 * t3);
      t3 = _this.xform;
      t9 = t3.length;
      if (6 >= t9)
        return H.ioore(t3, 6);
      t7 = t3[6];
      t2 = right.xform;
      t8 = t2.length;
      if (1 >= t8)
        return H.ioore(t2, 1);
      t6 = t2[1];
      if (typeof t7 !== "number")
        return t7.$mul();
      if (typeof t6 !== "number")
        return H.iae(t6);
      if (7 >= t9)
        return H.ioore(t3, 7);
      t5 = t3[7];
      if (4 >= t8)
        return H.ioore(t2, 4);
      t4 = t2[4];
      if (typeof t5 !== "number")
        return t5.$mul();
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (8 >= t9)
        return H.ioore(t3, 8);
      t3 = t3[8];
      if (7 >= t8)
        return H.ioore(t2, 7);
      t2 = t2[7];
      if (typeof t3 !== "number")
        return t3.$mul();
      if (typeof t2 !== "number")
        return H.iae(t2);
      C.JSArray_methods.$indexSet(t1, 7, t7 * t6 + t5 * t4 + t3 * t2);
      t2 = _this.xform;
      t3 = t2.length;
      if (6 >= t3)
        return H.ioore(t2, 6);
      t4 = t2[6];
      t5 = right.xform;
      t6 = t5.length;
      if (2 >= t6)
        return H.ioore(t5, 2);
      t7 = t5[2];
      if (typeof t4 !== "number")
        return t4.$mul();
      if (typeof t7 !== "number")
        return H.iae(t7);
      if (7 >= t3)
        return H.ioore(t2, 7);
      t8 = t2[7];
      if (5 >= t6)
        return H.ioore(t5, 5);
      t9 = t5[5];
      if (typeof t8 !== "number")
        return t8.$mul();
      if (typeof t9 !== "number")
        return H.iae(t9);
      if (8 >= t3)
        return H.ioore(t2, 8);
      t2 = t2[8];
      if (8 >= t6)
        return H.ioore(t5, 8);
      t5 = t5[8];
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof t5 !== "number")
        return H.iae(t5);
      C.JSArray_methods.$indexSet(t1, 8, t4 * t7 + t8 * t9 + t2 * t5);
      for (i = 0; i < 9; ++i) {
        t2 = _this.xform;
        if (i >= t1.length)
          return H.ioore(t1, i);
        C.JSArray_methods.$indexSet(t2, i, t1[i]);
      }
    },
    transformContact$1: function(c) {
      var t4, t5, t6, t7, t8, t9,
        t1 = c.touchX,
        t2 = this.xform,
        t3 = t2.length;
      if (0 >= t3)
        return H.ioore(t2, 0);
      t4 = t2[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = c.touchY;
      if (1 >= t3)
        return H.ioore(t2, 1);
      t6 = t2[1];
      if (typeof t6 !== "number")
        return H.iae(t6);
      if (2 >= t3)
        return H.ioore(t2, 2);
      t7 = t2[2];
      if (typeof t7 !== "number")
        return H.iae(t7);
      if (3 >= t3)
        return H.ioore(t2, 3);
      t8 = t2[3];
      if (typeof t8 !== "number")
        return H.iae(t8);
      if (4 >= t3)
        return H.ioore(t2, 4);
      t9 = t2[4];
      if (typeof t9 !== "number")
        return H.iae(t9);
      if (5 >= t3)
        return H.ioore(t2, 5);
      t2 = t2[5];
      if (typeof t2 !== "number")
        return H.iae(t2);
      c.touchX = t1 * t4 + t5 * t6 + t7;
      c.touchY = t1 * t8 + t5 * t9 + t2;
    },
    set$xform: function(xform) {
      this.xform = H.assertSubtype(xform, "$isList", [P.double], "$asList");
    }
  };
  U.TouchManager.prototype = {
    findTouchTarget$1: function(tp) {
      var t1, i, t;
      for (t1 = this.layers, i = 0; i < t1.length; ++i) {
        t = t1[i].findTouchTarget$1(tp);
        if (t != null) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i].last_touch = new P.DateTime(Date.now(), false);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return new U.TouchBinding(t1[i], t);
        } else if (i >= t1.length)
          return H.ioore(t1, i);
      }
      return;
    },
    registerEvents$1: function(element) {
      var _this = this,
        t1 = W.MouseEvent,
        t2 = {func: 1, ret: -1, args: [t1]};
      W._EventStreamSubscription$(element, "mousedown", H.functionTypeCheck(new U.TouchManager_registerEvents_closure(_this), t2), false, t1);
      W._EventStreamSubscription$(element, "mouseup", H.functionTypeCheck(new U.TouchManager_registerEvents_closure0(_this), t2), false, t1);
      W._EventStreamSubscription$(element, "mousemove", H.functionTypeCheck(new U.TouchManager_registerEvents_closure1(_this), t2), false, t1);
      t1 = document;
      t2 = W.KeyboardEvent;
      W._EventStreamSubscription$(t1, "keydown", H.functionTypeCheck(new U.TouchManager_registerEvents_closure2(_this), {func: 1, ret: -1, args: [t2]}), false, t2);
      t2 = W.TouchEvent;
      W._EventStreamSubscription$(t1, "touchmove", H.functionTypeCheck(new U.TouchManager_registerEvents_closure3(), {func: 1, ret: -1, args: [t2]}), false, t2);
    },
    _keyDown$1: function(kbd) {
      var t1, i;
      for (t1 = this.layers.length, i = 0; i < t1; ++i)
        ;
    }
  };
  U.TouchManager_registerEvents_closure.prototype = {
    call$1: function(e) {
      var t1 = this.$this,
        t = U.Contact$fromMouse(H.interceptedTypeCheck(e, "$isMouseEvent")),
        target = t1.findTouchTarget$1(t);
      if (target != null) {
        target.layer.iform.transformContact$1(t);
        target.touchable = target.touchable.touchDown$1(t);
        t1.touch_bindings.$indexSet(0, -1, target);
      }
      t1.mdown = true;
      return;
    },
    $signature: 5
  };
  U.TouchManager_registerEvents_closure0.prototype = {
    call$1: function(e) {
      var t1, t2, target, c;
      H.interceptedTypeCheck(e, "$isMouseEvent");
      t1 = this.$this;
      t2 = t1.touch_bindings;
      target = t2.$index(0, -1);
      if (target != null) {
        c = U.Contact$fromMouse(e);
        target.layer.iform.transformContact$1(c);
        target.touchable.touchUp$1(c);
      }
      t2.$indexSet(0, -1, null);
      t1.mdown = false;
      return;
    },
    $signature: 5
  };
  U.TouchManager_registerEvents_closure1.prototype = {
    call$1: function(e) {
      var t1 = this.$this,
        t = U.Contact$fromMouse(H.interceptedTypeCheck(e, "$isMouseEvent")),
        target = t1.touch_bindings.$index(0, -1);
      if (target != null) {
        target.layer.iform.transformContact$1(t);
        target.touchable.touchDrag$1(t);
      } else {
        target = t1.findTouchTarget$1(t);
        if (target != null)
          if (t1.mdown) {
            target.layer.iform.transformContact$1(t);
            target.touchable.touchSlide$1(t);
          }
      }
      return;
    },
    $signature: 5
  };
  U.TouchManager_registerEvents_closure2.prototype = {
    call$1: function(e) {
      return this.$this._keyDown$1(H.interceptedTypeCheck(e, "$isKeyboardEvent"));
    },
    $signature: 38
  };
  U.TouchManager_registerEvents_closure3.prototype = {
    call$1: function(e) {
      return H.interceptedTypeCheck(e, "$isTouchEvent").preventDefault();
    },
    $signature: 39
  };
  U.TouchLayer.prototype = {
    findTouchTarget$1: function(tp) {
      var t1, i,
        c = new U.Contact();
      c.id = tp.id;
      c.tagId = tp.tagId;
      c.touchX = tp.touchX;
      c.originalX = tp.originalX;
      c.touchY = tp.touchY;
      c.originalY = tp.originalY;
      c.finger = tp.finger;
      this.iform.transformContact$1(c);
      for (t1 = this.touchables, i = t1.length - 1; i >= 0; --i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        if (t1[i].containsTouch$1(c)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          return t1[i];
        }
      }
      return;
    }
  };
  U.TouchBinding.prototype = {};
  U.Touchable.prototype = {};
  U.Contact.prototype = {};
  U.Version1_update_closure.prototype = {
    call$1: function(b) {
      var t1, id;
      if (!H.boolConversionCheck(b.containsKey$1("action")))
        return;
      t1 = this.actionToId;
      id = t1._length;
      b.$indexSet(0, "id", id);
      t1.$indexSet(0, H.stringTypeCheck(b.$index(0, "action")), id);
      t1 = this._box_0;
      this.blockIdToAttributeIdOffset.$indexSet(0, id, t1.attributeId);
      t1.attributeId = U.Version1_addIdsToParamsAndProps(t1.attributeId, H.assertSubtype(b, "$isMap", [P.String, P.Object], "$asMap"));
    },
    $signature: 15
  };
  U.Version1_update_closure0.prototype = {
    call$1: function(b) {
      U.Version1_addIdToBlock(this.actionToId, this.blockIdToAttributeIdOffset, b);
    },
    $signature: 15
  };
  U.Version1_addIdsToParamsAndProps_closure.prototype = {
    call$1: function(attributes) {
      var t1 = this._box_0;
      t1.attributeId = U.Version1_addIdsToAttributes(t1.attributeId, attributes);
    },
    $signature: 41
  };
  U.Version2_objectifySelectAttribute_closure.prototype = {
    call$1: function(v) {
      return P.LinkedHashMap_LinkedHashMap$_literal(["actual", v], P.String, null);
    },
    $signature: 42
  };
  U.Version2_objectifySelectAttributes_closure.prototype = {
    call$1: function(f) {
      return H.boolConversionCheck(f.containsKey$1("type")) && J.$eq$(J.$index$asx(f, "type"), "select");
    },
    $signature: 43
  };
  (function aliases() {
    var _ = J.Interceptor.prototype;
    _.super$Interceptor$toString = _.toString$0;
    _.super$Interceptor$noSuchMethod = _.noSuchMethod$1;
    _ = J.JavaScriptObject.prototype;
    _.super$JavaScriptObject$toString = _.toString$0;
    _ = P._BroadcastStreamController.prototype;
    _.super$_BroadcastStreamController$_addEventError = _._addEventError$0;
    _ = P._BufferingStreamSubscription.prototype;
    _.super$_BufferingStreamSubscription$_add = _._async$_add$1;
    _.super$_BufferingStreamSubscription$_addError = _._addError$2;
    _ = P.Iterable.prototype;
    _.super$Iterable$where = _.where$1;
    _ = P.Object.prototype;
    _.super$Object$toString = _.toString$0;
    _ = W.Element.prototype;
    _.super$Element$createFragment = _.createFragment$3$treeSanitizer$validator;
    _ = W._SimpleNodeValidator.prototype;
    _.super$_SimpleNodeValidator$allowsAttribute = _.allowsAttribute$3;
    _ = P.JsObject.prototype;
    _.super$JsObject$$index = _.$index;
    _.super$JsObject$$indexSet = _.$indexSet;
    _ = U.Block.prototype;
    _.super$Block$_repositionChain = _._repositionChain$0;
    _.super$Block$_outlineBlock = _._outlineBlock$1;
    _ = U.Parameter.prototype;
    _.super$Parameter$toJSON = _.toJSON$0;
    _ = U.NumParameter.prototype;
    _.super$NumParameter$toJSON = _.toJSON$0;
  })();
  (function installTearOffs() {
    var _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _static = hunkHelpers.installStaticTearOff,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance_1_i = hunkHelpers._instance_1i,
      _instance = hunkHelpers.installInstanceTearOff,
      _instance_1_u = hunkHelpers._instance_1u,
      _instance_2_u = hunkHelpers._instance_2u,
      _instance_0_i = hunkHelpers._instance_0i,
      _static_2 = hunkHelpers._static_2;
    _static_1(P, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 6);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 6);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 6);
    _static_0(P, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 0);
    _static(P, "async___nullErrorHandler$closure", 1, null, ["call$2", "call$1"], ["_nullErrorHandler", function(error) {
      return P._nullErrorHandler(error, null);
    }], 7, 0);
    _static_0(P, "async___nullDoneHandler$closure", "_nullDoneHandler", 0);
    var _;
    _instance_0_u(_ = P._BroadcastSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_1_i(P._BroadcastStreamController.prototype, "get$add", "add$1", 8);
    _instance(P._Future.prototype, "get$_completeError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["_completeError$2", "_completeError$1"], 7, 0);
    _instance_0_u(_ = P._ControllerSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_0_u(_ = P._BufferingStreamSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_0_u(P._DoneStreamSubscription.prototype, "get$_sendDone", "_sendDone$0", 0);
    _instance_0_u(_ = P._ForwardingStreamSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_1_u(_, "get$_handleData", "_handleData$1", 8);
    _instance_2_u(_, "get$_handleError", "_handleError$2", 34);
    _instance_0_u(_, "get$_handleDone", "_handleDone$0", 0);
    _static_1(P, "convert___defaultToEncodable$closure", "_defaultToEncodable", 3);
    _static(W, "html__Html5NodeValidator__standardAttributeValidator$closure", 4, null, ["call$4"], ["_Html5NodeValidator__standardAttributeValidator"], 13, 0);
    _static(W, "html__Html5NodeValidator__uriAttributeValidator$closure", 4, null, ["call$4"], ["_Html5NodeValidator__uriAttributeValidator"], 13, 0);
    _instance_0_i(W._StreamPool.prototype, "get$close", "close$0", 0);
    _static_1(P, "js___convertToJS$closure", "_convertToJS", 3);
    _static_1(P, "js___convertToDart$closure", "_convertToDart", 46);
    _static_2(U, "ntango__compareChainsByAction$closure", "compareChainsByAction", 47);
    _static_2(U, "ntango__JSInitWorkspace$closure", "JSInitWorkspace", 48);
    _static_1(U, "ntango__JSInitAllWorkspaces$closure", "JSInitAllWorkspaces", 49);
    _static_2(U, "ntango__JSExportCode$closure", "JSExportCode", 50);
    _static_1(U, "ntango__JSSaveWorkspace$closure", "JSSaveWorkspace", 16);
    _static_0(U, "ntango__JSSaveAllWorkspaces$closure", "JSSaveAllWorkspaces", 51);
    _static_1(U, "ntango_Version2_updateBlockSelectAttributes$closure", "Version2_updateBlockSelectAttributes", 52);
    _static_1(U, "ntango_Version2_objectifySelectAttributes$closure", "Version2_objectifySelectAttributes", 35);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(P.Object, null);
    _inheritMany(P.Object, [H.JS_CONST, J.Interceptor, J.ArrayIterator, P.Iterable, H.ListIterator, P.Iterator, H.FixedLengthListMixin, H.Symbol, P.MapView, H.ConstantMap, H.Closure, H.JSInvocationMirror, H.TypeErrorDecoder, P.Error, H._StackTrace, P.MapMixin, H.LinkedHashMapCell, H.LinkedHashMapKeyIterator, H.JSSyntaxRegExp, P._TimerImpl, P.Stream, P._BufferingStreamSubscription, P._BroadcastStreamController, P._Completer, P._FutureListener, P._Future, P._AsyncCallbackEntry, P.StreamSubscription, P.StreamTransformerBase, P._DelayedEvent, P._DelayedDone, P._PendingEvents, P._DoneStreamSubscription, P.AsyncError, P._Zone, P._SetBase, P._LinkedHashSetCell, P._LinkedHashSetIterator, P._ListBase_Object_ListMixin, P.ListMixin, P._UnmodifiableMapMixin, P.SetMixin, P._SetBase_Object_SetMixin, P.Codec, P._JsonStringifier, P.bool, P.DateTime, P.num, P.OutOfMemoryError, P.StackOverflowError, P._Exception, P.FormatException, P.Function, P.List, P.Map, P.MapEntry, P.Null, P.StackTrace, P.String, P.StringBuffer, P.Symbol0, W.CssStyleDeclarationBase, W._StreamPool, W._Html5NodeValidator, W.ImmutableListMixin, W.NodeValidatorBuilder, W._SimpleNodeValidator, W._SvgNodeValidator, W.FixedSizeListIterator, W._DOMWindowCrossFrame, W.NodeValidator, W._SameOriginUriPolicy, W._ValidatingTreeSanitizer, P.JsObject, P.Point, U.Block, U.Expression, U.ExpressionBuilder, U.CodeFormatter, U.BlockMenu, U.Slot, U.Parameter, U.TouchLayer, U.Matrix2D, U.TouchManager, U.TouchBinding, U.Touchable, U.Contact]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, H.NativeTypedData, W.EventTarget, W.Blob, W.CanvasRenderingContext2D, W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase, W.DomException, W.DomRectReadOnly, W.DomTokenList, W.Event, W._HtmlCollection_Interceptor_ListMixin, W.ImageData, W.Location, W._NodeList_Interceptor_ListMixin, W.__NamedNodeMap_Interceptor_ListMixin, P.KeyRange]);
    _inheritMany(J.JavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSDouble]);
    _inheritMany(P.Iterable, [H.EfficientLengthIterable, H.MappedIterable, H.WhereIterable, H.TakeIterable, H.SkipIterable, H._ConstantMapKeyIterable]);
    _inheritMany(H.EfficientLengthIterable, [H.ListIterable, H.LinkedHashMapKeyIterable, P.Set]);
    _inherit(H.EfficientLengthMappedIterable, H.MappedIterable);
    _inheritMany(P.Iterator, [H.MappedIterator, H.WhereIterator, H.TakeIterator, H.SkipIterator]);
    _inheritMany(H.ListIterable, [H.MappedListIterable, P._JsonMapKeyIterable]);
    _inherit(H.EfficientLengthTakeIterable, H.TakeIterable);
    _inherit(H.EfficientLengthSkipIterable, H.SkipIterable);
    _inherit(P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, P.MapView);
    _inherit(P.UnmodifiableMapView, P._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(H.ConstantMapView, P.UnmodifiableMapView);
    _inheritMany(H.Closure, [H.ConstantMap_map_closure, H.Primitives_functionNoSuchMethod_closure, H.unwrapException_saveStackTrace, H.TearOffClosure, H.JsLinkedHashMap_values_closure, H.initHooks_closure, H.initHooks_closure0, H.initHooks_closure1, P._AsyncRun__initializeScheduleImmediate_internalCallback, P._AsyncRun__initializeScheduleImmediate_closure, P._AsyncRun__scheduleImmediateJsOverride_internalCallback, P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, P._TimerImpl_internalCallback, P._SyncBroadcastStreamController__sendData_closure, P._SyncBroadcastStreamController__sendDone_closure, P._Future__addListener_closure, P._Future__prependListeners_closure, P._Future__chainForeignFuture_closure, P._Future__chainForeignFuture_closure0, P._Future__chainForeignFuture_closure1, P._Future__asyncComplete_closure, P._Future__chainFuture_closure, P._Future__propagateToListeners_handleWhenCompleteCallback, P._Future__propagateToListeners_handleWhenCompleteCallback_closure, P._Future__propagateToListeners_handleValueCallback, P._Future__propagateToListeners_handleError, P.Stream_length_closure, P.Stream_length_closure0, P.Stream_toList_closure, P.Stream_toList_closure0, P._BufferingStreamSubscription__sendError_sendError, P._BufferingStreamSubscription__sendDone_sendDone, P._PendingEvents_schedule_closure, P._rootHandleUncaughtError_closure, P._RootZone_bindCallback_closure, P._RootZone_bindCallbackGuarded_closure, P._RootZone_bindUnaryCallbackGuarded_closure, P.MapBase_mapToString_closure, P._JsonStringifier_writeMap_closure, P.NoSuchMethodError_toString_closure, W.Element_Element$html_closure, W.Window_animationFrame_closure, W._EventStreamSubscription_closure, W._StreamPool_add_closure, W.NodeValidatorBuilder_allowsElement_closure, W.NodeValidatorBuilder_allowsAttribute_closure, W._SimpleNodeValidator_closure, W._SimpleNodeValidator_closure0, W._TemplatingNodeValidator_closure, W._ValidatingTreeSanitizer_sanitizeTree_walk, P.CssClassSetImpl_add_closure, P.FilteredElementList__iterable_closure, P.FilteredElementList__iterable_closure0, P.FilteredElementList_removeRange_closure, P._convertToJS_closure, P._convertToJS_closure0, P._wrapToDart_closure, P._wrapToDart_closure0, P._wrapToDart_closure1, U.Expression_appendOperator_closure, U.Expression_electricBrace_closure, U.Expression_electricBrace_closure0, U.Expression_appendNumber_closure, U.Expression_isNum_closure, U.Expression_renderHtml_closure, U.Expression_openPulldown_closure, U.Expression_openPulldown_closure0, U.Expression__addMenuItems_closure, U.BlockMenu_getBlockById_closure, U.Parameter__showParameterDialog_closure, U.Parameter__showParameterDialog_closure0, U.Parameter__showParameterDialog_closure1, U.Parameter__showParameterDialog_closure2, U.RangeParameter__showParameterDialog_closure, U.RangeParameter__showParameterDialog_closure0, U.RangeParameter__showParameterDialog_closure1, U.RangeParameter__showParameterDialog_closure2, U.SelectParameter__showParameterDialog_closure, U.SelectParameter__showParameterDialog_closure0, U.ExpressionParameter__showParameterDialog_closure, U.ExpressionParameter__showParameterDialog_closure0, U.ExpressionParameter__showParameterDialog__closure1, U.ExpressionParameter__showParameterDialog_closure1, U.ExpressionParameter__showParameterDialog__closure0, U.ExpressionParameter__showParameterDialog_closure2, U.ExpressionParameter__showParameterDialog_closure3, U.ExpressionParameter__showParameterDialog__closure, U.CodeWorkspace_tick_closure, U.CodeWorkspace_getBlockCount_closure, U.CodeWorkspace__restoreBlock_closure, U.TouchManager_registerEvents_closure, U.TouchManager_registerEvents_closure0, U.TouchManager_registerEvents_closure1, U.TouchManager_registerEvents_closure2, U.TouchManager_registerEvents_closure3, U.Version1_update_closure, U.Version1_update_closure0, U.Version1_addIdsToParamsAndProps_closure, U.Version2_objectifySelectAttribute_closure, U.Version2_objectifySelectAttributes_closure]);
    _inherit(H.ConstantStringMap, H.ConstantMap);
    _inheritMany(P.Error, [H.NullError, H.JsNoSuchMethodError, H.UnknownJsTypeError, H.TypeErrorImplementation, H.CastErrorImplementation, H.RuntimeError, P.AssertionError, P.JsonUnsupportedObjectError, P.NullThrownError, P.ArgumentError, P.NoSuchMethodError, P.UnsupportedError, P.UnimplementedError, P.StateError, P.ConcurrentModificationError, P.CyclicInitializationError]);
    _inheritMany(H.TearOffClosure, [H.StaticClosure, H.BoundClosure]);
    _inherit(H._AssertionError, P.AssertionError);
    _inherit(P.MapBase, P.MapMixin);
    _inheritMany(P.MapBase, [H.JsLinkedHashMap, P._JsonMap, W._AttributeMap]);
    _inherit(H.NativeTypedArray, H.NativeTypedData);
    _inheritMany(H.NativeTypedArray, [H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfDouble, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfInt, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(H.NativeTypedArrayOfInt, [H.NativeInt16List, H.NativeInt32List, H.NativeInt8List, H.NativeUint16List, H.NativeUint32List, H.NativeUint8ClampedList, H.NativeUint8List]);
    _inheritMany(P.Stream, [P._StreamImpl, P._ForwardingStream, W._EventStream, W._ElementListEventStreamImpl]);
    _inherit(P._ControllerStream, P._StreamImpl);
    _inherit(P._BroadcastStream, P._ControllerStream);
    _inheritMany(P._BufferingStreamSubscription, [P._ControllerSubscription, P._ForwardingStreamSubscription]);
    _inherit(P._BroadcastSubscription, P._ControllerSubscription);
    _inherit(P._SyncBroadcastStreamController, P._BroadcastStreamController);
    _inherit(P._SyncCompleter, P._Completer);
    _inheritMany(P._DelayedEvent, [P._DelayedData, P._DelayedError]);
    _inherit(P._StreamImplEvents, P._PendingEvents);
    _inherit(P._MapStream, P._ForwardingStream);
    _inherit(P._RootZone, P._Zone);
    _inherit(P._LinkedHashSet, P._SetBase);
    _inherit(P.ListBase, P._ListBase_Object_ListMixin);
    _inherit(P.SetBase, P._SetBase_Object_SetMixin);
    _inherit(P.Converter, P.StreamTransformerBase);
    _inherit(P.JsonCyclicError, P.JsonUnsupportedObjectError);
    _inherit(P.JsonCodec, P.Codec);
    _inheritMany(P.Converter, [P.JsonEncoder, P.JsonDecoder]);
    _inherit(P._JsonStringStringifier, P._JsonStringifier);
    _inheritMany(P.num, [P.double, P.int]);
    _inheritMany(P.ArgumentError, [P.RangeError, P.IndexError]);
    _inheritMany(W.EventTarget, [W.Node, W.Window, W.WorkerGlobalScope]);
    _inheritMany(W.Node, [W.Element, W.CharacterData, W._Attr]);
    _inheritMany(W.Element, [W.HtmlElement, P.SvgElement]);
    _inheritMany(W.HtmlElement, [W.AnchorElement, W.AreaElement, W.BaseElement, W.BodyElement, W.CanvasElement, W.DivElement, W.FormElement, W.InputElement, W.SelectElement, W.TableElement, W.TableRowElement, W.TableSectionElement, W.TemplateElement]);
    _inherit(W.CssStyleDeclaration, W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase);
    _inheritMany(P.ListBase, [W._ChildrenElementList, W._FrozenElementList, W._ChildNodeListLazy, P.FilteredElementList]);
    _inherit(W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin, W._HtmlCollection_Interceptor_ListMixin);
    _inherit(W.HtmlCollection, W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.UIEvent, W.Event);
    _inheritMany(W.UIEvent, [W.KeyboardEvent, W.MouseEvent, W.TouchEvent]);
    _inherit(W._NodeList_Interceptor_ListMixin_ImmutableListMixin, W._NodeList_Interceptor_ListMixin);
    _inherit(W.NodeList, W._NodeList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._DomRect, W.DomRectReadOnly);
    _inherit(W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin, W.__NamedNodeMap_Interceptor_ListMixin);
    _inherit(W._NamedNodeMap, W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._ElementAttributeMap, W._AttributeMap);
    _inherit(P.CssClassSetImpl, P.SetBase);
    _inheritMany(P.CssClassSetImpl, [W._ElementCssClassSet, P.AttributeClassSet]);
    _inherit(W._ElementEventStreamImpl, W._EventStream);
    _inherit(W._EventStreamSubscription, P.StreamSubscription);
    _inherit(W._TemplatingNodeValidator, W._SimpleNodeValidator);
    _inheritMany(P.JsObject, [P.JsFunction, P._JsArray_JsObject_ListMixin]);
    _inherit(P.JsArray, P._JsArray_JsObject_ListMixin);
    _inherit(P.ScriptElement, P.SvgElement);
    _inherit(U.ControlBlock, U.Block);
    _inheritMany(U.ControlBlock, [U.ClauseBlock, U.BeginBlock]);
    _inherit(U.EndBlock, U.ClauseBlock);
    _inheritMany(U.CodeFormatter, [U.PlainFormatter, U.NetLogoFormatter]);
    _inheritMany(U.Parameter, [U.NumParameter, U.SelectParameter, U.ExpressionParameter]);
    _inheritMany(U.NumParameter, [U.IntParameter, U.RangeParameter]);
    _inherit(U.CodeWorkspace, U.TouchLayer);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(P._ListBase_Object_ListMixin, P.ListMixin);
    _mixin(P._SetBase_Object_SetMixin, P.SetMixin);
    _mixin(P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, P._UnmodifiableMapMixin);
    _mixin(W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase, W.CssStyleDeclarationBase);
    _mixin(W._HtmlCollection_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._NodeList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._NodeList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__NamedNodeMap_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._JsArray_JsObject_ListMixin, P.ListMixin);
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    C.AnchorElement_methods = W.AnchorElement.prototype;
    C.BodyElement_methods = W.BodyElement.prototype;
    C.CanvasElement_methods = W.CanvasElement.prototype;
    C.CanvasRenderingContext2D_methods = W.CanvasRenderingContext2D.prototype;
    C.DivElement_methods = W.DivElement.prototype;
    C.Interceptor_methods = J.Interceptor.prototype;
    C.JSArray_methods = J.JSArray.prototype;
    C.JSDouble_methods = J.JSDouble.prototype;
    C.JSInt_methods = J.JSInt.prototype;
    C.JSNull_methods = J.JSNull.prototype;
    C.JSNumber_methods = J.JSNumber.prototype;
    C.JSString_methods = J.JSString.prototype;
    C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    C.NodeList_methods = W.NodeList.prototype;
    C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    C.TableElement_methods = W.TableElement.prototype;
    C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    C.Window_methods = W.Window.prototype;
    C.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    C.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    C.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    C.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    C.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    C.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    C.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    C.C_JS_CONST3 = function(hooks) { return hooks; }
;
    C.C_JsonCodec = new P.JsonCodec();
    C.C_OutOfMemoryError = new P.OutOfMemoryError();
    C.C__DelayedDone = new P._DelayedDone();
    C.C__RootZone = new P._RootZone();
    C.JsonDecoder_null = new P.JsonDecoder(null);
    C.JsonEncoder_null = new P.JsonEncoder(null);
    C.List_2Zi = H.setRuntimeTypeInfo(makeConstList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::autofocus", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [P.String]);
    C.List_ego = H.setRuntimeTypeInfo(makeConstList(["HEAD", "AREA", "BASE", "BASEFONT", "BR", "COL", "COLGROUP", "EMBED", "FRAME", "FRAMESET", "HR", "IMAGE", "IMG", "INPUT", "ISINDEX", "LINK", "META", "PARAM", "SOURCE", "STYLE", "TITLE", "WBR"]), [P.String]);
    C.List_empty = H.setRuntimeTypeInfo(makeConstList([]), [P.String]);
    C.List_empty0 = makeConstList([]);
    C.List_wSV = H.setRuntimeTypeInfo(makeConstList(["bind", "if", "ref", "repeat", "syntax"]), [P.String]);
    C.List_yrN = H.setRuntimeTypeInfo(makeConstList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [P.String]);
    C.List_empty1 = H.setRuntimeTypeInfo(makeConstList([]), [P.Symbol0]);
    C.Map_empty = new H.ConstantStringMap(0, {}, C.List_empty1, [P.Symbol0, null]);
    C.Symbol_call = new H.Symbol("call");
  })();
  var init = {mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"}, mangledNames: {}, getTypeFromName: getGlobalFromName, metadata: [], types: [{func: 1, ret: -1}, {func: 1, ret: P.Null, args: [W.MouseEvent]}, {func: 1, ret: P.Null}, {func: 1, args: [,]}, {func: 1, ret: P.Null, args: [W.Event]}, {func: 1, ret: -1, args: [W.MouseEvent]}, {func: 1, ret: -1, args: [{func: 1, ret: -1}]}, {func: 1, ret: -1, args: [P.Object], opt: [P.StackTrace]}, {func: 1, ret: -1, args: [P.Object]}, {func: 1, ret: P.Null, args: [,]}, {func: 1, ret: P.Null, args: [,,]}, {func: 1, ret: P.bool, args: [W.Node]}, {func: 1, ret: P.bool, args: [W.NodeValidator]}, {func: 1, ret: P.bool, args: [W.Element, P.String, P.String, W._Html5NodeValidator]}, {func: 1, ret: -1, args: [W.Element]}, {func: 1, ret: P.Null, args: [[P.Map,,,]]}, {func: 1, ret: P.String, args: [P.String]}, {func: 1, ret: P.bool, args: [P.String]}, {func: 1, ret: P.bool, args: [W.Element]}, {func: 1, ret: P.Null, args: [P.String,,]}, {func: 1, ret: P.Null, args: [P.num]}, {func: 1, ret: -1, args: [W.Node, W.Node]}, {func: 1, ret: P.bool, args: [[P.Set, P.String]]}, {func: 1, ret: W.Element, args: [W.Node]}, {func: 1, ret: P.JsFunction, args: [,]}, {func: 1, ret: [P.JsArray,,], args: [,]}, {func: 1, args: [W.Event]}, {func: 1, ret: P.Null, args: [{func: 1, ret: -1}]}, {func: 1, args: [, P.String]}, {func: 1, ret: P.Null, args: [P.String]}, {func: 1, ret: P.Null, args: [P.Symbol0,,]}, {func: 1, ret: P.bool, args: [U.Slot]}, {func: 1, args: [P.String]}, {func: 1, ret: P.bool, args: [W.MouseEvent]}, {func: 1, ret: -1, args: [, P.StackTrace]}, {func: 1, ret: -1, args: [[P.List,,]]}, {func: 1, ret: P.bool, args: [U.Block]}, {func: 1, ret: P.int, args: [U.Slot]}, {func: 1, ret: -1, args: [W.KeyboardEvent]}, {func: 1, ret: -1, args: [W.TouchEvent]}, {func: 1, ret: [P._Future,,], args: [,]}, {func: 1, ret: P.Null, args: [[P.List,,]]}, {func: 1, ret: [P.Map, P.String,,], args: [,]}, {func: 1, ret: P.bool, args: [,]}, {func: 1, ret: -1, args: [P.num]}, {func: 1, ret: P.Null, args: [,], opt: [P.StackTrace]}, {func: 1, ret: P.Object, args: [,]}, {func: 1, ret: P.int, args: [,,]}, {func: 1, ret: -1, args: [P.String, P.String]}, {func: 1, ret: -1, args: [P.String]}, {func: 1, ret: P.String, args: [P.String, P.String]}, {func: 1, ret: P.String}, {func: 1, ret: -1, args: [[P.Map,,,]]}, {func: 1, ret: P.JsObject, args: [,]}], interceptorsByTag: null, leafTags: null};
  (function staticFields() {
    $.Closure_functionCounter = 0;
    $.BoundClosure_selfFieldNameCache = null;
    $.BoundClosure_receiverFieldNameCache = null;
    $._inTypeAssertion = false;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = C.C__RootZone;
    $._toStringVisiting = [];
    $.Element__parseDocument = null;
    $.Element__parseRange = null;
    $.Element__defaultValidator = null;
    $.Element__defaultSanitizer = null;
    $._Html5NodeValidator__attributeValidators = P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.Function);
    $.CodeFormatter__formatters = null;
    $._workspaces = P.LinkedHashMap__makeEmpty();
  })();
  (function lazyInitializers() {
    var _lazy = hunkHelpers.lazy;
    _lazy($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartClosure");
    });
    _lazy($, "JS_INTEROP_INTERCEPTOR_TAG", "$get$JS_INTEROP_INTERCEPTOR_TAG", function() {
      return H.getIsolateAffinityTag("_$dart_js");
    });
    _lazy($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazy($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazy($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
    });
    _lazy($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          null.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          (void 0).$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
    });
    _lazy($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          null.$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          (void 0).$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
      return P._AsyncRun__initializeScheduleImmediate();
    });
    _lazy($, "Future__nullFuture", "$get$Future__nullFuture", function() {
      var t1 = new P._Future(C.C__RootZone, [P.Null]);
      t1._setValue$1(null);
      return t1;
    });
    _lazy($, "_Html5NodeValidator__allowedElements", "$get$_Html5NodeValidator__allowedElements", function() {
      return P.LinkedHashSet_LinkedHashSet$from(["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"], P.String);
    });
    _lazy($, "CssClassSetImpl__validTokenRE", "$get$CssClassSetImpl__validTokenRE", function() {
      return P.RegExp_RegExp("^\\S+$");
    });
    _lazy($, "context", "$get$context", function() {
      return H.interceptedTypeCheck(P._wrapToDart(self), "$isJsObject");
    });
    _lazy($, "_DART_OBJECT_PROPERTY_NAME", "$get$_DART_OBJECT_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartObject");
    });
    _lazy($, "_dartProxyCtor", "$get$_dartProxyCtor", function() {
      return function DartObject(o) {
        this.o = o;
      };
    });
    _lazy($, "SCALE", "$get$SCALE", function() {
      return W.window().devicePixelRatio;
    });
    _lazy($, "BLOCK_WIDTH", "$get$BLOCK_WIDTH", function() {
      var t1 = $.$get$SCALE();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 80 * t1;
    });
    _lazy($, "BLOCK_HEIGHT", "$get$BLOCK_HEIGHT", function() {
      var t1 = $.$get$SCALE();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 34 * t1;
    });
    _lazy($, "BLOCK_PADDING", "$get$BLOCK_PADDING", function() {
      var t1 = $.$get$SCALE();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 10 * t1;
    });
    _lazy($, "BLOCK_INDENT", "$get$BLOCK_INDENT", function() {
      var t1 = $.$get$SCALE();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 25 * t1;
    });
    _lazy($, "BLOCK_GUTTER", "$get$BLOCK_GUTTER", function() {
      var t1 = $.$get$SCALE();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 10 * t1;
    });
    _lazy($, "BLOCK_UNIT", "$get$BLOCK_UNIT", function() {
      return $.$get$BLOCK_PADDING();
    });
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({CanvasGradient: J.Interceptor, CanvasPattern: J.Interceptor, DOMError: J.Interceptor, DOMImplementation: J.Interceptor, MediaError: J.Interceptor, Navigator: J.Interceptor, NavigatorConcurrentHardware: J.Interceptor, NavigatorUserMediaError: J.Interceptor, OverconstrainedError: J.Interceptor, PositionError: J.Interceptor, Range: J.Interceptor, TextMetrics: J.Interceptor, WebGLRenderingContext: J.Interceptor, WebGL2RenderingContext: J.Interceptor, SQLError: J.Interceptor, DataView: H.NativeTypedData, ArrayBufferView: H.NativeTypedData, Float32Array: H.NativeTypedArrayOfDouble, Float64Array: H.NativeTypedArrayOfDouble, Int16Array: H.NativeInt16List, Int32Array: H.NativeInt32List, Int8Array: H.NativeInt8List, Uint16Array: H.NativeUint16List, Uint32Array: H.NativeUint32List, Uint8ClampedArray: H.NativeUint8ClampedList, CanvasPixelArray: H.NativeUint8ClampedList, Uint8Array: H.NativeUint8List, HTMLAudioElement: W.HtmlElement, HTMLBRElement: W.HtmlElement, HTMLButtonElement: W.HtmlElement, HTMLContentElement: W.HtmlElement, HTMLDListElement: W.HtmlElement, HTMLDataElement: W.HtmlElement, HTMLDataListElement: W.HtmlElement, HTMLDetailsElement: W.HtmlElement, HTMLDialogElement: W.HtmlElement, HTMLEmbedElement: W.HtmlElement, HTMLFieldSetElement: W.HtmlElement, HTMLHRElement: W.HtmlElement, HTMLHeadElement: W.HtmlElement, HTMLHeadingElement: W.HtmlElement, HTMLHtmlElement: W.HtmlElement, HTMLIFrameElement: W.HtmlElement, HTMLImageElement: W.HtmlElement, HTMLLIElement: W.HtmlElement, HTMLLabelElement: W.HtmlElement, HTMLLegendElement: W.HtmlElement, HTMLLinkElement: W.HtmlElement, HTMLMapElement: W.HtmlElement, HTMLMediaElement: W.HtmlElement, HTMLMenuElement: W.HtmlElement, HTMLMetaElement: W.HtmlElement, HTMLMeterElement: W.HtmlElement, HTMLModElement: W.HtmlElement, HTMLOListElement: W.HtmlElement, HTMLObjectElement: W.HtmlElement, HTMLOptGroupElement: W.HtmlElement, HTMLOptionElement: W.HtmlElement, HTMLOutputElement: W.HtmlElement, HTMLParagraphElement: W.HtmlElement, HTMLParamElement: W.HtmlElement, HTMLPictureElement: W.HtmlElement, HTMLPreElement: W.HtmlElement, HTMLProgressElement: W.HtmlElement, HTMLQuoteElement: W.HtmlElement, HTMLScriptElement: W.HtmlElement, HTMLShadowElement: W.HtmlElement, HTMLSlotElement: W.HtmlElement, HTMLSourceElement: W.HtmlElement, HTMLSpanElement: W.HtmlElement, HTMLStyleElement: W.HtmlElement, HTMLTableCaptionElement: W.HtmlElement, HTMLTableCellElement: W.HtmlElement, HTMLTableDataCellElement: W.HtmlElement, HTMLTableHeaderCellElement: W.HtmlElement, HTMLTableColElement: W.HtmlElement, HTMLTextAreaElement: W.HtmlElement, HTMLTimeElement: W.HtmlElement, HTMLTitleElement: W.HtmlElement, HTMLTrackElement: W.HtmlElement, HTMLUListElement: W.HtmlElement, HTMLUnknownElement: W.HtmlElement, HTMLVideoElement: W.HtmlElement, HTMLDirectoryElement: W.HtmlElement, HTMLFontElement: W.HtmlElement, HTMLFrameElement: W.HtmlElement, HTMLFrameSetElement: W.HtmlElement, HTMLMarqueeElement: W.HtmlElement, HTMLElement: W.HtmlElement, HTMLAnchorElement: W.AnchorElement, HTMLAreaElement: W.AreaElement, HTMLBaseElement: W.BaseElement, Blob: W.Blob, File: W.Blob, HTMLBodyElement: W.BodyElement, HTMLCanvasElement: W.CanvasElement, CanvasRenderingContext2D: W.CanvasRenderingContext2D, CDATASection: W.CharacterData, CharacterData: W.CharacterData, Comment: W.CharacterData, ProcessingInstruction: W.CharacterData, Text: W.CharacterData, CSSStyleDeclaration: W.CssStyleDeclaration, MSStyleCSSProperties: W.CssStyleDeclaration, CSS2Properties: W.CssStyleDeclaration, HTMLDivElement: W.DivElement, DOMException: W.DomException, DOMRectReadOnly: W.DomRectReadOnly, DOMTokenList: W.DomTokenList, Element: W.Element, AbortPaymentEvent: W.Event, AnimationEvent: W.Event, AnimationPlaybackEvent: W.Event, ApplicationCacheErrorEvent: W.Event, BackgroundFetchClickEvent: W.Event, BackgroundFetchEvent: W.Event, BackgroundFetchFailEvent: W.Event, BackgroundFetchedEvent: W.Event, BeforeInstallPromptEvent: W.Event, BeforeUnloadEvent: W.Event, BlobEvent: W.Event, CanMakePaymentEvent: W.Event, ClipboardEvent: W.Event, CloseEvent: W.Event, CustomEvent: W.Event, DeviceMotionEvent: W.Event, DeviceOrientationEvent: W.Event, ErrorEvent: W.Event, ExtendableEvent: W.Event, ExtendableMessageEvent: W.Event, FetchEvent: W.Event, FontFaceSetLoadEvent: W.Event, ForeignFetchEvent: W.Event, GamepadEvent: W.Event, HashChangeEvent: W.Event, InstallEvent: W.Event, MediaEncryptedEvent: W.Event, MediaKeyMessageEvent: W.Event, MediaQueryListEvent: W.Event, MediaStreamEvent: W.Event, MediaStreamTrackEvent: W.Event, MessageEvent: W.Event, MIDIConnectionEvent: W.Event, MIDIMessageEvent: W.Event, MutationEvent: W.Event, NotificationEvent: W.Event, PageTransitionEvent: W.Event, PaymentRequestEvent: W.Event, PaymentRequestUpdateEvent: W.Event, PopStateEvent: W.Event, PresentationConnectionAvailableEvent: W.Event, PresentationConnectionCloseEvent: W.Event, ProgressEvent: W.Event, PromiseRejectionEvent: W.Event, PushEvent: W.Event, RTCDataChannelEvent: W.Event, RTCDTMFToneChangeEvent: W.Event, RTCPeerConnectionIceEvent: W.Event, RTCTrackEvent: W.Event, SecurityPolicyViolationEvent: W.Event, SensorErrorEvent: W.Event, SpeechRecognitionError: W.Event, SpeechRecognitionEvent: W.Event, SpeechSynthesisEvent: W.Event, StorageEvent: W.Event, SyncEvent: W.Event, TrackEvent: W.Event, TransitionEvent: W.Event, WebKitTransitionEvent: W.Event, VRDeviceEvent: W.Event, VRDisplayEvent: W.Event, VRSessionEvent: W.Event, MojoInterfaceRequestEvent: W.Event, ResourceProgressEvent: W.Event, USBConnectionEvent: W.Event, IDBVersionChangeEvent: W.Event, AudioProcessingEvent: W.Event, OfflineAudioCompletionEvent: W.Event, WebGLContextEvent: W.Event, Event: W.Event, InputEvent: W.Event, EventTarget: W.EventTarget, HTMLFormElement: W.FormElement, HTMLCollection: W.HtmlCollection, HTMLFormControlsCollection: W.HtmlCollection, HTMLOptionsCollection: W.HtmlCollection, ImageData: W.ImageData, HTMLInputElement: W.InputElement, KeyboardEvent: W.KeyboardEvent, Location: W.Location, MouseEvent: W.MouseEvent, DragEvent: W.MouseEvent, PointerEvent: W.MouseEvent, WheelEvent: W.MouseEvent, Document: W.Node, DocumentFragment: W.Node, HTMLDocument: W.Node, ShadowRoot: W.Node, XMLDocument: W.Node, DocumentType: W.Node, Node: W.Node, NodeList: W.NodeList, RadioNodeList: W.NodeList, HTMLSelectElement: W.SelectElement, HTMLTableElement: W.TableElement, HTMLTableRowElement: W.TableRowElement, HTMLTableSectionElement: W.TableSectionElement, HTMLTemplateElement: W.TemplateElement, TouchEvent: W.TouchEvent, CompositionEvent: W.UIEvent, FocusEvent: W.UIEvent, TextEvent: W.UIEvent, UIEvent: W.UIEvent, Window: W.Window, DOMWindow: W.Window, DedicatedWorkerGlobalScope: W.WorkerGlobalScope, ServiceWorkerGlobalScope: W.WorkerGlobalScope, SharedWorkerGlobalScope: W.WorkerGlobalScope, WorkerGlobalScope: W.WorkerGlobalScope, Attr: W._Attr, ClientRect: W._DomRect, DOMRect: W._DomRect, NamedNodeMap: W._NamedNodeMap, MozNamedAttrMap: W._NamedNodeMap, IDBKeyRange: P.KeyRange, SVGScriptElement: P.ScriptElement, SVGAElement: P.SvgElement, SVGAnimateElement: P.SvgElement, SVGAnimateMotionElement: P.SvgElement, SVGAnimateTransformElement: P.SvgElement, SVGAnimationElement: P.SvgElement, SVGCircleElement: P.SvgElement, SVGClipPathElement: P.SvgElement, SVGDefsElement: P.SvgElement, SVGDescElement: P.SvgElement, SVGDiscardElement: P.SvgElement, SVGEllipseElement: P.SvgElement, SVGFEBlendElement: P.SvgElement, SVGFEColorMatrixElement: P.SvgElement, SVGFEComponentTransferElement: P.SvgElement, SVGFECompositeElement: P.SvgElement, SVGFEConvolveMatrixElement: P.SvgElement, SVGFEDiffuseLightingElement: P.SvgElement, SVGFEDisplacementMapElement: P.SvgElement, SVGFEDistantLightElement: P.SvgElement, SVGFEFloodElement: P.SvgElement, SVGFEFuncAElement: P.SvgElement, SVGFEFuncBElement: P.SvgElement, SVGFEFuncGElement: P.SvgElement, SVGFEFuncRElement: P.SvgElement, SVGFEGaussianBlurElement: P.SvgElement, SVGFEImageElement: P.SvgElement, SVGFEMergeElement: P.SvgElement, SVGFEMergeNodeElement: P.SvgElement, SVGFEMorphologyElement: P.SvgElement, SVGFEOffsetElement: P.SvgElement, SVGFEPointLightElement: P.SvgElement, SVGFESpecularLightingElement: P.SvgElement, SVGFESpotLightElement: P.SvgElement, SVGFETileElement: P.SvgElement, SVGFETurbulenceElement: P.SvgElement, SVGFilterElement: P.SvgElement, SVGForeignObjectElement: P.SvgElement, SVGGElement: P.SvgElement, SVGGeometryElement: P.SvgElement, SVGGraphicsElement: P.SvgElement, SVGImageElement: P.SvgElement, SVGLineElement: P.SvgElement, SVGLinearGradientElement: P.SvgElement, SVGMarkerElement: P.SvgElement, SVGMaskElement: P.SvgElement, SVGMetadataElement: P.SvgElement, SVGPathElement: P.SvgElement, SVGPatternElement: P.SvgElement, SVGPolygonElement: P.SvgElement, SVGPolylineElement: P.SvgElement, SVGRadialGradientElement: P.SvgElement, SVGRectElement: P.SvgElement, SVGSetElement: P.SvgElement, SVGStopElement: P.SvgElement, SVGStyleElement: P.SvgElement, SVGSVGElement: P.SvgElement, SVGSwitchElement: P.SvgElement, SVGSymbolElement: P.SvgElement, SVGTSpanElement: P.SvgElement, SVGTextContentElement: P.SvgElement, SVGTextElement: P.SvgElement, SVGTextPathElement: P.SvgElement, SVGTextPositioningElement: P.SvgElement, SVGTitleElement: P.SvgElement, SVGUseElement: P.SvgElement, SVGViewElement: P.SvgElement, SVGGradientElement: P.SvgElement, SVGComponentTransferFunctionElement: P.SvgElement, SVGFEDropShadowElement: P.SvgElement, SVGMPathElement: P.SvgElement, SVGElement: P.SvgElement});
    hunkHelpers.setOrUpdateLeafTags({CanvasGradient: true, CanvasPattern: true, DOMError: true, DOMImplementation: true, MediaError: true, Navigator: true, NavigatorConcurrentHardware: true, NavigatorUserMediaError: true, OverconstrainedError: true, PositionError: true, Range: true, TextMetrics: true, WebGLRenderingContext: true, WebGL2RenderingContext: true, SQLError: true, DataView: true, ArrayBufferView: false, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false, HTMLAudioElement: true, HTMLBRElement: true, HTMLButtonElement: true, HTMLContentElement: true, HTMLDListElement: true, HTMLDataElement: true, HTMLDataListElement: true, HTMLDetailsElement: true, HTMLDialogElement: true, HTMLEmbedElement: true, HTMLFieldSetElement: true, HTMLHRElement: true, HTMLHeadElement: true, HTMLHeadingElement: true, HTMLHtmlElement: true, HTMLIFrameElement: true, HTMLImageElement: true, HTMLLIElement: true, HTMLLabelElement: true, HTMLLegendElement: true, HTMLLinkElement: true, HTMLMapElement: true, HTMLMediaElement: true, HTMLMenuElement: true, HTMLMetaElement: true, HTMLMeterElement: true, HTMLModElement: true, HTMLOListElement: true, HTMLObjectElement: true, HTMLOptGroupElement: true, HTMLOptionElement: true, HTMLOutputElement: true, HTMLParagraphElement: true, HTMLParamElement: true, HTMLPictureElement: true, HTMLPreElement: true, HTMLProgressElement: true, HTMLQuoteElement: true, HTMLScriptElement: true, HTMLShadowElement: true, HTMLSlotElement: true, HTMLSourceElement: true, HTMLSpanElement: true, HTMLStyleElement: true, HTMLTableCaptionElement: true, HTMLTableCellElement: true, HTMLTableDataCellElement: true, HTMLTableHeaderCellElement: true, HTMLTableColElement: true, HTMLTextAreaElement: true, HTMLTimeElement: true, HTMLTitleElement: true, HTMLTrackElement: true, HTMLUListElement: true, HTMLUnknownElement: true, HTMLVideoElement: true, HTMLDirectoryElement: true, HTMLFontElement: true, HTMLFrameElement: true, HTMLFrameSetElement: true, HTMLMarqueeElement: true, HTMLElement: false, HTMLAnchorElement: true, HTMLAreaElement: true, HTMLBaseElement: true, Blob: true, File: true, HTMLBodyElement: true, HTMLCanvasElement: true, CanvasRenderingContext2D: true, CDATASection: true, CharacterData: true, Comment: true, ProcessingInstruction: true, Text: true, CSSStyleDeclaration: true, MSStyleCSSProperties: true, CSS2Properties: true, HTMLDivElement: true, DOMException: true, DOMRectReadOnly: false, DOMTokenList: true, Element: false, AbortPaymentEvent: true, AnimationEvent: true, AnimationPlaybackEvent: true, ApplicationCacheErrorEvent: true, BackgroundFetchClickEvent: true, BackgroundFetchEvent: true, BackgroundFetchFailEvent: true, BackgroundFetchedEvent: true, BeforeInstallPromptEvent: true, BeforeUnloadEvent: true, BlobEvent: true, CanMakePaymentEvent: true, ClipboardEvent: true, CloseEvent: true, CustomEvent: true, DeviceMotionEvent: true, DeviceOrientationEvent: true, ErrorEvent: true, ExtendableEvent: true, ExtendableMessageEvent: true, FetchEvent: true, FontFaceSetLoadEvent: true, ForeignFetchEvent: true, GamepadEvent: true, HashChangeEvent: true, InstallEvent: true, MediaEncryptedEvent: true, MediaKeyMessageEvent: true, MediaQueryListEvent: true, MediaStreamEvent: true, MediaStreamTrackEvent: true, MessageEvent: true, MIDIConnectionEvent: true, MIDIMessageEvent: true, MutationEvent: true, NotificationEvent: true, PageTransitionEvent: true, PaymentRequestEvent: true, PaymentRequestUpdateEvent: true, PopStateEvent: true, PresentationConnectionAvailableEvent: true, PresentationConnectionCloseEvent: true, ProgressEvent: true, PromiseRejectionEvent: true, PushEvent: true, RTCDataChannelEvent: true, RTCDTMFToneChangeEvent: true, RTCPeerConnectionIceEvent: true, RTCTrackEvent: true, SecurityPolicyViolationEvent: true, SensorErrorEvent: true, SpeechRecognitionError: true, SpeechRecognitionEvent: true, SpeechSynthesisEvent: true, StorageEvent: true, SyncEvent: true, TrackEvent: true, TransitionEvent: true, WebKitTransitionEvent: true, VRDeviceEvent: true, VRDisplayEvent: true, VRSessionEvent: true, MojoInterfaceRequestEvent: true, ResourceProgressEvent: true, USBConnectionEvent: true, IDBVersionChangeEvent: true, AudioProcessingEvent: true, OfflineAudioCompletionEvent: true, WebGLContextEvent: true, Event: false, InputEvent: false, EventTarget: false, HTMLFormElement: true, HTMLCollection: true, HTMLFormControlsCollection: true, HTMLOptionsCollection: true, ImageData: true, HTMLInputElement: true, KeyboardEvent: true, Location: true, MouseEvent: true, DragEvent: true, PointerEvent: true, WheelEvent: true, Document: true, DocumentFragment: true, HTMLDocument: true, ShadowRoot: true, XMLDocument: true, DocumentType: true, Node: false, NodeList: true, RadioNodeList: true, HTMLSelectElement: true, HTMLTableElement: true, HTMLTableRowElement: true, HTMLTableSectionElement: true, HTMLTemplateElement: true, TouchEvent: true, CompositionEvent: true, FocusEvent: true, TextEvent: true, UIEvent: false, Window: true, DOMWindow: true, DedicatedWorkerGlobalScope: true, ServiceWorkerGlobalScope: true, SharedWorkerGlobalScope: true, WorkerGlobalScope: true, Attr: true, ClientRect: true, DOMRect: true, NamedNodeMap: true, MozNamedAttrMap: true, IDBKeyRange: true, SVGScriptElement: true, SVGAElement: true, SVGAnimateElement: true, SVGAnimateMotionElement: true, SVGAnimateTransformElement: true, SVGAnimationElement: true, SVGCircleElement: true, SVGClipPathElement: true, SVGDefsElement: true, SVGDescElement: true, SVGDiscardElement: true, SVGEllipseElement: true, SVGFEBlendElement: true, SVGFEColorMatrixElement: true, SVGFEComponentTransferElement: true, SVGFECompositeElement: true, SVGFEConvolveMatrixElement: true, SVGFEDiffuseLightingElement: true, SVGFEDisplacementMapElement: true, SVGFEDistantLightElement: true, SVGFEFloodElement: true, SVGFEFuncAElement: true, SVGFEFuncBElement: true, SVGFEFuncGElement: true, SVGFEFuncRElement: true, SVGFEGaussianBlurElement: true, SVGFEImageElement: true, SVGFEMergeElement: true, SVGFEMergeNodeElement: true, SVGFEMorphologyElement: true, SVGFEOffsetElement: true, SVGFEPointLightElement: true, SVGFESpecularLightingElement: true, SVGFESpotLightElement: true, SVGFETileElement: true, SVGFETurbulenceElement: true, SVGFilterElement: true, SVGForeignObjectElement: true, SVGGElement: true, SVGGeometryElement: true, SVGGraphicsElement: true, SVGImageElement: true, SVGLineElement: true, SVGLinearGradientElement: true, SVGMarkerElement: true, SVGMaskElement: true, SVGMetadataElement: true, SVGPathElement: true, SVGPatternElement: true, SVGPolygonElement: true, SVGPolylineElement: true, SVGRadialGradientElement: true, SVGRectElement: true, SVGSetElement: true, SVGStopElement: true, SVGStyleElement: true, SVGSVGElement: true, SVGSwitchElement: true, SVGSymbolElement: true, SVGTSpanElement: true, SVGTextContentElement: true, SVGTextElement: true, SVGTextPathElement: true, SVGTextPositioningElement: true, SVGTitleElement: true, SVGUseElement: true, SVGViewElement: true, SVGGradientElement: true, SVGComponentTransferFunctionElement: true, SVGFEDropShadowElement: true, SVGMPathElement: true, SVGElement: false});
    H.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(U.main, []);
    else
      U.main([]);
  });
})();

//# sourceMappingURL=ntango.dart.js.map
/*
 * NetTango
 * Copyright (c) 2017 Michael S. Horn, Uri Wilensky, and Corey Brady
 *
 * Northwestern University
 * 2120 Campus Drive
 * Evanston, IL 60613
 * http://tidal.northwestern.edu
 * http://ccl.northwestern.edu

 * This project was funded in part by the National Science Foundation.
 * Any opinions, findings and conclusions or recommendations expressed in this
 * material are those of the author(s) and do not necessarily reflect the views
 * of the National Science Foundation (NSF).
 */

/**
 * NetTango functions can be used to create a blocks-based programming interface
 * associated with an HTML canvas.
 */
var NetTango = {


  /// Call init to instantiate a workspace associated with an HTML canvas.
  /// TODO: Document JSON specification format--for now see README.md
  init : function(canvasId, json) {
    NetTango_InitWorkspace(canvasId, JSON.stringify(json));
  },


  /// Add a callback function to receive programChanged events from the
  /// workspace. Callback functions should take one parameter, which is
  /// the canvasId for the workspace (as a String).
  onProgramChanged : function(canvasId, callback) {
    NetTango._callbacks[canvasId] = callback;
  },

  /// Exports the code for a workspace in a given target language.
  /// The only language supported now is "NetLogo".
  exportCode : function(canvasId, language) {
    return NetTango_ExportCode(canvasId, language);
  },


  /// Exports the current state of the workspace as a JSON object to be
  /// restored at a later point.
  save : function(canvasId) {
    return JSON.parse(NetTango_Save(canvasId));
  },


  /// Exports the state of all workspaces as a JSON object to be restored
  /// at a later point.
  saveAll : function() {
    return JSON.parse(NetTango_SaveAll());
  },


  /// Restores a workspace to a previously saved state (json object).
  /// Note, for now this is just an alias of the NetTango.init function.
  restore : function(canvasId, json) {
    NetTango_InitWorkspace(canvasId, JSON.stringify(json));
  },


  /// Restores all workspaces from a previously saved state.
  restoreAll : function(json) {
    NetTango_InitAllWorkspaces(JSON.stringify(json));
  },


  _relayCallback : function(canvasId) {
    if (canvasId in NetTango._callbacks) {
      NetTango._callbacks[canvasId](canvasId);
    }
  },

  _callbacks : { }
}
